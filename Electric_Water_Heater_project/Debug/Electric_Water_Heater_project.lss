
Electric_Water_Heater_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001428  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001428  000014bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  00800062  00800062  000014be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003881  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013bb  00000000  00000000  00005185  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002323  00000000  00000000  00006540  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c8  00000000  00000000  00008864  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e6b  00000000  00000000  0000902c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002091  00000000  00000000  00009e97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000bf28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_1>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	32 04       	cpc	r3, r2
      56:	36 04       	cpc	r3, r6
      58:	3a 04       	cpc	r3, r10
      5a:	3e 04       	cpc	r3, r14
      5c:	42 04       	cpc	r4, r2
      5e:	46 04       	cpc	r4, r6
      60:	4a 04       	cpc	r4, r10
      62:	4e 04       	cpc	r4, r14

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e2       	ldi	r30, 0x28	; 40
      78:	f4 e1       	ldi	r31, 0x14	; 20
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a2 36       	cpi	r26, 0x62	; 98
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	20 e0       	ldi	r18, 0x00	; 0
      88:	a2 e6       	ldi	r26, 0x62	; 98
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a7 3a       	cpi	r26, 0xA7	; 167
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
      9a:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <__vector_1>:



//===============================================================================================

ISR(INT0_vect){
      a2:	1f 92       	push	r1
      a4:	0f 92       	push	r0
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	0f 92       	push	r0
      aa:	11 24       	eor	r1, r1
      ac:	2f 93       	push	r18
      ae:	3f 93       	push	r19
      b0:	4f 93       	push	r20
      b2:	5f 93       	push	r21
      b4:	6f 93       	push	r22
      b6:	7f 93       	push	r23
      b8:	8f 93       	push	r24
      ba:	9f 93       	push	r25
      bc:	af 93       	push	r26
      be:	bf 93       	push	r27
      c0:	ef 93       	push	r30
      c2:	ff 93       	push	r31
	power_flag^=1;
      c4:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <power_flag>
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	89 27       	eor	r24, r25
      cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <power_flag>
	if(power_flag==0){
      d0:	81 11       	cpse	r24, r1
      d2:	0f c0       	rjmp	.+30     	; 0xf2 <__vector_1+0x50>
		LED0_OFF();
      d4:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <LED0_OFF>
		LED1_OFF();
      d8:	0e 94 07 04 	call	0x80e	; 0x80e <LED1_OFF>
		LED2_OFF();
      dc:	0e 94 13 04 	call	0x826	; 0x826 <LED2_OFF>
		Timer0_Stop();
      e0:	0e 94 45 06 	call	0xc8a	; 0xc8a <Timer0_Stop>
		Timer2_Stop();
      e4:	0e 94 57 07 	call	0xeae	; 0xeae <Timer2_Stop>
		first_push_flag=0;
      e8:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <first_push_flag>
		//SEVSEG_Disable1();
		//SEVSEG_Disable2();
		//SEVSEG_Dot_Disable();
		LCD_disable();
      ec:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_disable>
      f0:	12 c0       	rjmp	.+36     	; 0x116 <__vector_1+0x74>
	}
	else {
		LED0_ON();
      f2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <LED0_ON>
		//SEVSEG_Initialization();
		LCD_Initialization();
      f6:	0e 94 a4 03 	call	0x748	; 0x748 <LCD_Initialization>
		test=1;	//to reset the counter
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <test>
		Timer2_Start(PreS_1024_);	//start timer2 to get the ADC read every 100 ms
     100:	85 e0       	ldi	r24, 0x05	; 5
     102:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <Timer2_Start>
		Timer2_WithInterrupt_SetDelay(Normal_Mode_ , 100 , 255);
     106:	2f ef       	ldi	r18, 0xFF	; 255
     108:	44 e6       	ldi	r20, 0x64	; 100
     10a:	50 e0       	ldi	r21, 0x00	; 0
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	70 e0       	ldi	r23, 0x00	; 0
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	0e 94 9f 07 	call	0xf3e	; 0xf3e <Timer2_WithInterrupt_SetDelay>
	}
}
     116:	ff 91       	pop	r31
     118:	ef 91       	pop	r30
     11a:	bf 91       	pop	r27
     11c:	af 91       	pop	r26
     11e:	9f 91       	pop	r25
     120:	8f 91       	pop	r24
     122:	7f 91       	pop	r23
     124:	6f 91       	pop	r22
     126:	5f 91       	pop	r21
     128:	4f 91       	pop	r20
     12a:	3f 91       	pop	r19
     12c:	2f 91       	pop	r18
     12e:	0f 90       	pop	r0
     130:	0f be       	out	0x3f, r0	; 63
     132:	0f 90       	pop	r0
     134:	1f 90       	pop	r1
     136:	18 95       	reti

00000138 <sitting_temp>:

//===============================================================================================


void sitting_temp(uint8_t btn0_read_,uint8_t btn1_read_){		//if user press the button make test = 1 to restart timer
	if(btn0_read_==PRESSED&&degree<75){
     138:	81 30       	cpi	r24, 0x01	; 1
     13a:	01 f5       	brne	.+64     	; 0x17c <sitting_temp+0x44>
     13c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     140:	9b 34       	cpi	r25, 0x4B	; 75
     142:	e0 f4       	brcc	.+56     	; 0x17c <sitting_temp+0x44>
		degree+=5;
     144:	65 e0       	ldi	r22, 0x05	; 5
     146:	69 0f       	add	r22, r25
     148:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <degree>
		EEPROM_Write(degree_addr , degree); // Saving desired temperature on EEPROM
     14c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 a7 05 	call	0xb4e	; 0xb4e <EEPROM_Write>
		access_flag=1;
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <access_flag>
		test=1;
     15c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <test>
		Timer0_Stop();
     160:	0e 94 45 06 	call	0xc8a	; 0xc8a <Timer0_Stop>
		Timer0_Start(PreS_1024);
     164:	85 e0       	ldi	r24, 0x05	; 5
     166:	0e 94 e7 05 	call	0xbce	; 0xbce <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     16a:	2f ef       	ldi	r18, 0xFF	; 255
     16c:	48 e8       	ldi	r20, 0x88	; 136
     16e:	53 e1       	ldi	r21, 0x13	; 19
     170:	60 e0       	ldi	r22, 0x00	; 0
     172:	70 e0       	ldi	r23, 0x00	; 0
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Timer0_WithInterrupt_SetDelay>
     17a:	08 95       	ret
	}
	else if(btn1_read_==PRESSED&&degree>35) {
     17c:	61 30       	cpi	r22, 0x01	; 1
     17e:	01 f5       	brne	.+64     	; 0x1c0 <sitting_temp+0x88>
     180:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     184:	94 32       	cpi	r25, 0x24	; 36
     186:	e0 f0       	brcs	.+56     	; 0x1c0 <sitting_temp+0x88>
		degree-=5;
     188:	6b ef       	ldi	r22, 0xFB	; 251
     18a:	69 0f       	add	r22, r25
     18c:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <degree>
		EEPROM_Write(degree_addr , degree); // Saving desired temperature on EEPROM
     190:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 a7 05 	call	0xb4e	; 0xb4e <EEPROM_Write>
		access_flag=1;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <access_flag>
		test=1;
     1a0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <test>
		Timer0_Stop();
     1a4:	0e 94 45 06 	call	0xc8a	; 0xc8a <Timer0_Stop>
		Timer0_Start(PreS_1024);
     1a8:	85 e0       	ldi	r24, 0x05	; 5
     1aa:	0e 94 e7 05 	call	0xbce	; 0xbce <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     1ae:	2f ef       	ldi	r18, 0xFF	; 255
     1b0:	48 e8       	ldi	r20, 0x88	; 136
     1b2:	53 e1       	ldi	r21, 0x13	; 19
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Timer0_WithInterrupt_SetDelay>
     1be:	08 95       	ret
	}
	else if((btn1_read_==PRESSED&&degree==35)||(btn0_read_==PRESSED&&degree==75)) {
     1c0:	61 30       	cpi	r22, 0x01	; 1
     1c2:	21 f4       	brne	.+8      	; 0x1cc <sitting_temp+0x94>
     1c4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     1c8:	93 32       	cpi	r25, 0x23	; 35
     1ca:	31 f0       	breq	.+12     	; 0x1d8 <sitting_temp+0xa0>
     1cc:	81 30       	cpi	r24, 0x01	; 1
     1ce:	a1 f4       	brne	.+40     	; 0x1f8 <sitting_temp+0xc0>
     1d0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <degree>
     1d4:	8b 34       	cpi	r24, 0x4B	; 75
     1d6:	81 f4       	brne	.+32     	; 0x1f8 <sitting_temp+0xc0>
		test=1;
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <test>
		Timer0_Stop();
     1de:	0e 94 45 06 	call	0xc8a	; 0xc8a <Timer0_Stop>
		Timer0_Start(PreS_1024);
     1e2:	85 e0       	ldi	r24, 0x05	; 5
     1e4:	0e 94 e7 05 	call	0xbce	; 0xbce <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     1e8:	2f ef       	ldi	r18, 0xFF	; 255
     1ea:	48 e8       	ldi	r20, 0x88	; 136
     1ec:	53 e1       	ldi	r21, 0x13	; 19
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Timer0_WithInterrupt_SetDelay>
     1f8:	08 95       	ret

000001fa <main>:
{

	
	

	Interrupt_Initialization(INT0_Signal);
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	0e 94 bc 05 	call	0xb78	; 0xb78 <Interrupt_Initialization>
	DIO_SetPinPullUp(DIO_PORTD,DIO_PIN2);
     200:	62 e0       	ldi	r22, 0x02	; 2
     202:	83 e0       	ldi	r24, 0x03	; 3
     204:	0e 94 73 05 	call	0xae6	; 0xae6 <DIO_SetPinPullUp>
	Timer0_WithInterrupt_Initialization(Normal_Mode,Pin_disconnected);
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Timer0_WithInterrupt_Initialization>
	Timer2_WithInterrupt_Initialization(Normal_Mode_ , Pin_disconnected_);
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	0e 94 61 07 	call	0xec2	; 0xec2 <Timer2_WithInterrupt_Initialization>

	// Timer1_with_interrupt_initialization(TIMER1_Normal , TIMER1_PIN_Disconnected,TIMER1_Channel_A);
	// Timer1_start(TIMER1_Prescaler_1024);
	// Timer1_with_interrupt_setDelay(TIMER1_Normal , 100 , 255);
	ADC_Initialization(ADC1);
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	0e 94 29 04 	call	0x852	; 0x852 <ADC_Initialization>
	BTN0_Initialization();
     21e:	0e 94 37 03 	call	0x66e	; 0x66e <BTN0_Initialization>
	BTN1_Initialization();
     222:	0e 94 4c 03 	call	0x698	; 0x698 <BTN1_Initialization>
	LED0_Initialization();
     226:	0e 94 ed 03 	call	0x7da	; 0x7da <LED0_Initialization>
	LED1_Initialization();
     22a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LED1_Initialization>
	LED2_Initialization();
     22e:	0e 94 0b 04 	call	0x816	; 0x816 <LED2_Initialization>
	Relay_Initialization();
     232:	0e 94 17 04 	call	0x82e	; 0x82e <Relay_Initialization>
	
	Timer2_Start(PreS_1024_);	//start timer2 to get the ADC read every 100 ms
     236:	85 e0       	ldi	r24, 0x05	; 5
     238:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <Timer2_Start>
	Timer2_WithInterrupt_SetDelay(Normal_Mode_ , 100 , 255);
     23c:	2f ef       	ldi	r18, 0xFF	; 255
     23e:	44 e6       	ldi	r20, 0x64	; 100
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	0e 94 9f 07 	call	0xf3e	; 0xf3e <Timer2_WithInterrupt_SetDelay>

	
	/* Replace with your application code */
	while (1)
	{
		btn1_read_ = BTN1_Read();	//get button1 read
     24c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <BTN1_Read>
     250:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <btn1_read_>
		btn0_read_ =BTN0_Read();	//get button0 read
     254:	0e 94 41 03 	call	0x682	; 0x682 <BTN0_Read>
     258:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <btn0_read_>
		

		//check if the device is on or off
		if (power_flag==0);	//if off do noting
     25c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <power_flag>
     260:	88 23       	and	r24, r24
     262:	a1 f3       	breq	.-24     	; 0x24c <main+0x52>
		else{	//if on start operations
			if (access_flag==1)
     264:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <access_flag>
     268:	81 30       	cpi	r24, 0x01	; 1
     26a:	39 f4       	brne	.+14     	; 0x27a <main+0x80>
			{
				degree=EEPROM_Read(degree_addr);
     26c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 b3 05 	call	0xb66	; 0xb66 <EEPROM_Read>
     276:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <degree>
			}
			

			if((first_push_flag==0&&btn0_read_==PRESSED)||(first_push_flag==0&&btn1_read_==PRESSED)){	//check if buttons are clicked for the first time to enter setting mode
     27a:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <first_push_flag>
     27e:	81 11       	cpse	r24, r1
     280:	19 c0       	rjmp	.+50     	; 0x2b4 <main+0xba>
     282:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <btn0_read_>
     286:	81 30       	cpi	r24, 0x01	; 1
     288:	21 f0       	breq	.+8      	; 0x292 <main+0x98>
     28a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <btn1_read_>
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	89 f4       	brne	.+34     	; 0x2b4 <main+0xba>
				first_push_flag=1;	//raise the flag
     292:	c1 e0       	ldi	r28, 0x01	; 1
     294:	c0 93 87 00 	sts	0x0087, r28	; 0x800087 <first_push_flag>
				Timer0_Start(PreS_1024);	//start timer0 so that if 5 seconds spend without using buttons ,exit setting mode
     298:	85 e0       	ldi	r24, 0x05	; 5
     29a:	0e 94 e7 05 	call	0xbce	; 0xbce <Timer0_Start>
				Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     29e:	2f ef       	ldi	r18, 0xFF	; 255
     2a0:	48 e8       	ldi	r20, 0x88	; 136
     2a2:	53 e1       	ldi	r21, 0x13	; 19
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Timer0_WithInterrupt_SetDelay>
				blink_7_segment = 1;
     2ae:	c0 93 6a 00 	sts	0x006A, r28	; 0x80006a <blink_7_segment>
     2b2:	06 c0       	rjmp	.+12     	; 0x2c0 <main+0xc6>
				// btn1_read_=0;
				// btn0_read_=0;
			}
			else//  if( (btn0_read_==PRESSED) ||(btn1_read_==PRESSED) ) 
			{	//if this isn't the first click call the function of setting mode
				sitting_temp(btn0_read_,btn1_read_);
     2b4:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <btn1_read_>
     2b8:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <btn0_read_>
     2bc:	0e 94 9c 00 	call	0x138	; 0x138 <sitting_temp>
				
			}
			
			//compare the current temp with set_temp
			
			if(current_temp<degree-5){
     2c0:	c0 91 61 00 	lds	r28, 0x0061	; 0x800061 <degree>
     2c4:	d0 e0       	ldi	r29, 0x00	; 0
     2c6:	be 01       	movw	r22, r28
     2c8:	65 50       	subi	r22, 0x05	; 5
     2ca:	71 09       	sbc	r23, r1
     2cc:	07 2e       	mov	r0, r23
     2ce:	00 0c       	add	r0, r0
     2d0:	88 0b       	sbc	r24, r24
     2d2:	99 0b       	sbc	r25, r25
     2d4:	0e 94 ae 08 	call	0x115c	; 0x115c <__floatsisf>
     2d8:	4b 01       	movw	r8, r22
     2da:	5c 01       	movw	r10, r24
     2dc:	c0 90 80 00 	lds	r12, 0x0080	; 0x800080 <current_temp>
     2e0:	d0 90 81 00 	lds	r13, 0x0081	; 0x800081 <current_temp+0x1>
     2e4:	e0 90 82 00 	lds	r14, 0x0082	; 0x800082 <current_temp+0x2>
     2e8:	f0 90 83 00 	lds	r15, 0x0083	; 0x800083 <current_temp+0x3>
     2ec:	a7 01       	movw	r20, r14
     2ee:	96 01       	movw	r18, r12
     2f0:	0e 94 3a 09 	call	0x1274	; 0x1274 <__gesf2>
     2f4:	18 16       	cp	r1, r24
     2f6:	44 f4       	brge	.+16     	; 0x308 <main+0x10e>
				heat_flag=1;	//raise flag of heating element
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <heat_flag>
				LED1_ON(); // Heating element on
     2fe:	0e 94 03 04 	call	0x806	; 0x806 <LED1_ON>
				LED2_OFF(); // Cooling element off
     302:	0e 94 13 04 	call	0x826	; 0x826 <LED2_OFF>
     306:	3e c0       	rjmp	.+124    	; 0x384 <main+0x18a>
			}
			else if (current_temp>degree+5)
     308:	be 01       	movw	r22, r28
     30a:	6b 5f       	subi	r22, 0xFB	; 251
     30c:	7f 4f       	sbci	r23, 0xFF	; 255
     30e:	07 2e       	mov	r0, r23
     310:	00 0c       	add	r0, r0
     312:	88 0b       	sbc	r24, r24
     314:	99 0b       	sbc	r25, r25
     316:	0e 94 ae 08 	call	0x115c	; 0x115c <__floatsisf>
     31a:	2b 01       	movw	r4, r22
     31c:	3c 01       	movw	r6, r24
     31e:	9b 01       	movw	r18, r22
     320:	ac 01       	movw	r20, r24
     322:	c7 01       	movw	r24, r14
     324:	b6 01       	movw	r22, r12
     326:	0e 94 3a 09 	call	0x1274	; 0x1274 <__gesf2>
     32a:	18 16       	cp	r1, r24
     32c:	3c f4       	brge	.+14     	; 0x33c <main+0x142>
			{
				heat_flag=0;	//raise flag of heating element
     32e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <heat_flag>
				LED1_OFF(); // Heating element off
     332:	0e 94 07 04 	call	0x80e	; 0x80e <LED1_OFF>
				LED2_ON(); // Cooling element on
     336:	0e 94 0f 04 	call	0x81e	; 0x81e <LED2_ON>
     33a:	24 c0       	rjmp	.+72     	; 0x384 <main+0x18a>
			}
			else if (current_temp <=degree - 5 && current_temp >= degree + 5)
     33c:	a7 01       	movw	r20, r14
     33e:	96 01       	movw	r18, r12
     340:	c5 01       	movw	r24, r10
     342:	b4 01       	movw	r22, r8
     344:	0e 94 3a 09 	call	0x1274	; 0x1274 <__gesf2>
     348:	88 23       	and	r24, r24
     34a:	cc f0       	brlt	.+50     	; 0x37e <main+0x184>
     34c:	a3 01       	movw	r20, r6
     34e:	92 01       	movw	r18, r4
     350:	c7 01       	movw	r24, r14
     352:	b6 01       	movw	r22, r12
     354:	0e 94 3a 09 	call	0x1274	; 0x1274 <__gesf2>
     358:	88 23       	and	r24, r24
     35a:	8c f0       	brlt	.+34     	; 0x37e <main+0x184>
			{
				LED1_OFF(); // Heating element off
     35c:	0e 94 07 04 	call	0x80e	; 0x80e <LED1_OFF>
				LED2_OFF(); // Cooling element off
     360:	0e 94 13 04 	call	0x826	; 0x826 <LED2_OFF>
				heat_flag=0;	//raise flag of heating element
     364:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <heat_flag>
				Relay_ON();
     368:	0e 94 1d 04 	call	0x83a	; 0x83a <Relay_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     36c:	8f e3       	ldi	r24, 0x3F	; 63
     36e:	9c e9       	ldi	r25, 0x9C	; 156
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	f1 f7       	brne	.-4      	; 0x370 <main+0x176>
     374:	00 c0       	rjmp	.+0      	; 0x376 <main+0x17c>
     376:	00 00       	nop
				_delay_ms(10);
				Relay_OFF();
     378:	0e 94 23 04 	call	0x846	; 0x846 <Relay_OFF>
				heat_flag=0;	//raise flag of heating element
				LED1_OFF(); // Heating element off
				LED2_ON(); // Cooling element on
			}
			else if (current_temp <=degree - 5 && current_temp >= degree + 5)
			{
     37c:	03 c0       	rjmp	.+6      	; 0x384 <main+0x18a>
				_delay_ms(10);
				Relay_OFF();
			}
			else
			{
				SET_BIT(PORTA , PIN3);
     37e:	8b b3       	in	r24, 0x1b	; 27
     380:	88 60       	ori	r24, 0x08	; 8
     382:	8b bb       	out	0x1b, r24	; 27
			}
			
			
			if (first_push_flag==0)
     384:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <first_push_flag>
     388:	81 11       	cpse	r24, r1
     38a:	60 cf       	rjmp	.-320    	; 0x24c <main+0x52>
			{
				// LCD_Clear();
				// LCD_Write_Number(current_temp);
				SEVSEG_Display(current_temp);
     38c:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <current_temp>
     390:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <current_temp+0x1>
     394:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <current_temp+0x2>
     398:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <current_temp+0x3>
     39c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fixunssfsi>
     3a0:	86 2f       	mov	r24, r22
     3a2:	0e 94 06 03 	call	0x60c	; 0x60c <SEVSEG_Display>
     3a6:	52 cf       	rjmp	.-348    	; 0x24c <main+0x52>

000003a8 <calcualate_avg_temp>:

//===============================================================================================


float calcualate_avg_temp(uint16_t* arr)
{
     3a8:	ac 01       	movw	r20, r24
	uint16_t sum = 0;
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     3aa:	90 e0       	ldi	r25, 0x00	; 0
//===============================================================================================


float calcualate_avg_temp(uint16_t* arr)
{
	uint16_t sum = 0;
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	70 e0       	ldi	r23, 0x00	; 0
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     3b0:	0b c0       	rjmp	.+22     	; 0x3c8 <calcualate_avg_temp+0x20>
	{
		sum += arr[i];
     3b2:	e9 2f       	mov	r30, r25
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	ee 0f       	add	r30, r30
     3b8:	ff 1f       	adc	r31, r31
     3ba:	e4 0f       	add	r30, r20
     3bc:	f5 1f       	adc	r31, r21
     3be:	20 81       	ld	r18, Z
     3c0:	31 81       	ldd	r19, Z+1	; 0x01
     3c2:	62 0f       	add	r22, r18
     3c4:	73 1f       	adc	r23, r19

float calcualate_avg_temp(uint16_t* arr)
{
	uint16_t sum = 0;
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     3c6:	9f 5f       	subi	r25, 0xFF	; 255
     3c8:	9a 30       	cpi	r25, 0x0A	; 10
     3ca:	98 f3       	brcs	.-26     	; 0x3b2 <calcualate_avg_temp+0xa>
	{
		sum += arr[i];
	}
	
	return (float ) sum / (float ) 10;
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 ac 08 	call	0x1158	; 0x1158 <__floatunsisf>
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	40 e2       	ldi	r20, 0x20	; 32
     3da:	51 e4       	ldi	r21, 0x41	; 65
     3dc:	0e 94 0b 08 	call	0x1016	; 0x1016 <__divsf3>
}
     3e0:	08 95       	ret

000003e2 <__vector_11>:

//===============================================================================================



ISR(TIMER0_OVF_vect){
     3e2:	1f 92       	push	r1
     3e4:	0f 92       	push	r0
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	0f 92       	push	r0
     3ea:	11 24       	eor	r1, r1
     3ec:	2f 93       	push	r18
     3ee:	3f 93       	push	r19
     3f0:	4f 93       	push	r20
     3f2:	5f 93       	push	r21
     3f4:	6f 93       	push	r22
     3f6:	7f 93       	push	r23
     3f8:	8f 93       	push	r24
     3fa:	9f 93       	push	r25
     3fc:	af 93       	push	r26
     3fe:	bf 93       	push	r27
     400:	ef 93       	push	r30
     402:	ff 93       	push	r31
	
	static uint32_t cnt=0;
	if(test==1){	//restart count from 0 if user press the buttons
     404:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <test>
     408:	81 30       	cpi	r24, 0x01	; 1
     40a:	51 f4       	brne	.+20     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
		cnt=0;
     40c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.2133>
     410:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.2133+0x1>
     414:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <cnt.2133+0x2>
     418:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <cnt.2133+0x3>
		test=0;
     41c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <test>
	}
	if(cnt==Number_OVF){		//if counter reach number of overflows
     420:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <cnt.2133>
     424:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <cnt.2133+0x1>
     428:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <cnt.2133+0x2>
     42c:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <cnt.2133+0x3>
     430:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <Number_OVF>
     434:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <Number_OVF+0x1>
     438:	a0 91 93 00 	lds	r26, 0x0093	; 0x800093 <Number_OVF+0x2>
     43c:	b0 91 94 00 	lds	r27, 0x0094	; 0x800094 <Number_OVF+0x3>
     440:	48 17       	cp	r20, r24
     442:	59 07       	cpc	r21, r25
     444:	6a 07       	cpc	r22, r26
     446:	7b 07       	cpc	r23, r27
     448:	61 f4       	brne	.+24     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
		Timer0_Stop();			//stop the timer
     44a:	0e 94 45 06 	call	0xc8a	; 0xc8a <Timer0_Stop>
		first_push_flag=0;
     44e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <first_push_flag>
		cnt=0;					//make  counter =0
     452:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.2133>
     456:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.2133+0x1>
     45a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <cnt.2133+0x2>
     45e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <cnt.2133+0x3>
	else if(cnt%(Number_OVF/5)==0){
		LCD_Write_Number(degree);
		//SEVSEG_Display(degree);
	}
	*/
	cnt++;
     462:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cnt.2133>
     466:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cnt.2133+0x1>
     46a:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <cnt.2133+0x2>
     46e:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <cnt.2133+0x3>
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	a1 1d       	adc	r26, r1
     476:	b1 1d       	adc	r27, r1
     478:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <cnt.2133>
     47c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <cnt.2133+0x1>
     480:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <cnt.2133+0x2>
     484:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <cnt.2133+0x3>
}
     488:	ff 91       	pop	r31
     48a:	ef 91       	pop	r30
     48c:	bf 91       	pop	r27
     48e:	af 91       	pop	r26
     490:	9f 91       	pop	r25
     492:	8f 91       	pop	r24
     494:	7f 91       	pop	r23
     496:	6f 91       	pop	r22
     498:	5f 91       	pop	r21
     49a:	4f 91       	pop	r20
     49c:	3f 91       	pop	r19
     49e:	2f 91       	pop	r18
     4a0:	0f 90       	pop	r0
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	0f 90       	pop	r0
     4a6:	1f 90       	pop	r1
     4a8:	18 95       	reti

000004aa <__vector_5>:

//===============================================================================================


ISR(TIMER2_OVF_vect)
{
     4aa:	1f 92       	push	r1
     4ac:	0f 92       	push	r0
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	0f 92       	push	r0
     4b2:	11 24       	eor	r1, r1
     4b4:	2f 93       	push	r18
     4b6:	3f 93       	push	r19
     4b8:	4f 93       	push	r20
     4ba:	5f 93       	push	r21
     4bc:	6f 93       	push	r22
     4be:	7f 93       	push	r23
     4c0:	8f 93       	push	r24
     4c2:	9f 93       	push	r25
     4c4:	af 93       	push	r26
     4c6:	bf 93       	push	r27
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	ef 93       	push	r30
     4ce:	ff 93       	push	r31
	static uint32_t timer2_count = 0;
	
	if (first_push_flag == 1)
     4d0:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <first_push_flag>
     4d4:	81 30       	cpi	r24, 0x01	; 1
     4d6:	69 f4       	brne	.+26     	; 0x4f2 <__vector_5+0x48>
	{
		if( blink_7_segment )
     4d8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <blink_7_segment>
     4dc:	88 23       	and	r24, r24
     4de:	29 f0       	breq	.+10     	; 0x4ea <__vector_5+0x40>
		{
			SEVSEG_Display(degree);
     4e0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <degree>
     4e4:	0e 94 06 03 	call	0x60c	; 0x60c <SEVSEG_Display>
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__vector_5+0x48>
		}
		else
		{
			SEVSEG_Disable1();
     4ea:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <SEVSEG_Disable1>
			SEVSEG_Disable2();
     4ee:	0e 94 00 03 	call	0x600	; 0x600 <SEVSEG_Disable2>
	else
	{
		SEVSEG_Display(current_temp);
	}
	*/
	if(timer2_count < Timer2_OVF)
     4f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     4f6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
     4fa:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <__data_end+0x2>
     4fe:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <__data_end+0x3>
     502:	40 91 9f 00 	lds	r20, 0x009F	; 0x80009f <Timer2_OVF>
     506:	50 91 a0 00 	lds	r21, 0x00A0	; 0x8000a0 <Timer2_OVF+0x1>
     50a:	60 91 a1 00 	lds	r22, 0x00A1	; 0x8000a1 <Timer2_OVF+0x2>
     50e:	70 91 a2 00 	lds	r23, 0x00A2	; 0x8000a2 <Timer2_OVF+0x3>
     512:	84 17       	cp	r24, r20
     514:	95 07       	cpc	r25, r21
     516:	a6 07       	cpc	r26, r22
     518:	b7 07       	cpc	r27, r23
     51a:	60 f4       	brcc	.+24     	; 0x534 <__vector_5+0x8a>
	{
		timer2_count++;
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	a1 1d       	adc	r26, r1
     520:	b1 1d       	adc	r27, r1
     522:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
     526:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
     52a:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <__data_end+0x2>
     52e:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <__data_end+0x3>
     532:	41 c0       	rjmp	.+130    	; 0x5b6 <__vector_5+0x10c>
	}
	else
	{
		// ADC read
		last_10_temp[temp_index] = (500.0 * ADC_Read()) / 1024.0 ; // degree
     534:	c0 91 6b 00 	lds	r28, 0x006B	; 0x80006b <temp_index>
     538:	d0 e0       	ldi	r29, 0x00	; 0
     53a:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Read>
     53e:	bc 01       	movw	r22, r24
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 ac 08 	call	0x1158	; 0x1158 <__floatunsisf>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	4a ef       	ldi	r20, 0xFA	; 250
     54e:	53 e4       	ldi	r21, 0x43	; 67
     550:	0e 94 3f 09 	call	0x127e	; 0x127e <__mulsf3>
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	40 e8       	ldi	r20, 0x80	; 128
     55a:	5a e3       	ldi	r21, 0x3A	; 58
     55c:	0e 94 3f 09 	call	0x127e	; 0x127e <__mulsf3>
     560:	cc 0f       	add	r28, r28
     562:	dd 1f       	adc	r29, r29
     564:	c4 59       	subi	r28, 0x94	; 148
     566:	df 4f       	sbci	r29, 0xFF	; 255
     568:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fixunssfsi>
     56c:	79 83       	std	Y+1, r23	; 0x01
     56e:	68 83       	st	Y, r22
		temp_index++;
     570:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <temp_index>
     574:	8f 5f       	subi	r24, 0xFF	; 255
     576:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <temp_index>

		if(temp_index > 9)
     57a:	8a 30       	cpi	r24, 0x0A	; 10
     57c:	a0 f0       	brcs	.+40     	; 0x5a6 <__vector_5+0xfc>
		{
			temp_index = 0;
     57e:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <temp_index>
			current_temp=calcualate_avg_temp(last_10_temp);
     582:	8c e6       	ldi	r24, 0x6C	; 108
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <calcualate_avg_temp>
     58a:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <current_temp>
     58e:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <current_temp+0x1>
     592:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <current_temp+0x2>
     596:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <current_temp+0x3>
			
			blink_7_segment ^= 1;
     59a:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <blink_7_segment>
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	89 27       	eor	r24, r25
     5a2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <blink_7_segment>
		}
		timer2_count = 0;
     5a6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
     5aa:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
     5ae:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
     5b2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>

	}
}
     5b6:	ff 91       	pop	r31
     5b8:	ef 91       	pop	r30
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	bf 91       	pop	r27
     5c0:	af 91       	pop	r26
     5c2:	9f 91       	pop	r25
     5c4:	8f 91       	pop	r24
     5c6:	7f 91       	pop	r23
     5c8:	6f 91       	pop	r22
     5ca:	5f 91       	pop	r21
     5cc:	4f 91       	pop	r20
     5ce:	3f 91       	pop	r19
     5d0:	2f 91       	pop	r18
     5d2:	0f 90       	pop	r0
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	0f 90       	pop	r0
     5d8:	1f 90       	pop	r1
     5da:	18 95       	reti

000005dc <SEVSEG_Enable1>:
{
	DIO_SetPinValue(SEVSEG_CTRL_PORT, SEVSEG_PIN_DOT, SEVSEG_HIGH);
}
void SEVSEG_Dot_Disable(void)//Disable dot
{
	DIO_SetPinValue(SEVSEG_CTRL_PORT, SEVSEG_PIN_DOT, SEVSEG_LOW);
     5dc:	41 e0       	ldi	r20, 0x01	; 1
     5de:	61 e0       	ldi	r22, 0x01	; 1
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	0e 94 ce 04 	call	0x99c	; 0x99c <DIO_SetPinValue>
     5e6:	08 95       	ret

000005e8 <SEVSEG_Disable1>:
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e 94 ce 04 	call	0x99c	; 0x99c <DIO_SetPinValue>
     5f2:	08 95       	ret

000005f4 <SEVSEG_Enable2>:
     5f4:	41 e0       	ldi	r20, 0x01	; 1
     5f6:	62 e0       	ldi	r22, 0x02	; 2
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	0e 94 ce 04 	call	0x99c	; 0x99c <DIO_SetPinValue>
     5fe:	08 95       	ret

00000600 <SEVSEG_Disable2>:
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	62 e0       	ldi	r22, 0x02	; 2
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	0e 94 ce 04 	call	0x99c	; 0x99c <DIO_SetPinValue>
     60a:	08 95       	ret

0000060c <SEVSEG_Display>:
}
void SEVSEG_Display(uint8_t number)
{
     60c:	cf 93       	push	r28
	uint8_t num1 = number%10;
     60e:	9d ec       	ldi	r25, 0xCD	; 205
     610:	89 9f       	mul	r24, r25
     612:	91 2d       	mov	r25, r1
     614:	11 24       	eor	r1, r1
     616:	29 2f       	mov	r18, r25
     618:	26 95       	lsr	r18
     61a:	26 95       	lsr	r18
     61c:	26 95       	lsr	r18
     61e:	22 0f       	add	r18, r18
     620:	32 2f       	mov	r19, r18
     622:	33 0f       	add	r19, r19
     624:	33 0f       	add	r19, r19
     626:	23 0f       	add	r18, r19
     628:	82 1b       	sub	r24, r18
     62a:	28 2f       	mov	r18, r24
	uint8_t num2 = number/10;
     62c:	c9 2f       	mov	r28, r25
     62e:	c6 95       	lsr	r28
     630:	c6 95       	lsr	r28
     632:	c6 95       	lsr	r28
	PORTA = (num1 << 4);
     634:	22 95       	swap	r18
     636:	20 7f       	andi	r18, 0xF0	; 240
     638:	2b bb       	out	0x1b, r18	; 27
	SEVSEG_Enable1();
     63a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <SEVSEG_Enable1>
	SEVSEG_Disable2();
     63e:	0e 94 00 03 	call	0x600	; 0x600 <SEVSEG_Disable2>
     642:	8f e3       	ldi	r24, 0x3F	; 63
     644:	9c e9       	ldi	r25, 0x9C	; 156
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	f1 f7       	brne	.-4      	; 0x646 <SEVSEG_Display+0x3a>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <SEVSEG_Display+0x40>
     64c:	00 00       	nop
	_delay_ms(10);
	PORTA = (num2 << 4);
     64e:	9c 2f       	mov	r25, r28
     650:	92 95       	swap	r25
     652:	90 7f       	andi	r25, 0xF0	; 240
     654:	9b bb       	out	0x1b, r25	; 27
	SEVSEG_Disable1();
     656:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <SEVSEG_Disable1>
	SEVSEG_Enable2();
     65a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <SEVSEG_Enable2>
     65e:	8f e3       	ldi	r24, 0x3F	; 63
     660:	9c e9       	ldi	r25, 0x9C	; 156
     662:	01 97       	sbiw	r24, 0x01	; 1
     664:	f1 f7       	brne	.-4      	; 0x662 <SEVSEG_Display+0x56>
     666:	00 c0       	rjmp	.+0      	; 0x668 <SEVSEG_Display+0x5c>
     668:	00 00       	nop
	_delay_ms(10);
     66a:	cf 91       	pop	r28
     66c:	08 95       	ret

0000066e <BTN0_Initialization>:
#include "PushBTN0.h"


void BTN0_Initialization(void)
{
	DIO_SetPinDirection(BTN0_PORT, BTN0_PIN, BTN0_INP);
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	0e 94 5d 04 	call	0x8ba	; 0x8ba <DIO_SetPinDirection>
	DIO_SetPinPullUp(BTN0_PORT , BTN0_PIN);
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	0e 94 73 05 	call	0xae6	; 0xae6 <DIO_SetPinPullUp>
     680:	08 95       	ret

00000682 <BTN0_Read>:

uint8_t BTN0_Read(void)
{
	uint8_t Btn = NPRESSED;
	uint8_t val = 0;
	val = DIO_ReadPinValue(BTN0_PORT, BTN0_PIN);
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	0e 94 3f 05 	call	0xa7e	; 0xa7e <DIO_ReadPinValue>
     68a:	ef e3       	ldi	r30, 0x3F	; 63
     68c:	fc e9       	ldi	r31, 0x9C	; 156
     68e:	31 97       	sbiw	r30, 0x01	; 1
     690:	f1 f7       	brne	.-4      	; 0x68e <BTN0_Read+0xc>
     692:	00 c0       	rjmp	.+0      	; 0x694 <BTN0_Read+0x12>
     694:	00 00       	nop
	{
		Btn = DIO_ReadPinValue(BTN0_PORT, BTN0_PIN);
	}
	_delay_ms(10);
	return val;
}
     696:	08 95       	ret

00000698 <BTN1_Initialization>:
#include "PushBTN1.h"


void BTN1_Initialization(void)
{
	DIO_SetPinDirection(BTN1_PORT, BTN1_PIN, BTN1_INP);
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	66 e0       	ldi	r22, 0x06	; 6
     69c:	83 e0       	ldi	r24, 0x03	; 3
     69e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <DIO_SetPinDirection>
     6a2:	08 95       	ret

000006a4 <BTN1_Read>:

uint8_t BTN1_Read(void)
{
	uint8_t Btn = NPRESSED;
	uint8_t val = 0;
	val = DIO_ReadPinValue(BTN1_PORT, BTN1_PIN);
     6a4:	66 e0       	ldi	r22, 0x06	; 6
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	0e 94 3f 05 	call	0xa7e	; 0xa7e <DIO_ReadPinValue>
     6ac:	ef e3       	ldi	r30, 0x3F	; 63
     6ae:	fc e9       	ldi	r31, 0x9C	; 156
     6b0:	31 97       	sbiw	r30, 0x01	; 1
     6b2:	f1 f7       	brne	.-4      	; 0x6b0 <BTN1_Read+0xc>
     6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <BTN1_Read+0x12>
     6b6:	00 00       	nop
	{
		Btn = DIO_ReadPinValue(BTN1_PORT, BTN1_PIN);
	}
	_delay_ms(10);
	return val;
}
     6b8:	08 95       	ret

000006ba <LCD_Write_Command>:
	{
		LCD_Write_Character(customChatacter[iter]);
	}
	/*Choose location*/
	LCD_Location(loc[0], loc[1]);
}
     6ba:	cf 93       	push	r28
     6bc:	c8 2f       	mov	r28, r24
     6be:	40 e0       	ldi	r20, 0x00	; 0
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	0e 94 ce 04 	call	0x99c	; 0x99c <DIO_SetPinValue>
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	62 e0       	ldi	r22, 0x02	; 2
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	0e 94 ce 04 	call	0x99c	; 0x99c <DIO_SetPinValue>
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	63 e0       	ldi	r22, 0x03	; 3
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	0e 94 ce 04 	call	0x99c	; 0x99c <DIO_SetPinValue>
     6dc:	8b b3       	in	r24, 0x1b	; 27
     6de:	9c 2f       	mov	r25, r28
     6e0:	90 7f       	andi	r25, 0xF0	; 240
     6e2:	8f 70       	andi	r24, 0x0F	; 15
     6e4:	89 2b       	or	r24, r25
     6e6:	8b bb       	out	0x1b, r24	; 27
     6e8:	41 e0       	ldi	r20, 0x01	; 1
     6ea:	63 e0       	ldi	r22, 0x03	; 3
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	0e 94 ce 04 	call	0x99c	; 0x99c <DIO_SetPinValue>
     6f2:	8f e9       	ldi	r24, 0x9F	; 159
     6f4:	9f e0       	ldi	r25, 0x0F	; 15
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <LCD_Write_Command+0x3c>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <LCD_Write_Command+0x42>
     6fc:	00 00       	nop
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	63 e0       	ldi	r22, 0x03	; 3
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	0e 94 ce 04 	call	0x99c	; 0x99c <DIO_SetPinValue>
     708:	20 e1       	ldi	r18, 0x10	; 16
     70a:	c2 9f       	mul	r28, r18
     70c:	c0 01       	movw	r24, r0
     70e:	11 24       	eor	r1, r1
     710:	9b b3       	in	r25, 0x1b	; 27
     712:	9f 70       	andi	r25, 0x0F	; 15
     714:	89 2b       	or	r24, r25
     716:	8b bb       	out	0x1b, r24	; 27
     718:	41 e0       	ldi	r20, 0x01	; 1
     71a:	63 e0       	ldi	r22, 0x03	; 3
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	0e 94 ce 04 	call	0x99c	; 0x99c <DIO_SetPinValue>
     722:	8f e9       	ldi	r24, 0x9F	; 159
     724:	9f e0       	ldi	r25, 0x0F	; 15
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <LCD_Write_Command+0x6c>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <LCD_Write_Command+0x72>
     72c:	00 00       	nop
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	63 e0       	ldi	r22, 0x03	; 3
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	0e 94 ce 04 	call	0x99c	; 0x99c <DIO_SetPinValue>
     738:	8f e1       	ldi	r24, 0x1F	; 31
     73a:	9e e4       	ldi	r25, 0x4E	; 78
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <LCD_Write_Command+0x82>
     740:	00 c0       	rjmp	.+0      	; 0x742 <LCD_Write_Command+0x88>
     742:	00 00       	nop
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <LCD_Initialization>:
     748:	41 e0       	ldi	r20, 0x01	; 1
     74a:	61 e0       	ldi	r22, 0x01	; 1
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <DIO_SetPinDirection>
     752:	41 e0       	ldi	r20, 0x01	; 1
     754:	62 e0       	ldi	r22, 0x02	; 2
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	0e 94 5d 04 	call	0x8ba	; 0x8ba <DIO_SetPinDirection>
     75c:	41 e0       	ldi	r20, 0x01	; 1
     75e:	63 e0       	ldi	r22, 0x03	; 3
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	0e 94 5d 04 	call	0x8ba	; 0x8ba <DIO_SetPinDirection>
     766:	41 e0       	ldi	r20, 0x01	; 1
     768:	64 e0       	ldi	r22, 0x04	; 4
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <DIO_SetPinDirection>
     770:	41 e0       	ldi	r20, 0x01	; 1
     772:	65 e0       	ldi	r22, 0x05	; 5
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	0e 94 5d 04 	call	0x8ba	; 0x8ba <DIO_SetPinDirection>
     77a:	41 e0       	ldi	r20, 0x01	; 1
     77c:	66 e0       	ldi	r22, 0x06	; 6
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	0e 94 5d 04 	call	0x8ba	; 0x8ba <DIO_SetPinDirection>
     784:	41 e0       	ldi	r20, 0x01	; 1
     786:	67 e0       	ldi	r22, 0x07	; 7
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <DIO_SetPinDirection>
     78e:	83 e3       	ldi	r24, 0x33	; 51
     790:	0e 94 5d 03 	call	0x6ba	; 0x6ba <LCD_Write_Command>
     794:	82 e3       	ldi	r24, 0x32	; 50
     796:	0e 94 5d 03 	call	0x6ba	; 0x6ba <LCD_Write_Command>
     79a:	88 e2       	ldi	r24, 0x28	; 40
     79c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <LCD_Write_Command>
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <LCD_Write_Command>
     7a6:	8c e0       	ldi	r24, 0x0C	; 12
     7a8:	0e 94 5d 03 	call	0x6ba	; 0x6ba <LCD_Write_Command>
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	0e 94 5d 03 	call	0x6ba	; 0x6ba <LCD_Write_Command>
     7b2:	86 e0       	ldi	r24, 0x06	; 6
     7b4:	0e 94 5d 03 	call	0x6ba	; 0x6ba <LCD_Write_Command>
     7b8:	08 95       	ret

000007ba <LCD_disable>:

void LCD_disable(){
	
		DIO_SetPinDirection(LCD_CTRL_PORT, LCD_RS, 0);
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	0e 94 5d 04 	call	0x8ba	; 0x8ba <DIO_SetPinDirection>
		DIO_SetPinDirection(LCD_CTRL_PORT, LCD_RW, 0);
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	62 e0       	ldi	r22, 0x02	; 2
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	0e 94 5d 04 	call	0x8ba	; 0x8ba <DIO_SetPinDirection>
		DIO_SetPinDirection(LCD_CTRL_PORT, LCD_EN, 0);
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	63 e0       	ldi	r22, 0x03	; 3
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <DIO_SetPinDirection>
     7d8:	08 95       	ret

000007da <LED0_Initialization>:
#include "LED0.h"

void LED0_Initialization(void)
{
	//SET_BIT(LED0_DDR, LED0);
	DIO_SetPinDirection(LED0_PORT, LED0, LED0_OUT);
     7da:	41 e0       	ldi	r20, 0x01	; 1
     7dc:	62 e0       	ldi	r22, 0x02	; 2
     7de:	82 e0       	ldi	r24, 0x02	; 2
     7e0:	0e 94 5d 04 	call	0x8ba	; 0x8ba <DIO_SetPinDirection>
     7e4:	08 95       	ret

000007e6 <LED0_ON>:
}
void LED0_ON(void)
{
	//SET_BIT(LED0_PORT, LED0);
	DIO_SetPinValue(LED0_PORT, LED0, LED0_ONN);
     7e6:	41 e0       	ldi	r20, 0x01	; 1
     7e8:	62 e0       	ldi	r22, 0x02	; 2
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	0e 94 ce 04 	call	0x99c	; 0x99c <DIO_SetPinValue>
     7f0:	08 95       	ret

000007f2 <LED0_OFF>:
}
void LED0_OFF(void)
{
	//CLR_BIT(LED0_PORT, LED0);
	DIO_SetPinValue(LED0_PORT, LED0, LED0_OFFF);
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	62 e0       	ldi	r22, 0x02	; 2
     7f6:	82 e0       	ldi	r24, 0x02	; 2
     7f8:	0e 94 ce 04 	call	0x99c	; 0x99c <DIO_SetPinValue>
     7fc:	08 95       	ret

000007fe <LED1_Initialization>:
 */ 
#include "LED1.h"

void LED1_Initialization(void)
{
	SET_BIT(LED1_DDR, LED1);
     7fe:	84 b3       	in	r24, 0x14	; 20
     800:	80 68       	ori	r24, 0x80	; 128
     802:	84 bb       	out	0x14, r24	; 20
     804:	08 95       	ret

00000806 <LED1_ON>:
}
void LED1_ON(void)
{
	SET_BIT(LED1_PORT, LED1);
     806:	85 b3       	in	r24, 0x15	; 21
     808:	80 68       	ori	r24, 0x80	; 128
     80a:	85 bb       	out	0x15, r24	; 21
     80c:	08 95       	ret

0000080e <LED1_OFF>:
}
void LED1_OFF(void)
{
	CLR_BIT(LED1_PORT, LED1);
     80e:	85 b3       	in	r24, 0x15	; 21
     810:	8f 77       	andi	r24, 0x7F	; 127
     812:	85 bb       	out	0x15, r24	; 21
     814:	08 95       	ret

00000816 <LED2_Initialization>:
 */ 
#include "LED2.h"

void LED2_Initialization(void)
{
	SET_BIT(LED2_DDR, LED2);
     816:	81 b3       	in	r24, 0x11	; 17
     818:	88 60       	ori	r24, 0x08	; 8
     81a:	81 bb       	out	0x11, r24	; 17
     81c:	08 95       	ret

0000081e <LED2_ON>:
}
void LED2_ON(void)
{
	SET_BIT(LED2_PORT, LED2);
     81e:	82 b3       	in	r24, 0x12	; 18
     820:	88 60       	ori	r24, 0x08	; 8
     822:	82 bb       	out	0x12, r24	; 18
     824:	08 95       	ret

00000826 <LED2_OFF>:
}
void LED2_OFF(void)
{
	CLR_BIT(LED2_PORT, LED2);
     826:	82 b3       	in	r24, 0x12	; 18
     828:	87 7f       	andi	r24, 0xF7	; 247
     82a:	82 bb       	out	0x12, r24	; 18
     82c:	08 95       	ret

0000082e <Relay_Initialization>:
#include "Relay.h"


void Relay_Initialization(void)
{
	DIO_SetPinDirection(RELAY_PORT, RELAY_PIN, RELAY_OUT);
     82e:	41 e0       	ldi	r20, 0x01	; 1
     830:	62 e0       	ldi	r22, 0x02	; 2
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	0e 94 5d 04 	call	0x8ba	; 0x8ba <DIO_SetPinDirection>
     838:	08 95       	ret

0000083a <Relay_ON>:
}
void Relay_ON(void)
{
	DIO_SetPinValue(RELAY_PORT, RELAY_PIN, RELAY_HIGH);
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	62 e0       	ldi	r22, 0x02	; 2
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	0e 94 ce 04 	call	0x99c	; 0x99c <DIO_SetPinValue>
     844:	08 95       	ret

00000846 <Relay_OFF>:
}
void Relay_OFF(void)
{
	DIO_SetPinValue(RELAY_PORT, RELAY_PIN, RELAY_LOW);
     846:	40 e0       	ldi	r20, 0x00	; 0
     848:	62 e0       	ldi	r22, 0x02	; 2
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 ce 04 	call	0x99c	; 0x99c <DIO_SetPinValue>
     850:	08 95       	ret

00000852 <ADC_Initialization>:
	/*
	1- Select voltage refernce
	2- Select left or right adjust
	3- Select chanel (1)
	*/
	switch(chanel)
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	88 30       	cpi	r24, 0x08	; 8
     856:	91 05       	cpc	r25, r1
     858:	20 f5       	brcc	.+72     	; 0x8a2 <__stack+0x43>
     85a:	fc 01       	movw	r30, r24
     85c:	e6 5d       	subi	r30, 0xD6	; 214
     85e:	ff 4f       	sbci	r31, 0xFF	; 255
     860:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__tablejump2__>
	{
		case ADC0:
		ADMUX |= 0b01000000;//0x40
     864:	87 b1       	in	r24, 0x07	; 7
     866:	80 64       	ori	r24, 0x40	; 64
     868:	87 b9       	out	0x07, r24	; 7
		break;
     86a:	1b c0       	rjmp	.+54     	; 0x8a2 <__stack+0x43>
		case ADC1:
		ADMUX |= 0b01000001;//0x41
     86c:	87 b1       	in	r24, 0x07	; 7
     86e:	81 64       	ori	r24, 0x41	; 65
     870:	87 b9       	out	0x07, r24	; 7
		break;
     872:	17 c0       	rjmp	.+46     	; 0x8a2 <__stack+0x43>
		case ADC2:
		ADMUX |= 0b01000010;//0x42
     874:	87 b1       	in	r24, 0x07	; 7
     876:	82 64       	ori	r24, 0x42	; 66
     878:	87 b9       	out	0x07, r24	; 7
		break;
     87a:	13 c0       	rjmp	.+38     	; 0x8a2 <__stack+0x43>
		case ADC3:
		ADMUX |= 0b01000011;//0x43
     87c:	87 b1       	in	r24, 0x07	; 7
     87e:	83 64       	ori	r24, 0x43	; 67
     880:	87 b9       	out	0x07, r24	; 7
		break;
     882:	0f c0       	rjmp	.+30     	; 0x8a2 <__stack+0x43>
		case ADC4:
		ADMUX |= 0b01000100;//0x44
     884:	87 b1       	in	r24, 0x07	; 7
     886:	84 64       	ori	r24, 0x44	; 68
     888:	87 b9       	out	0x07, r24	; 7
		break;
     88a:	0b c0       	rjmp	.+22     	; 0x8a2 <__stack+0x43>
		case ADC5:
		ADMUX |= 0b01000101;//0x45
     88c:	87 b1       	in	r24, 0x07	; 7
     88e:	85 64       	ori	r24, 0x45	; 69
     890:	87 b9       	out	0x07, r24	; 7
		break;
     892:	07 c0       	rjmp	.+14     	; 0x8a2 <__stack+0x43>
		case ADC6:
		ADMUX |= 0b01000110;//0x46
     894:	87 b1       	in	r24, 0x07	; 7
     896:	86 64       	ori	r24, 0x46	; 70
     898:	87 b9       	out	0x07, r24	; 7
		break;
     89a:	03 c0       	rjmp	.+6      	; 0x8a2 <__stack+0x43>
		case ADC7:
		ADMUX |= 0b01000111;//0x47
     89c:	87 b1       	in	r24, 0x07	; 7
     89e:	87 64       	ori	r24, 0x47	; 71
     8a0:	87 b9       	out	0x07, r24	; 7
	/*
	1- Auto trigger mode
	2- Select prescaler
	3- enable ADC
	*/
	ADCSRA |= 0b10100111;//0xA7
     8a2:	86 b1       	in	r24, 0x06	; 6
     8a4:	87 6a       	ori	r24, 0xA7	; 167
     8a6:	86 b9       	out	0x06, r24	; 6
     8a8:	08 95       	ret

000008aa <ADC_Read>:
}

uint16_t ADC_Read(void)
{
	uint16_t data = 0;
	SET_BIT(ADCSRA, ADSC);
     8aa:	86 b1       	in	r24, 0x06	; 6
     8ac:	80 64       	ori	r24, 0x40	; 64
     8ae:	86 b9       	out	0x06, r24	; 6
	while(GET_BIT(ADCSRA, ADIF) != 1);//wait until conversion finished
     8b0:	34 9b       	sbis	0x06, 4	; 6
     8b2:	fe cf       	rjmp	.-4      	; 0x8b0 <ADC_Read+0x6>
	data = ADC_DATA;
     8b4:	84 b1       	in	r24, 0x04	; 4
     8b6:	95 b1       	in	r25, 0x05	; 5
	return data;
     8b8:	08 95       	ret

000008ba <DIO_SetPinDirection>:
		break;
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
		break;
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
     8ba:	44 23       	and	r20, r20
     8bc:	19 f0       	breq	.+6      	; 0x8c4 <DIO_SetPinDirection+0xa>
     8be:	41 30       	cpi	r20, 0x01	; 1
     8c0:	c9 f1       	breq	.+114    	; 0x934 <DIO_SetPinDirection+0x7a>
     8c2:	08 95       	ret
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	91 f0       	breq	.+36     	; 0x8ec <DIO_SetPinDirection+0x32>
     8c8:	28 f0       	brcs	.+10     	; 0x8d4 <DIO_SetPinDirection+0x1a>
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	d9 f0       	breq	.+54     	; 0x904 <DIO_SetPinDirection+0x4a>
     8ce:	83 30       	cpi	r24, 0x03	; 3
     8d0:	29 f1       	breq	.+74     	; 0x91c <DIO_SetPinDirection+0x62>
     8d2:	08 95       	ret
     8d4:	2a b3       	in	r18, 0x1a	; 26
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <DIO_SetPinDirection+0x26>
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	6a 95       	dec	r22
     8e2:	e2 f7       	brpl	.-8      	; 0x8dc <DIO_SetPinDirection+0x22>
     8e4:	80 95       	com	r24
     8e6:	82 23       	and	r24, r18
     8e8:	8a bb       	out	0x1a, r24	; 26
     8ea:	08 95       	ret
     8ec:	27 b3       	in	r18, 0x17	; 23
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <DIO_SetPinDirection+0x3e>
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	6a 95       	dec	r22
     8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <DIO_SetPinDirection+0x3a>
     8fc:	80 95       	com	r24
     8fe:	82 23       	and	r24, r18
     900:	87 bb       	out	0x17, r24	; 23
     902:	08 95       	ret
     904:	24 b3       	in	r18, 0x14	; 20
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	02 c0       	rjmp	.+4      	; 0x910 <DIO_SetPinDirection+0x56>
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	6a 95       	dec	r22
     912:	e2 f7       	brpl	.-8      	; 0x90c <DIO_SetPinDirection+0x52>
     914:	80 95       	com	r24
     916:	82 23       	and	r24, r18
     918:	84 bb       	out	0x14, r24	; 20
     91a:	08 95       	ret
     91c:	21 b3       	in	r18, 0x11	; 17
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	02 c0       	rjmp	.+4      	; 0x928 <DIO_SetPinDirection+0x6e>
     924:	88 0f       	add	r24, r24
     926:	99 1f       	adc	r25, r25
     928:	6a 95       	dec	r22
     92a:	e2 f7       	brpl	.-8      	; 0x924 <DIO_SetPinDirection+0x6a>
     92c:	80 95       	com	r24
     92e:	82 23       	and	r24, r18
     930:	81 bb       	out	0x11, r24	; 17
     932:	08 95       	ret
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	89 f0       	breq	.+34     	; 0x95a <DIO_SetPinDirection+0xa0>
     938:	28 f0       	brcs	.+10     	; 0x944 <DIO_SetPinDirection+0x8a>
     93a:	82 30       	cpi	r24, 0x02	; 2
     93c:	c9 f0       	breq	.+50     	; 0x970 <DIO_SetPinDirection+0xb6>
     93e:	83 30       	cpi	r24, 0x03	; 3
     940:	11 f1       	breq	.+68     	; 0x986 <DIO_SetPinDirection+0xcc>
     942:	08 95       	ret
     944:	2a b3       	in	r18, 0x1a	; 26
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	02 c0       	rjmp	.+4      	; 0x950 <DIO_SetPinDirection+0x96>
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	6a 95       	dec	r22
     952:	e2 f7       	brpl	.-8      	; 0x94c <DIO_SetPinDirection+0x92>
     954:	82 2b       	or	r24, r18
     956:	8a bb       	out	0x1a, r24	; 26
     958:	08 95       	ret
     95a:	27 b3       	in	r18, 0x17	; 23
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	02 c0       	rjmp	.+4      	; 0x966 <DIO_SetPinDirection+0xac>
     962:	88 0f       	add	r24, r24
     964:	99 1f       	adc	r25, r25
     966:	6a 95       	dec	r22
     968:	e2 f7       	brpl	.-8      	; 0x962 <DIO_SetPinDirection+0xa8>
     96a:	82 2b       	or	r24, r18
     96c:	87 bb       	out	0x17, r24	; 23
     96e:	08 95       	ret
     970:	24 b3       	in	r18, 0x14	; 20
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	02 c0       	rjmp	.+4      	; 0x97c <DIO_SetPinDirection+0xc2>
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	6a 95       	dec	r22
     97e:	e2 f7       	brpl	.-8      	; 0x978 <DIO_SetPinDirection+0xbe>
     980:	82 2b       	or	r24, r18
     982:	84 bb       	out	0x14, r24	; 20
     984:	08 95       	ret
     986:	21 b3       	in	r18, 0x11	; 17
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	02 c0       	rjmp	.+4      	; 0x992 <DIO_SetPinDirection+0xd8>
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	6a 95       	dec	r22
     994:	e2 f7       	brpl	.-8      	; 0x98e <DIO_SetPinDirection+0xd4>
     996:	82 2b       	or	r24, r18
     998:	81 bb       	out	0x11, r24	; 17
     99a:	08 95       	ret

0000099c <DIO_SetPinValue>:
     99c:	44 23       	and	r20, r20
     99e:	19 f0       	breq	.+6      	; 0x9a6 <DIO_SetPinValue+0xa>
     9a0:	41 30       	cpi	r20, 0x01	; 1
     9a2:	c9 f1       	breq	.+114    	; 0xa16 <DIO_SetPinValue+0x7a>
     9a4:	08 95       	ret
     9a6:	81 30       	cpi	r24, 0x01	; 1
     9a8:	91 f0       	breq	.+36     	; 0x9ce <DIO_SetPinValue+0x32>
     9aa:	28 f0       	brcs	.+10     	; 0x9b6 <DIO_SetPinValue+0x1a>
     9ac:	82 30       	cpi	r24, 0x02	; 2
     9ae:	d9 f0       	breq	.+54     	; 0x9e6 <DIO_SetPinValue+0x4a>
     9b0:	83 30       	cpi	r24, 0x03	; 3
     9b2:	29 f1       	breq	.+74     	; 0x9fe <DIO_SetPinValue+0x62>
     9b4:	08 95       	ret
     9b6:	2b b3       	in	r18, 0x1b	; 27
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <DIO_SetPinValue+0x26>
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	6a 95       	dec	r22
     9c4:	e2 f7       	brpl	.-8      	; 0x9be <DIO_SetPinValue+0x22>
     9c6:	80 95       	com	r24
     9c8:	82 23       	and	r24, r18
     9ca:	8b bb       	out	0x1b, r24	; 27
     9cc:	08 95       	ret
     9ce:	28 b3       	in	r18, 0x18	; 24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <DIO_SetPinValue+0x3e>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	6a 95       	dec	r22
     9dc:	e2 f7       	brpl	.-8      	; 0x9d6 <DIO_SetPinValue+0x3a>
     9de:	80 95       	com	r24
     9e0:	82 23       	and	r24, r18
     9e2:	88 bb       	out	0x18, r24	; 24
     9e4:	08 95       	ret
     9e6:	25 b3       	in	r18, 0x15	; 21
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <DIO_SetPinValue+0x56>
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	6a 95       	dec	r22
     9f4:	e2 f7       	brpl	.-8      	; 0x9ee <DIO_SetPinValue+0x52>
     9f6:	80 95       	com	r24
     9f8:	82 23       	and	r24, r18
     9fa:	85 bb       	out	0x15, r24	; 21
     9fc:	08 95       	ret
     9fe:	22 b3       	in	r18, 0x12	; 18
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <DIO_SetPinValue+0x6e>
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	6a 95       	dec	r22
     a0c:	e2 f7       	brpl	.-8      	; 0xa06 <DIO_SetPinValue+0x6a>
     a0e:	80 95       	com	r24
     a10:	82 23       	and	r24, r18
     a12:	82 bb       	out	0x12, r24	; 18
     a14:	08 95       	ret
     a16:	81 30       	cpi	r24, 0x01	; 1
     a18:	89 f0       	breq	.+34     	; 0xa3c <DIO_SetPinValue+0xa0>
     a1a:	28 f0       	brcs	.+10     	; 0xa26 <DIO_SetPinValue+0x8a>
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	c9 f0       	breq	.+50     	; 0xa52 <DIO_SetPinValue+0xb6>
     a20:	83 30       	cpi	r24, 0x03	; 3
     a22:	11 f1       	breq	.+68     	; 0xa68 <DIO_SetPinValue+0xcc>
     a24:	08 95       	ret
     a26:	2b b3       	in	r18, 0x1b	; 27
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <DIO_SetPinValue+0x96>
     a2e:	88 0f       	add	r24, r24
     a30:	99 1f       	adc	r25, r25
     a32:	6a 95       	dec	r22
     a34:	e2 f7       	brpl	.-8      	; 0xa2e <DIO_SetPinValue+0x92>
     a36:	82 2b       	or	r24, r18
     a38:	8b bb       	out	0x1b, r24	; 27
     a3a:	08 95       	ret
     a3c:	28 b3       	in	r18, 0x18	; 24
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <DIO_SetPinValue+0xac>
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	6a 95       	dec	r22
     a4a:	e2 f7       	brpl	.-8      	; 0xa44 <DIO_SetPinValue+0xa8>
     a4c:	82 2b       	or	r24, r18
     a4e:	88 bb       	out	0x18, r24	; 24
     a50:	08 95       	ret
     a52:	25 b3       	in	r18, 0x15	; 21
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <DIO_SetPinValue+0xc2>
     a5a:	88 0f       	add	r24, r24
     a5c:	99 1f       	adc	r25, r25
     a5e:	6a 95       	dec	r22
     a60:	e2 f7       	brpl	.-8      	; 0xa5a <DIO_SetPinValue+0xbe>
     a62:	82 2b       	or	r24, r18
     a64:	85 bb       	out	0x15, r24	; 21
     a66:	08 95       	ret
     a68:	22 b3       	in	r18, 0x12	; 18
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <DIO_SetPinValue+0xd8>
     a70:	88 0f       	add	r24, r24
     a72:	99 1f       	adc	r25, r25
     a74:	6a 95       	dec	r22
     a76:	e2 f7       	brpl	.-8      	; 0xa70 <DIO_SetPinValue+0xd4>
     a78:	82 2b       	or	r24, r18
     a7a:	82 bb       	out	0x12, r24	; 18
     a7c:	08 95       	ret

00000a7e <DIO_ReadPinValue>:
     a7e:	ef e3       	ldi	r30, 0x3F	; 63
     a80:	fc e9       	ldi	r31, 0x9C	; 156
     a82:	31 97       	sbiw	r30, 0x01	; 1
     a84:	f1 f7       	brne	.-4      	; 0xa82 <DIO_ReadPinValue+0x4>
     a86:	00 c0       	rjmp	.+0      	; 0xa88 <DIO_ReadPinValue+0xa>
     a88:	00 00       	nop
//If pin is defined as input
uint8_t DIO_ReadPinValue (Port port, Pin pin)
{
	uint8_t reading = 0;
	_delay_ms(10);
	switch (port)
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	79 f0       	breq	.+30     	; 0xaac <DIO_ReadPinValue+0x2e>
     a8e:	28 f0       	brcs	.+10     	; 0xa9a <DIO_ReadPinValue+0x1c>
     a90:	82 30       	cpi	r24, 0x02	; 2
     a92:	a9 f0       	breq	.+42     	; 0xabe <DIO_ReadPinValue+0x40>
     a94:	83 30       	cpi	r24, 0x03	; 3
     a96:	e1 f0       	breq	.+56     	; 0xad0 <DIO_ReadPinValue+0x52>
     a98:	24 c0       	rjmp	.+72     	; 0xae2 <DIO_ReadPinValue+0x64>
	{
		case DIO_PORTA:
		reading = GET_BIT(PINA, pin);
     a9a:	89 b3       	in	r24, 0x19	; 25
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <DIO_ReadPinValue+0x26>
     aa0:	95 95       	asr	r25
     aa2:	87 95       	ror	r24
     aa4:	6a 95       	dec	r22
     aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <DIO_ReadPinValue+0x22>
     aa8:	81 70       	andi	r24, 0x01	; 1
		break;
     aaa:	08 95       	ret
		case DIO_PORTB:
		reading = GET_BIT(PINB, pin);
     aac:	86 b3       	in	r24, 0x16	; 22
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <DIO_ReadPinValue+0x38>
     ab2:	95 95       	asr	r25
     ab4:	87 95       	ror	r24
     ab6:	6a 95       	dec	r22
     ab8:	e2 f7       	brpl	.-8      	; 0xab2 <DIO_ReadPinValue+0x34>
     aba:	81 70       	andi	r24, 0x01	; 1
		break;
     abc:	08 95       	ret
		case DIO_PORTC:
		reading = GET_BIT(PINC, pin);
     abe:	83 b3       	in	r24, 0x13	; 19
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <DIO_ReadPinValue+0x4a>
     ac4:	95 95       	asr	r25
     ac6:	87 95       	ror	r24
     ac8:	6a 95       	dec	r22
     aca:	e2 f7       	brpl	.-8      	; 0xac4 <DIO_ReadPinValue+0x46>
     acc:	81 70       	andi	r24, 0x01	; 1
		break;
     ace:	08 95       	ret
		case DIO_PORTD:
		reading = GET_BIT(PIND, pin);
     ad0:	80 b3       	in	r24, 0x10	; 16
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	02 c0       	rjmp	.+4      	; 0xada <DIO_ReadPinValue+0x5c>
     ad6:	95 95       	asr	r25
     ad8:	87 95       	ror	r24
     ada:	6a 95       	dec	r22
     adc:	e2 f7       	brpl	.-8      	; 0xad6 <DIO_ReadPinValue+0x58>
     ade:	81 70       	andi	r24, 0x01	; 1
		break;
     ae0:	08 95       	ret
	}
}
//If pin is defined as input
uint8_t DIO_ReadPinValue (Port port, Pin pin)
{
	uint8_t reading = 0;
     ae2:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTD:
		reading = GET_BIT(PIND, pin);
		break;
	}
	return reading;
}
     ae4:	08 95       	ret

00000ae6 <DIO_SetPinPullUp>:
void DIO_SetPinPullUp (Port port, Pin pin)
{
	switch (port)
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	89 f0       	breq	.+34     	; 0xb0c <DIO_SetPinPullUp+0x26>
     aea:	28 f0       	brcs	.+10     	; 0xaf6 <DIO_SetPinPullUp+0x10>
     aec:	82 30       	cpi	r24, 0x02	; 2
     aee:	c9 f0       	breq	.+50     	; 0xb22 <DIO_SetPinPullUp+0x3c>
     af0:	83 30       	cpi	r24, 0x03	; 3
     af2:	11 f1       	breq	.+68     	; 0xb38 <DIO_SetPinPullUp+0x52>
     af4:	08 95       	ret
	{
		case DIO_PORTA:
		SET_BIT(PORTA, pin);
     af6:	2b b3       	in	r18, 0x1b	; 27
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <DIO_SetPinPullUp+0x1c>
     afe:	88 0f       	add	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	6a 95       	dec	r22
     b04:	e2 f7       	brpl	.-8      	; 0xafe <DIO_SetPinPullUp+0x18>
     b06:	82 2b       	or	r24, r18
     b08:	8b bb       	out	0x1b, r24	; 27
		break;
     b0a:	08 95       	ret
		case DIO_PORTB:
		SET_BIT(PORTB, pin);
     b0c:	28 b3       	in	r18, 0x18	; 24
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <DIO_SetPinPullUp+0x32>
     b14:	88 0f       	add	r24, r24
     b16:	99 1f       	adc	r25, r25
     b18:	6a 95       	dec	r22
     b1a:	e2 f7       	brpl	.-8      	; 0xb14 <DIO_SetPinPullUp+0x2e>
     b1c:	82 2b       	or	r24, r18
     b1e:	88 bb       	out	0x18, r24	; 24
		break;
     b20:	08 95       	ret
		case DIO_PORTC:
		SET_BIT(PORTC, pin);
     b22:	25 b3       	in	r18, 0x15	; 21
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <DIO_SetPinPullUp+0x48>
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	6a 95       	dec	r22
     b30:	e2 f7       	brpl	.-8      	; 0xb2a <DIO_SetPinPullUp+0x44>
     b32:	82 2b       	or	r24, r18
     b34:	85 bb       	out	0x15, r24	; 21
		break;
     b36:	08 95       	ret
		case DIO_PORTD:
		SET_BIT(PORTD, pin);
     b38:	22 b3       	in	r18, 0x12	; 18
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <DIO_SetPinPullUp+0x5e>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	6a 95       	dec	r22
     b46:	e2 f7       	brpl	.-8      	; 0xb40 <DIO_SetPinPullUp+0x5a>
     b48:	82 2b       	or	r24, r18
     b4a:	82 bb       	out	0x12, r24	; 18
     b4c:	08 95       	ret

00000b4e <EEPROM_Write>:
#include "EEPROM.h"

void EEPROM_Write(uint16_t address , uint8_t data)
{
	// Wait for completion of previous write 
	while(EECR & (1<<EEWE));
     b4e:	e1 99       	sbic	0x1c, 1	; 28
     b50:	fe cf       	rjmp	.-4      	; 0xb4e <EEPROM_Write>
	/* Set up address and data registers */
	EEAR = address;
     b52:	9f bb       	out	0x1f, r25	; 31
     b54:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
     b56:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     b58:	8c b3       	in	r24, 0x1c	; 28
     b5a:	84 60       	ori	r24, 0x04	; 4
     b5c:	8c bb       	out	0x1c, r24	; 28
	/* Start EEPROM write by setting EEWE */
	EECR |= (1<<EEWE);
     b5e:	8c b3       	in	r24, 0x1c	; 28
     b60:	82 60       	ori	r24, 0x02	; 2
     b62:	8c bb       	out	0x1c, r24	; 28
     b64:	08 95       	ret

00000b66 <EEPROM_Read>:
}

uint8_t EEPROM_Read(uint16_t adderss)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     b66:	e1 99       	sbic	0x1c, 1	; 28
     b68:	fe cf       	rjmp	.-4      	; 0xb66 <EEPROM_Read>
	/* Set up address register */
	EEAR = adderss;
     b6a:	9f bb       	out	0x1f, r25	; 31
     b6c:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1<<EERE);
     b6e:	8c b3       	in	r24, 0x1c	; 28
     b70:	81 60       	ori	r24, 0x01	; 1
     b72:	8c bb       	out	0x1c, r24	; 28
	/* Return data from data register */
	return EEDR;
     b74:	8d b3       	in	r24, 0x1d	; 29
     b76:	08 95       	ret

00000b78 <Interrupt_Initialization>:
*/

void Interrupt_Initialization(Interrupt_Signal_Pin pin)
{
	//Define Direction as input
	CLR_BIT(DDRD, PD2);
     b78:	91 b3       	in	r25, 0x11	; 17
     b7a:	9b 7f       	andi	r25, 0xFB	; 251
     b7c:	91 bb       	out	0x11, r25	; 17
	CLR_BIT(DDRD, PD3);
     b7e:	91 b3       	in	r25, 0x11	; 17
     b80:	97 7f       	andi	r25, 0xF7	; 247
     b82:	91 bb       	out	0x11, r25	; 17
	CLR_BIT(DDRD, PB2);
     b84:	91 b3       	in	r25, 0x11	; 17
     b86:	9b 7f       	andi	r25, 0xFB	; 251
     b88:	91 bb       	out	0x11, r25	; 17
	//Enable Global interrupt (Apartment Door)
	//===============================================================
	#if Global_INTERRUPT_STATUS == GLOBAL_EN
	sei();
     b8a:	78 94       	sei
	//CLR_BIT(SREG, 7);
	#else
	#warning This is invalid choice
	#endif
	//==============================================================
	if(pin == INT0_Signal)
     b8c:	81 11       	cpse	r24, r1
     b8e:	0a c0       	rjmp	.+20     	; 0xba4 <Interrupt_Initialization+0x2c>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT0);
     b90:	8b b7       	in	r24, 0x3b	; 59
     b92:	80 64       	ori	r24, 0x40	; 64
     b94:	8b bf       	out	0x3b, r24	; 59
		#elif Interrupt_SENSE == HIGH_SIGNAL
		CLR_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);
		#elif Interrupt_SENSE == Falling_SIGNAL
		SET_BIT(MCUCR, ISC01);CLR_BIT(MCUCR, ISC00);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);
     b96:	85 b7       	in	r24, 0x35	; 53
     b98:	82 60       	ori	r24, 0x02	; 2
     b9a:	85 bf       	out	0x35, r24	; 53
     b9c:	85 b7       	in	r24, 0x35	; 53
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	85 bf       	out	0x35, r24	; 53
     ba2:	08 95       	ret
		#else
		#warning This is invalid
		#endif
	}
	else if(pin == INT1_Signal)
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	51 f4       	brne	.+20     	; 0xbbc <Interrupt_Initialization+0x44>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT1);
     ba8:	8b b7       	in	r24, 0x3b	; 59
     baa:	80 68       	ori	r24, 0x80	; 128
     bac:	8b bf       	out	0x3b, r24	; 59
		#elif Interrupt_SENSE == HIGH_SIGNAL
		CLR_BIT(MCUCR, ISC11);SET_BIT(MCUCR, ISC10);
		#elif Interrupt_SENSE == Falling_SIGNAL
		SET_BIT(MCUCR, ISC11);CLR_BIT(MCUCR, ISC10);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCR, ISC11);SET_BIT(MCUCR, ISC10);
     bae:	85 b7       	in	r24, 0x35	; 53
     bb0:	88 60       	ori	r24, 0x08	; 8
     bb2:	85 bf       	out	0x35, r24	; 53
     bb4:	85 b7       	in	r24, 0x35	; 53
     bb6:	84 60       	ori	r24, 0x04	; 4
     bb8:	85 bf       	out	0x35, r24	; 53
     bba:	08 95       	ret
		#else
		#warning This is invalid
		#endif
	}
	else if(pin == INT2_Signal)
     bbc:	82 30       	cpi	r24, 0x02	; 2
     bbe:	31 f4       	brne	.+12     	; 0xbcc <Interrupt_Initialization+0x54>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT2);
     bc0:	8b b7       	in	r24, 0x3b	; 59
     bc2:	80 62       	ori	r24, 0x20	; 32
     bc4:	8b bf       	out	0x3b, r24	; 59
		#if Interrupt_SENSE == Falling_SIGNAL
		CLR_BIT(MCUCSR, ISC2);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCSR, ISC2);
     bc6:	84 b7       	in	r24, 0x34	; 52
     bc8:	80 64       	ori	r24, 0x40	; 64
     bca:	84 bf       	out	0x34, r24	; 52
     bcc:	08 95       	ret

00000bce <Timer0_Start>:
			while(GET_BIT(TIFR, OCF0) != 1);//Wait until raise flag
			SET_BIT(TIFR, OCF0);//Clear flag
			counter++;//Increment counter
		}
	}
}
     bce:	83 30       	cpi	r24, 0x03	; 3
     bd0:	61 f1       	breq	.+88     	; 0xc2a <Timer0_Start+0x5c>
     bd2:	28 f4       	brcc	.+10     	; 0xbde <Timer0_Start+0x10>
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	49 f0       	breq	.+18     	; 0xbea <Timer0_Start+0x1c>
     bd8:	82 30       	cpi	r24, 0x02	; 2
     bda:	b9 f0       	breq	.+46     	; 0xc0a <Timer0_Start+0x3c>
     bdc:	08 95       	ret
     bde:	84 30       	cpi	r24, 0x04	; 4
     be0:	a1 f1       	breq	.+104    	; 0xc4a <Timer0_Start+0x7c>
     be2:	85 30       	cpi	r24, 0x05	; 5
     be4:	09 f4       	brne	.+2      	; 0xbe8 <Timer0_Start+0x1a>
     be6:	41 c0       	rjmp	.+130    	; 0xc6a <Timer0_Start+0x9c>
     be8:	08 95       	ret
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <_Prescaler+0x1>
     bf2:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <_Prescaler>
     bf6:	83 b7       	in	r24, 0x33	; 51
     bf8:	8b 7f       	andi	r24, 0xFB	; 251
     bfa:	83 bf       	out	0x33, r24	; 51
     bfc:	83 b7       	in	r24, 0x33	; 51
     bfe:	8d 7f       	andi	r24, 0xFD	; 253
     c00:	83 bf       	out	0x33, r24	; 51
     c02:	83 b7       	in	r24, 0x33	; 51
     c04:	81 60       	ori	r24, 0x01	; 1
     c06:	83 bf       	out	0x33, r24	; 51
     c08:	08 95       	ret
     c0a:	88 e0       	ldi	r24, 0x08	; 8
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <_Prescaler+0x1>
     c12:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <_Prescaler>
     c16:	83 b7       	in	r24, 0x33	; 51
     c18:	8b 7f       	andi	r24, 0xFB	; 251
     c1a:	83 bf       	out	0x33, r24	; 51
     c1c:	83 b7       	in	r24, 0x33	; 51
     c1e:	82 60       	ori	r24, 0x02	; 2
     c20:	83 bf       	out	0x33, r24	; 51
     c22:	83 b7       	in	r24, 0x33	; 51
     c24:	8e 7f       	andi	r24, 0xFE	; 254
     c26:	83 bf       	out	0x33, r24	; 51
     c28:	08 95       	ret
     c2a:	80 e4       	ldi	r24, 0x40	; 64
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <_Prescaler+0x1>
     c32:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <_Prescaler>
     c36:	83 b7       	in	r24, 0x33	; 51
     c38:	8b 7f       	andi	r24, 0xFB	; 251
     c3a:	83 bf       	out	0x33, r24	; 51
     c3c:	83 b7       	in	r24, 0x33	; 51
     c3e:	82 60       	ori	r24, 0x02	; 2
     c40:	83 bf       	out	0x33, r24	; 51
     c42:	83 b7       	in	r24, 0x33	; 51
     c44:	81 60       	ori	r24, 0x01	; 1
     c46:	83 bf       	out	0x33, r24	; 51
     c48:	08 95       	ret
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <_Prescaler+0x1>
     c52:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <_Prescaler>
     c56:	83 b7       	in	r24, 0x33	; 51
     c58:	84 60       	ori	r24, 0x04	; 4
     c5a:	83 bf       	out	0x33, r24	; 51
     c5c:	83 b7       	in	r24, 0x33	; 51
     c5e:	8d 7f       	andi	r24, 0xFD	; 253
     c60:	83 bf       	out	0x33, r24	; 51
     c62:	83 b7       	in	r24, 0x33	; 51
     c64:	8e 7f       	andi	r24, 0xFE	; 254
     c66:	83 bf       	out	0x33, r24	; 51
     c68:	08 95       	ret
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	94 e0       	ldi	r25, 0x04	; 4
     c6e:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <_Prescaler+0x1>
     c72:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <_Prescaler>
     c76:	83 b7       	in	r24, 0x33	; 51
     c78:	84 60       	ori	r24, 0x04	; 4
     c7a:	83 bf       	out	0x33, r24	; 51
     c7c:	83 b7       	in	r24, 0x33	; 51
     c7e:	8d 7f       	andi	r24, 0xFD	; 253
     c80:	83 bf       	out	0x33, r24	; 51
     c82:	83 b7       	in	r24, 0x33	; 51
     c84:	81 60       	ori	r24, 0x01	; 1
     c86:	83 bf       	out	0x33, r24	; 51
     c88:	08 95       	ret

00000c8a <Timer0_Stop>:
     c8a:	83 b7       	in	r24, 0x33	; 51
     c8c:	8b 7f       	andi	r24, 0xFB	; 251
     c8e:	83 bf       	out	0x33, r24	; 51
     c90:	83 b7       	in	r24, 0x33	; 51
     c92:	8d 7f       	andi	r24, 0xFD	; 253
     c94:	83 bf       	out	0x33, r24	; 51
     c96:	83 b7       	in	r24, 0x33	; 51
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	83 bf       	out	0x33, r24	; 51
     c9c:	08 95       	ret

00000c9e <Timer0_WithInterrupt_Initialization>:
uint32_t Number_CTC = 0;
uint32_t Init_Value = 0;

void Timer0_WithInterrupt_Initialization(Timer0_Mode mode, Timer0_Pin_Mode pin)
{
	cli();//Close global interrupt
     c9e:	f8 94       	cli
	switch(mode)//Chose Mode
     ca0:	88 23       	and	r24, r24
     ca2:	19 f0       	breq	.+6      	; 0xcaa <Timer0_WithInterrupt_Initialization+0xc>
     ca4:	82 30       	cpi	r24, 0x02	; 2
     ca6:	59 f0       	breq	.+22     	; 0xcbe <Timer0_WithInterrupt_Initialization+0x20>
     ca8:	13 c0       	rjmp	.+38     	; 0xcd0 <Timer0_WithInterrupt_Initialization+0x32>
	{
		case Normal_Mode:
		CLR_BIT(TCCR0, WGM01);CLR_BIT(TCCR0, WGM00);
     caa:	83 b7       	in	r24, 0x33	; 51
     cac:	87 7f       	andi	r24, 0xF7	; 247
     cae:	83 bf       	out	0x33, r24	; 51
     cb0:	83 b7       	in	r24, 0x33	; 51
     cb2:	8f 7b       	andi	r24, 0xBF	; 191
     cb4:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TIMSK, TOIE0);//Open OVF interrupt
     cb6:	89 b7       	in	r24, 0x39	; 57
     cb8:	81 60       	ori	r24, 0x01	; 1
     cba:	89 bf       	out	0x39, r24	; 57
		break;
     cbc:	09 c0       	rjmp	.+18     	; 0xcd0 <Timer0_WithInterrupt_Initialization+0x32>
		case CTC_Mode:
		SET_BIT(TCCR0, WGM01);CLR_BIT(TCCR0, WGM00);
     cbe:	83 b7       	in	r24, 0x33	; 51
     cc0:	88 60       	ori	r24, 0x08	; 8
     cc2:	83 bf       	out	0x33, r24	; 51
     cc4:	83 b7       	in	r24, 0x33	; 51
     cc6:	8f 7b       	andi	r24, 0xBF	; 191
     cc8:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TIMSK, OCIE0);//Open CTC Interrupt
     cca:	89 b7       	in	r24, 0x39	; 57
     ccc:	82 60       	ori	r24, 0x02	; 2
     cce:	89 bf       	out	0x39, r24	; 57
		case PWM_PhaseCorrect:
		break;
		case PWM_Fast:
		break;
	}
	switch(pin)//Output pin mode
     cd0:	61 30       	cpi	r22, 0x01	; 1
     cd2:	69 f0       	breq	.+26     	; 0xcee <Timer0_WithInterrupt_Initialization+0x50>
     cd4:	28 f0       	brcs	.+10     	; 0xce0 <Timer0_WithInterrupt_Initialization+0x42>
     cd6:	62 30       	cpi	r22, 0x02	; 2
     cd8:	89 f0       	breq	.+34     	; 0xcfc <Timer0_WithInterrupt_Initialization+0x5e>
     cda:	63 30       	cpi	r22, 0x03	; 3
     cdc:	b1 f0       	breq	.+44     	; 0xd0a <Timer0_WithInterrupt_Initialization+0x6c>
     cde:	1b c0       	rjmp	.+54     	; 0xd16 <Timer0_WithInterrupt_Initialization+0x78>
	{
		case Pin_disconnected:
		CLR_BIT(TCCR0, COM01);CLR_BIT(TCCR0, COM00);
     ce0:	83 b7       	in	r24, 0x33	; 51
     ce2:	8f 7d       	andi	r24, 0xDF	; 223
     ce4:	83 bf       	out	0x33, r24	; 51
     ce6:	83 b7       	in	r24, 0x33	; 51
     ce8:	8f 7e       	andi	r24, 0xEF	; 239
     cea:	83 bf       	out	0x33, r24	; 51
		break;
     cec:	14 c0       	rjmp	.+40     	; 0xd16 <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Toggle:
		CLR_BIT(TCCR0, COM01);SET_BIT(TCCR0, COM00);
     cee:	83 b7       	in	r24, 0x33	; 51
     cf0:	8f 7d       	andi	r24, 0xDF	; 223
     cf2:	83 bf       	out	0x33, r24	; 51
     cf4:	83 b7       	in	r24, 0x33	; 51
     cf6:	80 61       	ori	r24, 0x10	; 16
     cf8:	83 bf       	out	0x33, r24	; 51
		break;
     cfa:	0d c0       	rjmp	.+26     	; 0xd16 <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Clear:
		SET_BIT(TCCR0, COM01);CLR_BIT(TCCR0, COM00);
     cfc:	83 b7       	in	r24, 0x33	; 51
     cfe:	80 62       	ori	r24, 0x20	; 32
     d00:	83 bf       	out	0x33, r24	; 51
     d02:	83 b7       	in	r24, 0x33	; 51
     d04:	8f 7e       	andi	r24, 0xEF	; 239
     d06:	83 bf       	out	0x33, r24	; 51
		break;
     d08:	06 c0       	rjmp	.+12     	; 0xd16 <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Set:
		SET_BIT(TCCR0, COM01);SET_BIT(TCCR0, COM00);
     d0a:	83 b7       	in	r24, 0x33	; 51
     d0c:	80 62       	ori	r24, 0x20	; 32
     d0e:	83 bf       	out	0x33, r24	; 51
     d10:	83 b7       	in	r24, 0x33	; 51
     d12:	80 61       	ori	r24, 0x10	; 16
     d14:	83 bf       	out	0x33, r24	; 51
		break;
	}
	sei();//Enable global interrupt
     d16:	78 94       	sei
     d18:	08 95       	ret

00000d1a <Timer0_WithInterrupt_SetDelay>:
}
void Timer0_WithInterrupt_SetDelay(Timer0_Mode mode, uint32_t delay, uint8_t top)
{
     d1a:	0f 93       	push	r16
	if(mode == Normal_Mode)
     d1c:	81 11       	cpse	r24, r1
     d1e:	37 c0       	rjmp	.+110    	; 0xd8e <Timer0_WithInterrupt_SetDelay+0x74>
	{
		uint8_t Tick = ( 1 * _Prescaler) / Frequency;
     d20:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <_Prescaler>
     d24:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <_Prescaler+0x1>
     d28:	f9 01       	movw	r30, r18
     d2a:	f2 95       	swap	r31
     d2c:	e2 95       	swap	r30
     d2e:	ef 70       	andi	r30, 0x0F	; 15
     d30:	ef 27       	eor	r30, r31
     d32:	ff 70       	andi	r31, 0x0F	; 15
     d34:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     d36:	a8 ee       	ldi	r26, 0xE8	; 232
     d38:	b3 e0       	ldi	r27, 0x03	; 3
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__muluhisi3>
     d42:	2e 2f       	mov	r18, r30
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivmodsi4>
		Number_OVF = count / Bits;
     d4e:	bb 27       	eor	r27, r27
     d50:	a5 2f       	mov	r26, r21
     d52:	94 2f       	mov	r25, r20
     d54:	83 2f       	mov	r24, r19
		Number_OVF ++;
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	a1 1d       	adc	r26, r1
     d5a:	b1 1d       	adc	r27, r1
     d5c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <Number_OVF>
     d60:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <Number_OVF+0x1>
     d64:	a0 93 93 00 	sts	0x0093, r26	; 0x800093 <Number_OVF+0x2>
     d68:	b0 93 94 00 	sts	0x0094, r27	; 0x800094 <Number_OVF+0x3>
		Init_Value = Bits - (count % Bits);
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	a0 e0       	ldi	r26, 0x00	; 0
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	82 1b       	sub	r24, r18
     d76:	91 09       	sbc	r25, r1
     d78:	a1 09       	sbc	r26, r1
     d7a:	b1 09       	sbc	r27, r1
     d7c:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <Init_Value>
     d80:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <Init_Value+0x1>
     d84:	a0 93 8b 00 	sts	0x008B, r26	; 0x80008b <Init_Value+0x2>
     d88:	b0 93 8c 00 	sts	0x008C, r27	; 0x80008c <Init_Value+0x3>
		return;
     d8c:	30 c0       	rjmp	.+96     	; 0xdee <Timer0_WithInterrupt_SetDelay+0xd4>
	}
	else if(mode == CTC_Mode)
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	71 f5       	brne	.+92     	; 0xdee <Timer0_WithInterrupt_SetDelay+0xd4>
	{
		OCR0 = top;
     d92:	2c bf       	out	0x3c, r18	; 60
		uint8_t Tick = ( 1 * _Prescaler) / Frequency;
     d94:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <_Prescaler>
     d98:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <_Prescaler+0x1>
     d9c:	f9 01       	movw	r30, r18
     d9e:	f2 95       	swap	r31
     da0:	e2 95       	swap	r30
     da2:	ef 70       	andi	r30, 0x0F	; 15
     da4:	ef 27       	eor	r30, r31
     da6:	ff 70       	andi	r31, 0x0F	; 15
     da8:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     daa:	a8 ee       	ldi	r26, 0xE8	; 232
     dac:	b3 e0       	ldi	r27, 0x03	; 3
     dae:	9a 01       	movw	r18, r20
     db0:	ab 01       	movw	r20, r22
     db2:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__muluhisi3>
     db6:	2e 2f       	mov	r18, r30
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivmodsi4>
     dc2:	ca 01       	movw	r24, r20
     dc4:	b9 01       	movw	r22, r18
		Number_CTC = count / OCR0;
     dc6:	0c b7       	in	r16, 0x3c	; 60
     dc8:	20 2f       	mov	r18, r16
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	50 e0       	ldi	r21, 0x00	; 0
     dd0:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivmodsi4>
		Number_CTC ++;
     dd4:	da 01       	movw	r26, r20
     dd6:	c9 01       	movw	r24, r18
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	a1 1d       	adc	r26, r1
     ddc:	b1 1d       	adc	r27, r1
     dde:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <Number_CTC>
     de2:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <Number_CTC+0x1>
     de6:	a0 93 8f 00 	sts	0x008F, r26	; 0x80008f <Number_CTC+0x2>
     dea:	b0 93 90 00 	sts	0x0090, r27	; 0x800090 <Number_CTC+0x3>
		return;
	}
}
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <Timer2_Start>:

uint16 _Prescaler_ = 0;

void Timer2_Start(Timer2_Prescaler prescaler)
{
	switch(prescaler)
     df2:	83 30       	cpi	r24, 0x03	; 3
     df4:	61 f1       	breq	.+88     	; 0xe4e <Timer2_Start+0x5c>
     df6:	28 f4       	brcc	.+10     	; 0xe02 <Timer2_Start+0x10>
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	49 f0       	breq	.+18     	; 0xe0e <Timer2_Start+0x1c>
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	b9 f0       	breq	.+46     	; 0xe2e <Timer2_Start+0x3c>
     e00:	08 95       	ret
     e02:	84 30       	cpi	r24, 0x04	; 4
     e04:	a1 f1       	breq	.+104    	; 0xe6e <Timer2_Start+0x7c>
     e06:	85 30       	cpi	r24, 0x05	; 5
     e08:	09 f4       	brne	.+2      	; 0xe0c <Timer2_Start+0x1a>
     e0a:	41 c0       	rjmp	.+130    	; 0xe8e <Timer2_Start+0x9c>
     e0c:	08 95       	ret
	{
		case PreS_0_:
		break;
		case PreS_1_:
		_Prescaler_ = 1;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <_Prescaler_+0x1>
     e16:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <_Prescaler_>
		CLR_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);SET_BIT(TCCR2, CS20);
     e1a:	85 b5       	in	r24, 0x25	; 37
     e1c:	8b 7f       	andi	r24, 0xFB	; 251
     e1e:	85 bd       	out	0x25, r24	; 37
     e20:	85 b5       	in	r24, 0x25	; 37
     e22:	8d 7f       	andi	r24, 0xFD	; 253
     e24:	85 bd       	out	0x25, r24	; 37
     e26:	85 b5       	in	r24, 0x25	; 37
     e28:	81 60       	ori	r24, 0x01	; 1
     e2a:	85 bd       	out	0x25, r24	; 37
		break;
     e2c:	08 95       	ret
		case PreS_8_:
		_Prescaler_ = 8;
     e2e:	88 e0       	ldi	r24, 0x08	; 8
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <_Prescaler_+0x1>
     e36:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <_Prescaler_>
		CLR_BIT(TCCR2, CS22);SET_BIT(TCCR2, CS21);CLR_BIT(TCCR2, CS20);
     e3a:	85 b5       	in	r24, 0x25	; 37
     e3c:	8b 7f       	andi	r24, 0xFB	; 251
     e3e:	85 bd       	out	0x25, r24	; 37
     e40:	85 b5       	in	r24, 0x25	; 37
     e42:	82 60       	ori	r24, 0x02	; 2
     e44:	85 bd       	out	0x25, r24	; 37
     e46:	85 b5       	in	r24, 0x25	; 37
     e48:	8e 7f       	andi	r24, 0xFE	; 254
     e4a:	85 bd       	out	0x25, r24	; 37
		break;
     e4c:	08 95       	ret
		case PreS_64_:
		_Prescaler_ = 64;
     e4e:	80 e4       	ldi	r24, 0x40	; 64
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <_Prescaler_+0x1>
     e56:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <_Prescaler_>
		CLR_BIT(TCCR2, CS22);SET_BIT(TCCR2, CS21);SET_BIT(TCCR2, CS20);
     e5a:	85 b5       	in	r24, 0x25	; 37
     e5c:	8b 7f       	andi	r24, 0xFB	; 251
     e5e:	85 bd       	out	0x25, r24	; 37
     e60:	85 b5       	in	r24, 0x25	; 37
     e62:	82 60       	ori	r24, 0x02	; 2
     e64:	85 bd       	out	0x25, r24	; 37
     e66:	85 b5       	in	r24, 0x25	; 37
     e68:	81 60       	ori	r24, 0x01	; 1
     e6a:	85 bd       	out	0x25, r24	; 37
		break;
     e6c:	08 95       	ret
		case PreS_256_:
		_Prescaler_ = 256;
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	91 e0       	ldi	r25, 0x01	; 1
     e72:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <_Prescaler_+0x1>
     e76:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <_Prescaler_>
		SET_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);CLR_BIT(TCCR2, CS20);
     e7a:	85 b5       	in	r24, 0x25	; 37
     e7c:	84 60       	ori	r24, 0x04	; 4
     e7e:	85 bd       	out	0x25, r24	; 37
     e80:	85 b5       	in	r24, 0x25	; 37
     e82:	8d 7f       	andi	r24, 0xFD	; 253
     e84:	85 bd       	out	0x25, r24	; 37
     e86:	85 b5       	in	r24, 0x25	; 37
     e88:	8e 7f       	andi	r24, 0xFE	; 254
     e8a:	85 bd       	out	0x25, r24	; 37
		break;
     e8c:	08 95       	ret
		case PreS_1024_:
		_Prescaler_ = 1024;
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	94 e0       	ldi	r25, 0x04	; 4
     e92:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <_Prescaler_+0x1>
     e96:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <_Prescaler_>
		SET_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);SET_BIT(TCCR2, CS20);
     e9a:	85 b5       	in	r24, 0x25	; 37
     e9c:	84 60       	ori	r24, 0x04	; 4
     e9e:	85 bd       	out	0x25, r24	; 37
     ea0:	85 b5       	in	r24, 0x25	; 37
     ea2:	8d 7f       	andi	r24, 0xFD	; 253
     ea4:	85 bd       	out	0x25, r24	; 37
     ea6:	85 b5       	in	r24, 0x25	; 37
     ea8:	81 60       	ori	r24, 0x01	; 1
     eaa:	85 bd       	out	0x25, r24	; 37
     eac:	08 95       	ret

00000eae <Timer2_Stop>:
		
	}
}
void Timer2_Stop(void)
{
	CLR_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);CLR_BIT(TCCR2, CS20);
     eae:	85 b5       	in	r24, 0x25	; 37
     eb0:	8b 7f       	andi	r24, 0xFB	; 251
     eb2:	85 bd       	out	0x25, r24	; 37
     eb4:	85 b5       	in	r24, 0x25	; 37
     eb6:	8d 7f       	andi	r24, 0xFD	; 253
     eb8:	85 bd       	out	0x25, r24	; 37
     eba:	85 b5       	in	r24, 0x25	; 37
     ebc:	8e 7f       	andi	r24, 0xFE	; 254
     ebe:	85 bd       	out	0x25, r24	; 37
     ec0:	08 95       	ret

00000ec2 <Timer2_WithInterrupt_Initialization>:
uint32_t Timer2_CTC = 0;
uint32_t Timer2_Init_Value = 0;

void Timer2_WithInterrupt_Initialization(Timer2_Mode mode, Timer2_Pin_Mode pin)
{
	cli();//Close global interrupt
     ec2:	f8 94       	cli
	switch(mode)//Chose Mode
     ec4:	88 23       	and	r24, r24
     ec6:	19 f0       	breq	.+6      	; 0xece <Timer2_WithInterrupt_Initialization+0xc>
     ec8:	82 30       	cpi	r24, 0x02	; 2
     eca:	59 f0       	breq	.+22     	; 0xee2 <Timer2_WithInterrupt_Initialization+0x20>
     ecc:	13 c0       	rjmp	.+38     	; 0xef4 <Timer2_WithInterrupt_Initialization+0x32>
	{
		case Normal_Mode_:
		CLR_BIT(TCCR2, WGM21);CLR_BIT(TCCR2, WGM20);
     ece:	85 b5       	in	r24, 0x25	; 37
     ed0:	87 7f       	andi	r24, 0xF7	; 247
     ed2:	85 bd       	out	0x25, r24	; 37
     ed4:	85 b5       	in	r24, 0x25	; 37
     ed6:	8f 7b       	andi	r24, 0xBF	; 191
     ed8:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TIMSK, TOIE2);//Open OVF interrupt
     eda:	89 b7       	in	r24, 0x39	; 57
     edc:	80 64       	ori	r24, 0x40	; 64
     ede:	89 bf       	out	0x39, r24	; 57
		break;
     ee0:	09 c0       	rjmp	.+18     	; 0xef4 <Timer2_WithInterrupt_Initialization+0x32>
		case CTC_Mode_:
		SET_BIT(TCCR2, WGM21);CLR_BIT(TCCR2, WGM20);
     ee2:	85 b5       	in	r24, 0x25	; 37
     ee4:	88 60       	ori	r24, 0x08	; 8
     ee6:	85 bd       	out	0x25, r24	; 37
     ee8:	85 b5       	in	r24, 0x25	; 37
     eea:	8f 7b       	andi	r24, 0xBF	; 191
     eec:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TIMSK, OCIE2);//Open CTC Interrupt
     eee:	89 b7       	in	r24, 0x39	; 57
     ef0:	80 68       	ori	r24, 0x80	; 128
     ef2:	89 bf       	out	0x39, r24	; 57
		case PWM_PhaseCorrect_:
		break;
		case PWM_Fast_:
		break;
	}
	switch(pin)//Output pin mode
     ef4:	61 30       	cpi	r22, 0x01	; 1
     ef6:	69 f0       	breq	.+26     	; 0xf12 <Timer2_WithInterrupt_Initialization+0x50>
     ef8:	28 f0       	brcs	.+10     	; 0xf04 <Timer2_WithInterrupt_Initialization+0x42>
     efa:	62 30       	cpi	r22, 0x02	; 2
     efc:	89 f0       	breq	.+34     	; 0xf20 <Timer2_WithInterrupt_Initialization+0x5e>
     efe:	63 30       	cpi	r22, 0x03	; 3
     f00:	b1 f0       	breq	.+44     	; 0xf2e <Timer2_WithInterrupt_Initialization+0x6c>
     f02:	1b c0       	rjmp	.+54     	; 0xf3a <Timer2_WithInterrupt_Initialization+0x78>
	{
		case Pin_disconnected_:
		CLR_BIT(TCCR2, COM21);CLR_BIT(TCCR2, COM20);
     f04:	85 b5       	in	r24, 0x25	; 37
     f06:	8f 7d       	andi	r24, 0xDF	; 223
     f08:	85 bd       	out	0x25, r24	; 37
     f0a:	85 b5       	in	r24, 0x25	; 37
     f0c:	8f 7e       	andi	r24, 0xEF	; 239
     f0e:	85 bd       	out	0x25, r24	; 37
		break;
     f10:	14 c0       	rjmp	.+40     	; 0xf3a <Timer2_WithInterrupt_Initialization+0x78>
		case Pin_Toggle_:
		CLR_BIT(TCCR2, COM21);SET_BIT(TCCR2, COM20);
     f12:	85 b5       	in	r24, 0x25	; 37
     f14:	8f 7d       	andi	r24, 0xDF	; 223
     f16:	85 bd       	out	0x25, r24	; 37
     f18:	85 b5       	in	r24, 0x25	; 37
     f1a:	80 61       	ori	r24, 0x10	; 16
     f1c:	85 bd       	out	0x25, r24	; 37
		break;
     f1e:	0d c0       	rjmp	.+26     	; 0xf3a <Timer2_WithInterrupt_Initialization+0x78>
		case Pin_Clear_:
		SET_BIT(TCCR2, COM21);CLR_BIT(TCCR2, COM20);
     f20:	85 b5       	in	r24, 0x25	; 37
     f22:	80 62       	ori	r24, 0x20	; 32
     f24:	85 bd       	out	0x25, r24	; 37
     f26:	85 b5       	in	r24, 0x25	; 37
     f28:	8f 7e       	andi	r24, 0xEF	; 239
     f2a:	85 bd       	out	0x25, r24	; 37
		break;
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <Timer2_WithInterrupt_Initialization+0x78>
		case Pin_Set_:
		SET_BIT(TCCR2, COM21);SET_BIT(TCCR2, COM20);
     f2e:	85 b5       	in	r24, 0x25	; 37
     f30:	80 62       	ori	r24, 0x20	; 32
     f32:	85 bd       	out	0x25, r24	; 37
     f34:	85 b5       	in	r24, 0x25	; 37
     f36:	80 61       	ori	r24, 0x10	; 16
     f38:	85 bd       	out	0x25, r24	; 37
		break;
	}
	sei();//Enable global interrupt
     f3a:	78 94       	sei
     f3c:	08 95       	ret

00000f3e <Timer2_WithInterrupt_SetDelay>:
}
void Timer2_WithInterrupt_SetDelay(Timer2_Mode mode, uint32_t delay, uint8_t top)
{
     f3e:	0f 93       	push	r16
	if(mode == Normal_Mode_)
     f40:	81 11       	cpse	r24, r1
     f42:	37 c0       	rjmp	.+110    	; 0xfb2 <Timer2_WithInterrupt_SetDelay+0x74>
	{
		uint8_t Tick = ( 1 * _Prescaler_) / Frequency;
     f44:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <_Prescaler_>
     f48:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <_Prescaler_+0x1>
     f4c:	f9 01       	movw	r30, r18
     f4e:	f2 95       	swap	r31
     f50:	e2 95       	swap	r30
     f52:	ef 70       	andi	r30, 0x0F	; 15
     f54:	ef 27       	eor	r30, r31
     f56:	ff 70       	andi	r31, 0x0F	; 15
     f58:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     f5a:	a8 ee       	ldi	r26, 0xE8	; 232
     f5c:	b3 e0       	ldi	r27, 0x03	; 3
     f5e:	9a 01       	movw	r18, r20
     f60:	ab 01       	movw	r20, r22
     f62:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__muluhisi3>
     f66:	2e 2f       	mov	r18, r30
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivmodsi4>
		Timer2_OVF = count / Bits;
     f72:	bb 27       	eor	r27, r27
     f74:	a5 2f       	mov	r26, r21
     f76:	94 2f       	mov	r25, r20
     f78:	83 2f       	mov	r24, r19
		Timer2_OVF ++;
     f7a:	01 96       	adiw	r24, 0x01	; 1
     f7c:	a1 1d       	adc	r26, r1
     f7e:	b1 1d       	adc	r27, r1
     f80:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <Timer2_OVF>
     f84:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <Timer2_OVF+0x1>
     f88:	a0 93 a1 00 	sts	0x00A1, r26	; 0x8000a1 <Timer2_OVF+0x2>
     f8c:	b0 93 a2 00 	sts	0x00A2, r27	; 0x8000a2 <Timer2_OVF+0x3>
		Timer2_Init_Value = Bits - (count % Bits);
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	a0 e0       	ldi	r26, 0x00	; 0
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	82 1b       	sub	r24, r18
     f9a:	91 09       	sbc	r25, r1
     f9c:	a1 09       	sbc	r26, r1
     f9e:	b1 09       	sbc	r27, r1
     fa0:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <Timer2_Init_Value>
     fa4:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <Timer2_Init_Value+0x1>
     fa8:	a0 93 99 00 	sts	0x0099, r26	; 0x800099 <Timer2_Init_Value+0x2>
     fac:	b0 93 9a 00 	sts	0x009A, r27	; 0x80009a <Timer2_Init_Value+0x3>
		return;
     fb0:	30 c0       	rjmp	.+96     	; 0x1012 <Timer2_WithInterrupt_SetDelay+0xd4>
	}
	else if(mode == CTC_Mode_)
     fb2:	82 30       	cpi	r24, 0x02	; 2
     fb4:	71 f5       	brne	.+92     	; 0x1012 <Timer2_WithInterrupt_SetDelay+0xd4>
	{
		OCR2 = top;
     fb6:	23 bd       	out	0x23, r18	; 35
		uint8_t Tick = ( 1 * _Prescaler_) / Frequency;
     fb8:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <_Prescaler_>
     fbc:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <_Prescaler_+0x1>
     fc0:	f9 01       	movw	r30, r18
     fc2:	f2 95       	swap	r31
     fc4:	e2 95       	swap	r30
     fc6:	ef 70       	andi	r30, 0x0F	; 15
     fc8:	ef 27       	eor	r30, r31
     fca:	ff 70       	andi	r31, 0x0F	; 15
     fcc:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     fce:	a8 ee       	ldi	r26, 0xE8	; 232
     fd0:	b3 e0       	ldi	r27, 0x03	; 3
     fd2:	9a 01       	movw	r18, r20
     fd4:	ab 01       	movw	r20, r22
     fd6:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__muluhisi3>
     fda:	2e 2f       	mov	r18, r30
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivmodsi4>
     fe6:	ca 01       	movw	r24, r20
     fe8:	b9 01       	movw	r22, r18
		Timer2_CTC = count / OCR0;
     fea:	0c b7       	in	r16, 0x3c	; 60
     fec:	20 2f       	mov	r18, r16
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__udivmodsi4>
		Timer2_CTC ++;
     ff8:	da 01       	movw	r26, r20
     ffa:	c9 01       	movw	r24, r18
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	a1 1d       	adc	r26, r1
    1000:	b1 1d       	adc	r27, r1
    1002:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <Timer2_CTC>
    1006:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <Timer2_CTC+0x1>
    100a:	a0 93 9d 00 	sts	0x009D, r26	; 0x80009d <Timer2_CTC+0x2>
    100e:	b0 93 9e 00 	sts	0x009E, r27	; 0x80009e <Timer2_CTC+0x3>
		return;
	}
}
    1012:	0f 91       	pop	r16
    1014:	08 95       	ret

00001016 <__divsf3>:
    1016:	0e 94 1f 08 	call	0x103e	; 0x103e <__divsf3x>
    101a:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__fp_round>
    101e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__fp_pscB>
    1022:	58 f0       	brcs	.+22     	; 0x103a <__divsf3+0x24>
    1024:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fp_pscA>
    1028:	40 f0       	brcs	.+16     	; 0x103a <__divsf3+0x24>
    102a:	29 f4       	brne	.+10     	; 0x1036 <__divsf3+0x20>
    102c:	5f 3f       	cpi	r21, 0xFF	; 255
    102e:	29 f0       	breq	.+10     	; 0x103a <__divsf3+0x24>
    1030:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__fp_inf>
    1034:	51 11       	cpse	r21, r1
    1036:	0c 94 34 09 	jmp	0x1268	; 0x1268 <__fp_szero>
    103a:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__fp_nan>

0000103e <__divsf3x>:
    103e:	0e 94 11 09 	call	0x1222	; 0x1222 <__fp_split3>
    1042:	68 f3       	brcs	.-38     	; 0x101e <__divsf3+0x8>

00001044 <__divsf3_pse>:
    1044:	99 23       	and	r25, r25
    1046:	b1 f3       	breq	.-20     	; 0x1034 <__divsf3+0x1e>
    1048:	55 23       	and	r21, r21
    104a:	91 f3       	breq	.-28     	; 0x1030 <__divsf3+0x1a>
    104c:	95 1b       	sub	r25, r21
    104e:	55 0b       	sbc	r21, r21
    1050:	bb 27       	eor	r27, r27
    1052:	aa 27       	eor	r26, r26
    1054:	62 17       	cp	r22, r18
    1056:	73 07       	cpc	r23, r19
    1058:	84 07       	cpc	r24, r20
    105a:	38 f0       	brcs	.+14     	; 0x106a <__divsf3_pse+0x26>
    105c:	9f 5f       	subi	r25, 0xFF	; 255
    105e:	5f 4f       	sbci	r21, 0xFF	; 255
    1060:	22 0f       	add	r18, r18
    1062:	33 1f       	adc	r19, r19
    1064:	44 1f       	adc	r20, r20
    1066:	aa 1f       	adc	r26, r26
    1068:	a9 f3       	breq	.-22     	; 0x1054 <__divsf3_pse+0x10>
    106a:	35 d0       	rcall	.+106    	; 0x10d6 <__divsf3_pse+0x92>
    106c:	0e 2e       	mov	r0, r30
    106e:	3a f0       	brmi	.+14     	; 0x107e <__divsf3_pse+0x3a>
    1070:	e0 e8       	ldi	r30, 0x80	; 128
    1072:	32 d0       	rcall	.+100    	; 0x10d8 <__divsf3_pse+0x94>
    1074:	91 50       	subi	r25, 0x01	; 1
    1076:	50 40       	sbci	r21, 0x00	; 0
    1078:	e6 95       	lsr	r30
    107a:	00 1c       	adc	r0, r0
    107c:	ca f7       	brpl	.-14     	; 0x1070 <__divsf3_pse+0x2c>
    107e:	2b d0       	rcall	.+86     	; 0x10d6 <__divsf3_pse+0x92>
    1080:	fe 2f       	mov	r31, r30
    1082:	29 d0       	rcall	.+82     	; 0x10d6 <__divsf3_pse+0x92>
    1084:	66 0f       	add	r22, r22
    1086:	77 1f       	adc	r23, r23
    1088:	88 1f       	adc	r24, r24
    108a:	bb 1f       	adc	r27, r27
    108c:	26 17       	cp	r18, r22
    108e:	37 07       	cpc	r19, r23
    1090:	48 07       	cpc	r20, r24
    1092:	ab 07       	cpc	r26, r27
    1094:	b0 e8       	ldi	r27, 0x80	; 128
    1096:	09 f0       	breq	.+2      	; 0x109a <__divsf3_pse+0x56>
    1098:	bb 0b       	sbc	r27, r27
    109a:	80 2d       	mov	r24, r0
    109c:	bf 01       	movw	r22, r30
    109e:	ff 27       	eor	r31, r31
    10a0:	93 58       	subi	r25, 0x83	; 131
    10a2:	5f 4f       	sbci	r21, 0xFF	; 255
    10a4:	3a f0       	brmi	.+14     	; 0x10b4 <__divsf3_pse+0x70>
    10a6:	9e 3f       	cpi	r25, 0xFE	; 254
    10a8:	51 05       	cpc	r21, r1
    10aa:	78 f0       	brcs	.+30     	; 0x10ca <__divsf3_pse+0x86>
    10ac:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__fp_inf>
    10b0:	0c 94 34 09 	jmp	0x1268	; 0x1268 <__fp_szero>
    10b4:	5f 3f       	cpi	r21, 0xFF	; 255
    10b6:	e4 f3       	brlt	.-8      	; 0x10b0 <__divsf3_pse+0x6c>
    10b8:	98 3e       	cpi	r25, 0xE8	; 232
    10ba:	d4 f3       	brlt	.-12     	; 0x10b0 <__divsf3_pse+0x6c>
    10bc:	86 95       	lsr	r24
    10be:	77 95       	ror	r23
    10c0:	67 95       	ror	r22
    10c2:	b7 95       	ror	r27
    10c4:	f7 95       	ror	r31
    10c6:	9f 5f       	subi	r25, 0xFF	; 255
    10c8:	c9 f7       	brne	.-14     	; 0x10bc <__divsf3_pse+0x78>
    10ca:	88 0f       	add	r24, r24
    10cc:	91 1d       	adc	r25, r1
    10ce:	96 95       	lsr	r25
    10d0:	87 95       	ror	r24
    10d2:	97 f9       	bld	r25, 7
    10d4:	08 95       	ret
    10d6:	e1 e0       	ldi	r30, 0x01	; 1
    10d8:	66 0f       	add	r22, r22
    10da:	77 1f       	adc	r23, r23
    10dc:	88 1f       	adc	r24, r24
    10de:	bb 1f       	adc	r27, r27
    10e0:	62 17       	cp	r22, r18
    10e2:	73 07       	cpc	r23, r19
    10e4:	84 07       	cpc	r24, r20
    10e6:	ba 07       	cpc	r27, r26
    10e8:	20 f0       	brcs	.+8      	; 0x10f2 <__divsf3_pse+0xae>
    10ea:	62 1b       	sub	r22, r18
    10ec:	73 0b       	sbc	r23, r19
    10ee:	84 0b       	sbc	r24, r20
    10f0:	ba 0b       	sbc	r27, r26
    10f2:	ee 1f       	adc	r30, r30
    10f4:	88 f7       	brcc	.-30     	; 0x10d8 <__divsf3_pse+0x94>
    10f6:	e0 95       	com	r30
    10f8:	08 95       	ret

000010fa <__fixunssfsi>:
    10fa:	0e 94 19 09 	call	0x1232	; 0x1232 <__fp_splitA>
    10fe:	88 f0       	brcs	.+34     	; 0x1122 <__fixunssfsi+0x28>
    1100:	9f 57       	subi	r25, 0x7F	; 127
    1102:	98 f0       	brcs	.+38     	; 0x112a <__fixunssfsi+0x30>
    1104:	b9 2f       	mov	r27, r25
    1106:	99 27       	eor	r25, r25
    1108:	b7 51       	subi	r27, 0x17	; 23
    110a:	b0 f0       	brcs	.+44     	; 0x1138 <__fixunssfsi+0x3e>
    110c:	e1 f0       	breq	.+56     	; 0x1146 <__fixunssfsi+0x4c>
    110e:	66 0f       	add	r22, r22
    1110:	77 1f       	adc	r23, r23
    1112:	88 1f       	adc	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	1a f0       	brmi	.+6      	; 0x111e <__fixunssfsi+0x24>
    1118:	ba 95       	dec	r27
    111a:	c9 f7       	brne	.-14     	; 0x110e <__fixunssfsi+0x14>
    111c:	14 c0       	rjmp	.+40     	; 0x1146 <__fixunssfsi+0x4c>
    111e:	b1 30       	cpi	r27, 0x01	; 1
    1120:	91 f0       	breq	.+36     	; 0x1146 <__fixunssfsi+0x4c>
    1122:	0e 94 33 09 	call	0x1266	; 0x1266 <__fp_zero>
    1126:	b1 e0       	ldi	r27, 0x01	; 1
    1128:	08 95       	ret
    112a:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__fp_zero>
    112e:	67 2f       	mov	r22, r23
    1130:	78 2f       	mov	r23, r24
    1132:	88 27       	eor	r24, r24
    1134:	b8 5f       	subi	r27, 0xF8	; 248
    1136:	39 f0       	breq	.+14     	; 0x1146 <__fixunssfsi+0x4c>
    1138:	b9 3f       	cpi	r27, 0xF9	; 249
    113a:	cc f3       	brlt	.-14     	; 0x112e <__fixunssfsi+0x34>
    113c:	86 95       	lsr	r24
    113e:	77 95       	ror	r23
    1140:	67 95       	ror	r22
    1142:	b3 95       	inc	r27
    1144:	d9 f7       	brne	.-10     	; 0x113c <__fixunssfsi+0x42>
    1146:	3e f4       	brtc	.+14     	; 0x1156 <__fixunssfsi+0x5c>
    1148:	90 95       	com	r25
    114a:	80 95       	com	r24
    114c:	70 95       	com	r23
    114e:	61 95       	neg	r22
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	08 95       	ret

00001158 <__floatunsisf>:
    1158:	e8 94       	clt
    115a:	09 c0       	rjmp	.+18     	; 0x116e <__floatsisf+0x12>

0000115c <__floatsisf>:
    115c:	97 fb       	bst	r25, 7
    115e:	3e f4       	brtc	.+14     	; 0x116e <__floatsisf+0x12>
    1160:	90 95       	com	r25
    1162:	80 95       	com	r24
    1164:	70 95       	com	r23
    1166:	61 95       	neg	r22
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	8f 4f       	sbci	r24, 0xFF	; 255
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	99 23       	and	r25, r25
    1170:	a9 f0       	breq	.+42     	; 0x119c <__floatsisf+0x40>
    1172:	f9 2f       	mov	r31, r25
    1174:	96 e9       	ldi	r25, 0x96	; 150
    1176:	bb 27       	eor	r27, r27
    1178:	93 95       	inc	r25
    117a:	f6 95       	lsr	r31
    117c:	87 95       	ror	r24
    117e:	77 95       	ror	r23
    1180:	67 95       	ror	r22
    1182:	b7 95       	ror	r27
    1184:	f1 11       	cpse	r31, r1
    1186:	f8 cf       	rjmp	.-16     	; 0x1178 <__floatsisf+0x1c>
    1188:	fa f4       	brpl	.+62     	; 0x11c8 <__floatsisf+0x6c>
    118a:	bb 0f       	add	r27, r27
    118c:	11 f4       	brne	.+4      	; 0x1192 <__floatsisf+0x36>
    118e:	60 ff       	sbrs	r22, 0
    1190:	1b c0       	rjmp	.+54     	; 0x11c8 <__floatsisf+0x6c>
    1192:	6f 5f       	subi	r22, 0xFF	; 255
    1194:	7f 4f       	sbci	r23, 0xFF	; 255
    1196:	8f 4f       	sbci	r24, 0xFF	; 255
    1198:	9f 4f       	sbci	r25, 0xFF	; 255
    119a:	16 c0       	rjmp	.+44     	; 0x11c8 <__floatsisf+0x6c>
    119c:	88 23       	and	r24, r24
    119e:	11 f0       	breq	.+4      	; 0x11a4 <__floatsisf+0x48>
    11a0:	96 e9       	ldi	r25, 0x96	; 150
    11a2:	11 c0       	rjmp	.+34     	; 0x11c6 <__floatsisf+0x6a>
    11a4:	77 23       	and	r23, r23
    11a6:	21 f0       	breq	.+8      	; 0x11b0 <__floatsisf+0x54>
    11a8:	9e e8       	ldi	r25, 0x8E	; 142
    11aa:	87 2f       	mov	r24, r23
    11ac:	76 2f       	mov	r23, r22
    11ae:	05 c0       	rjmp	.+10     	; 0x11ba <__floatsisf+0x5e>
    11b0:	66 23       	and	r22, r22
    11b2:	71 f0       	breq	.+28     	; 0x11d0 <__floatsisf+0x74>
    11b4:	96 e8       	ldi	r25, 0x86	; 134
    11b6:	86 2f       	mov	r24, r22
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	2a f0       	brmi	.+10     	; 0x11c8 <__floatsisf+0x6c>
    11be:	9a 95       	dec	r25
    11c0:	66 0f       	add	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	88 1f       	adc	r24, r24
    11c6:	da f7       	brpl	.-10     	; 0x11be <__floatsisf+0x62>
    11c8:	88 0f       	add	r24, r24
    11ca:	96 95       	lsr	r25
    11cc:	87 95       	ror	r24
    11ce:	97 f9       	bld	r25, 7
    11d0:	08 95       	ret

000011d2 <__fp_inf>:
    11d2:	97 f9       	bld	r25, 7
    11d4:	9f 67       	ori	r25, 0x7F	; 127
    11d6:	80 e8       	ldi	r24, 0x80	; 128
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	08 95       	ret

000011de <__fp_nan>:
    11de:	9f ef       	ldi	r25, 0xFF	; 255
    11e0:	80 ec       	ldi	r24, 0xC0	; 192
    11e2:	08 95       	ret

000011e4 <__fp_pscA>:
    11e4:	00 24       	eor	r0, r0
    11e6:	0a 94       	dec	r0
    11e8:	16 16       	cp	r1, r22
    11ea:	17 06       	cpc	r1, r23
    11ec:	18 06       	cpc	r1, r24
    11ee:	09 06       	cpc	r0, r25
    11f0:	08 95       	ret

000011f2 <__fp_pscB>:
    11f2:	00 24       	eor	r0, r0
    11f4:	0a 94       	dec	r0
    11f6:	12 16       	cp	r1, r18
    11f8:	13 06       	cpc	r1, r19
    11fa:	14 06       	cpc	r1, r20
    11fc:	05 06       	cpc	r0, r21
    11fe:	08 95       	ret

00001200 <__fp_round>:
    1200:	09 2e       	mov	r0, r25
    1202:	03 94       	inc	r0
    1204:	00 0c       	add	r0, r0
    1206:	11 f4       	brne	.+4      	; 0x120c <__fp_round+0xc>
    1208:	88 23       	and	r24, r24
    120a:	52 f0       	brmi	.+20     	; 0x1220 <__fp_round+0x20>
    120c:	bb 0f       	add	r27, r27
    120e:	40 f4       	brcc	.+16     	; 0x1220 <__fp_round+0x20>
    1210:	bf 2b       	or	r27, r31
    1212:	11 f4       	brne	.+4      	; 0x1218 <__fp_round+0x18>
    1214:	60 ff       	sbrs	r22, 0
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <__fp_round+0x20>
    1218:	6f 5f       	subi	r22, 0xFF	; 255
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	8f 4f       	sbci	r24, 0xFF	; 255
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	08 95       	ret

00001222 <__fp_split3>:
    1222:	57 fd       	sbrc	r21, 7
    1224:	90 58       	subi	r25, 0x80	; 128
    1226:	44 0f       	add	r20, r20
    1228:	55 1f       	adc	r21, r21
    122a:	59 f0       	breq	.+22     	; 0x1242 <__fp_splitA+0x10>
    122c:	5f 3f       	cpi	r21, 0xFF	; 255
    122e:	71 f0       	breq	.+28     	; 0x124c <__fp_splitA+0x1a>
    1230:	47 95       	ror	r20

00001232 <__fp_splitA>:
    1232:	88 0f       	add	r24, r24
    1234:	97 fb       	bst	r25, 7
    1236:	99 1f       	adc	r25, r25
    1238:	61 f0       	breq	.+24     	; 0x1252 <__fp_splitA+0x20>
    123a:	9f 3f       	cpi	r25, 0xFF	; 255
    123c:	79 f0       	breq	.+30     	; 0x125c <__fp_splitA+0x2a>
    123e:	87 95       	ror	r24
    1240:	08 95       	ret
    1242:	12 16       	cp	r1, r18
    1244:	13 06       	cpc	r1, r19
    1246:	14 06       	cpc	r1, r20
    1248:	55 1f       	adc	r21, r21
    124a:	f2 cf       	rjmp	.-28     	; 0x1230 <__fp_split3+0xe>
    124c:	46 95       	lsr	r20
    124e:	f1 df       	rcall	.-30     	; 0x1232 <__fp_splitA>
    1250:	08 c0       	rjmp	.+16     	; 0x1262 <__fp_splitA+0x30>
    1252:	16 16       	cp	r1, r22
    1254:	17 06       	cpc	r1, r23
    1256:	18 06       	cpc	r1, r24
    1258:	99 1f       	adc	r25, r25
    125a:	f1 cf       	rjmp	.-30     	; 0x123e <__fp_splitA+0xc>
    125c:	86 95       	lsr	r24
    125e:	71 05       	cpc	r23, r1
    1260:	61 05       	cpc	r22, r1
    1262:	08 94       	sec
    1264:	08 95       	ret

00001266 <__fp_zero>:
    1266:	e8 94       	clt

00001268 <__fp_szero>:
    1268:	bb 27       	eor	r27, r27
    126a:	66 27       	eor	r22, r22
    126c:	77 27       	eor	r23, r23
    126e:	cb 01       	movw	r24, r22
    1270:	97 f9       	bld	r25, 7
    1272:	08 95       	ret

00001274 <__gesf2>:
    1274:	0e 94 ac 09 	call	0x1358	; 0x1358 <__fp_cmp>
    1278:	08 f4       	brcc	.+2      	; 0x127c <__gesf2+0x8>
    127a:	8f ef       	ldi	r24, 0xFF	; 255
    127c:	08 95       	ret

0000127e <__mulsf3>:
    127e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__mulsf3x>
    1282:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__fp_round>
    1286:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fp_pscA>
    128a:	38 f0       	brcs	.+14     	; 0x129a <__mulsf3+0x1c>
    128c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__fp_pscB>
    1290:	20 f0       	brcs	.+8      	; 0x129a <__mulsf3+0x1c>
    1292:	95 23       	and	r25, r21
    1294:	11 f0       	breq	.+4      	; 0x129a <__mulsf3+0x1c>
    1296:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__fp_inf>
    129a:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__fp_nan>
    129e:	11 24       	eor	r1, r1
    12a0:	0c 94 34 09 	jmp	0x1268	; 0x1268 <__fp_szero>

000012a4 <__mulsf3x>:
    12a4:	0e 94 11 09 	call	0x1222	; 0x1222 <__fp_split3>
    12a8:	70 f3       	brcs	.-36     	; 0x1286 <__mulsf3+0x8>

000012aa <__mulsf3_pse>:
    12aa:	95 9f       	mul	r25, r21
    12ac:	c1 f3       	breq	.-16     	; 0x129e <__mulsf3+0x20>
    12ae:	95 0f       	add	r25, r21
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	55 1f       	adc	r21, r21
    12b4:	62 9f       	mul	r22, r18
    12b6:	f0 01       	movw	r30, r0
    12b8:	72 9f       	mul	r23, r18
    12ba:	bb 27       	eor	r27, r27
    12bc:	f0 0d       	add	r31, r0
    12be:	b1 1d       	adc	r27, r1
    12c0:	63 9f       	mul	r22, r19
    12c2:	aa 27       	eor	r26, r26
    12c4:	f0 0d       	add	r31, r0
    12c6:	b1 1d       	adc	r27, r1
    12c8:	aa 1f       	adc	r26, r26
    12ca:	64 9f       	mul	r22, r20
    12cc:	66 27       	eor	r22, r22
    12ce:	b0 0d       	add	r27, r0
    12d0:	a1 1d       	adc	r26, r1
    12d2:	66 1f       	adc	r22, r22
    12d4:	82 9f       	mul	r24, r18
    12d6:	22 27       	eor	r18, r18
    12d8:	b0 0d       	add	r27, r0
    12da:	a1 1d       	adc	r26, r1
    12dc:	62 1f       	adc	r22, r18
    12de:	73 9f       	mul	r23, r19
    12e0:	b0 0d       	add	r27, r0
    12e2:	a1 1d       	adc	r26, r1
    12e4:	62 1f       	adc	r22, r18
    12e6:	83 9f       	mul	r24, r19
    12e8:	a0 0d       	add	r26, r0
    12ea:	61 1d       	adc	r22, r1
    12ec:	22 1f       	adc	r18, r18
    12ee:	74 9f       	mul	r23, r20
    12f0:	33 27       	eor	r19, r19
    12f2:	a0 0d       	add	r26, r0
    12f4:	61 1d       	adc	r22, r1
    12f6:	23 1f       	adc	r18, r19
    12f8:	84 9f       	mul	r24, r20
    12fa:	60 0d       	add	r22, r0
    12fc:	21 1d       	adc	r18, r1
    12fe:	82 2f       	mov	r24, r18
    1300:	76 2f       	mov	r23, r22
    1302:	6a 2f       	mov	r22, r26
    1304:	11 24       	eor	r1, r1
    1306:	9f 57       	subi	r25, 0x7F	; 127
    1308:	50 40       	sbci	r21, 0x00	; 0
    130a:	9a f0       	brmi	.+38     	; 0x1332 <__mulsf3_pse+0x88>
    130c:	f1 f0       	breq	.+60     	; 0x134a <__mulsf3_pse+0xa0>
    130e:	88 23       	and	r24, r24
    1310:	4a f0       	brmi	.+18     	; 0x1324 <__mulsf3_pse+0x7a>
    1312:	ee 0f       	add	r30, r30
    1314:	ff 1f       	adc	r31, r31
    1316:	bb 1f       	adc	r27, r27
    1318:	66 1f       	adc	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	88 1f       	adc	r24, r24
    131e:	91 50       	subi	r25, 0x01	; 1
    1320:	50 40       	sbci	r21, 0x00	; 0
    1322:	a9 f7       	brne	.-22     	; 0x130e <__mulsf3_pse+0x64>
    1324:	9e 3f       	cpi	r25, 0xFE	; 254
    1326:	51 05       	cpc	r21, r1
    1328:	80 f0       	brcs	.+32     	; 0x134a <__mulsf3_pse+0xa0>
    132a:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__fp_inf>
    132e:	0c 94 34 09 	jmp	0x1268	; 0x1268 <__fp_szero>
    1332:	5f 3f       	cpi	r21, 0xFF	; 255
    1334:	e4 f3       	brlt	.-8      	; 0x132e <__mulsf3_pse+0x84>
    1336:	98 3e       	cpi	r25, 0xE8	; 232
    1338:	d4 f3       	brlt	.-12     	; 0x132e <__mulsf3_pse+0x84>
    133a:	86 95       	lsr	r24
    133c:	77 95       	ror	r23
    133e:	67 95       	ror	r22
    1340:	b7 95       	ror	r27
    1342:	f7 95       	ror	r31
    1344:	e7 95       	ror	r30
    1346:	9f 5f       	subi	r25, 0xFF	; 255
    1348:	c1 f7       	brne	.-16     	; 0x133a <__mulsf3_pse+0x90>
    134a:	fe 2b       	or	r31, r30
    134c:	88 0f       	add	r24, r24
    134e:	91 1d       	adc	r25, r1
    1350:	96 95       	lsr	r25
    1352:	87 95       	ror	r24
    1354:	97 f9       	bld	r25, 7
    1356:	08 95       	ret

00001358 <__fp_cmp>:
    1358:	99 0f       	add	r25, r25
    135a:	00 08       	sbc	r0, r0
    135c:	55 0f       	add	r21, r21
    135e:	aa 0b       	sbc	r26, r26
    1360:	e0 e8       	ldi	r30, 0x80	; 128
    1362:	fe ef       	ldi	r31, 0xFE	; 254
    1364:	16 16       	cp	r1, r22
    1366:	17 06       	cpc	r1, r23
    1368:	e8 07       	cpc	r30, r24
    136a:	f9 07       	cpc	r31, r25
    136c:	c0 f0       	brcs	.+48     	; 0x139e <__fp_cmp+0x46>
    136e:	12 16       	cp	r1, r18
    1370:	13 06       	cpc	r1, r19
    1372:	e4 07       	cpc	r30, r20
    1374:	f5 07       	cpc	r31, r21
    1376:	98 f0       	brcs	.+38     	; 0x139e <__fp_cmp+0x46>
    1378:	62 1b       	sub	r22, r18
    137a:	73 0b       	sbc	r23, r19
    137c:	84 0b       	sbc	r24, r20
    137e:	95 0b       	sbc	r25, r21
    1380:	39 f4       	brne	.+14     	; 0x1390 <__fp_cmp+0x38>
    1382:	0a 26       	eor	r0, r26
    1384:	61 f0       	breq	.+24     	; 0x139e <__fp_cmp+0x46>
    1386:	23 2b       	or	r18, r19
    1388:	24 2b       	or	r18, r20
    138a:	25 2b       	or	r18, r21
    138c:	21 f4       	brne	.+8      	; 0x1396 <__fp_cmp+0x3e>
    138e:	08 95       	ret
    1390:	0a 26       	eor	r0, r26
    1392:	09 f4       	brne	.+2      	; 0x1396 <__fp_cmp+0x3e>
    1394:	a1 40       	sbci	r26, 0x01	; 1
    1396:	a6 95       	lsr	r26
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	81 1d       	adc	r24, r1
    139c:	81 1d       	adc	r24, r1
    139e:	08 95       	ret

000013a0 <__udivmodsi4>:
    13a0:	a1 e2       	ldi	r26, 0x21	; 33
    13a2:	1a 2e       	mov	r1, r26
    13a4:	aa 1b       	sub	r26, r26
    13a6:	bb 1b       	sub	r27, r27
    13a8:	fd 01       	movw	r30, r26
    13aa:	0d c0       	rjmp	.+26     	; 0x13c6 <__udivmodsi4_ep>

000013ac <__udivmodsi4_loop>:
    13ac:	aa 1f       	adc	r26, r26
    13ae:	bb 1f       	adc	r27, r27
    13b0:	ee 1f       	adc	r30, r30
    13b2:	ff 1f       	adc	r31, r31
    13b4:	a2 17       	cp	r26, r18
    13b6:	b3 07       	cpc	r27, r19
    13b8:	e4 07       	cpc	r30, r20
    13ba:	f5 07       	cpc	r31, r21
    13bc:	20 f0       	brcs	.+8      	; 0x13c6 <__udivmodsi4_ep>
    13be:	a2 1b       	sub	r26, r18
    13c0:	b3 0b       	sbc	r27, r19
    13c2:	e4 0b       	sbc	r30, r20
    13c4:	f5 0b       	sbc	r31, r21

000013c6 <__udivmodsi4_ep>:
    13c6:	66 1f       	adc	r22, r22
    13c8:	77 1f       	adc	r23, r23
    13ca:	88 1f       	adc	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	1a 94       	dec	r1
    13d0:	69 f7       	brne	.-38     	; 0x13ac <__udivmodsi4_loop>
    13d2:	60 95       	com	r22
    13d4:	70 95       	com	r23
    13d6:	80 95       	com	r24
    13d8:	90 95       	com	r25
    13da:	9b 01       	movw	r18, r22
    13dc:	ac 01       	movw	r20, r24
    13de:	bd 01       	movw	r22, r26
    13e0:	cf 01       	movw	r24, r30
    13e2:	08 95       	ret

000013e4 <__tablejump2__>:
    13e4:	ee 0f       	add	r30, r30
    13e6:	ff 1f       	adc	r31, r31
    13e8:	05 90       	lpm	r0, Z+
    13ea:	f4 91       	lpm	r31, Z
    13ec:	e0 2d       	mov	r30, r0
    13ee:	09 94       	ijmp

000013f0 <__muluhisi3>:
    13f0:	0e 94 03 0a 	call	0x1406	; 0x1406 <__umulhisi3>
    13f4:	a5 9f       	mul	r26, r21
    13f6:	90 0d       	add	r25, r0
    13f8:	b4 9f       	mul	r27, r20
    13fa:	90 0d       	add	r25, r0
    13fc:	a4 9f       	mul	r26, r20
    13fe:	80 0d       	add	r24, r0
    1400:	91 1d       	adc	r25, r1
    1402:	11 24       	eor	r1, r1
    1404:	08 95       	ret

00001406 <__umulhisi3>:
    1406:	a2 9f       	mul	r26, r18
    1408:	b0 01       	movw	r22, r0
    140a:	b3 9f       	mul	r27, r19
    140c:	c0 01       	movw	r24, r0
    140e:	a3 9f       	mul	r26, r19
    1410:	70 0d       	add	r23, r0
    1412:	81 1d       	adc	r24, r1
    1414:	11 24       	eor	r1, r1
    1416:	91 1d       	adc	r25, r1
    1418:	b2 9f       	mul	r27, r18
    141a:	70 0d       	add	r23, r0
    141c:	81 1d       	adc	r24, r1
    141e:	11 24       	eor	r1, r1
    1420:	91 1d       	adc	r25, r1
    1422:	08 95       	ret

00001424 <_exit>:
    1424:	f8 94       	cli

00001426 <__stop_program>:
    1426:	ff cf       	rjmp	.-2      	; 0x1426 <__stop_program>
