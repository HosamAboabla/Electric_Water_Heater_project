
Electric_Water_Heater_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000011ae  00001242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000042  00800062  00800062  00001244  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cdc  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011b8  00000000  00000000  000042e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e3e  00000000  00000000  0000549c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000062c  00000000  00000000  000072dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d23  00000000  00000000  00007908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001665  00000000  00000000  0000862b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  00009c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_1>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	90 03       	fmuls	r17, r16
      56:	94 03       	fmuls	r17, r20
      58:	98 03       	fmulsu	r17, r16
      5a:	9c 03       	fmulsu	r17, r20
      5c:	a0 03       	fmuls	r18, r16
      5e:	a4 03       	fmuls	r18, r20
      60:	a8 03       	fmulsu	r18, r16
      62:	ac 03       	fmulsu	r18, r20

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee ea       	ldi	r30, 0xAE	; 174
      78:	f1 e1       	ldi	r31, 0x11	; 17
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a2 36       	cpi	r26, 0x62	; 98
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	20 e0       	ldi	r18, 0x00	; 0
      88:	a2 e6       	ldi	r26, 0x62	; 98
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a4 3a       	cpi	r26, 0xA4	; 164
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
      9a:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <__vector_1>:



//===============================================================================================

ISR(INT0_vect){
      a2:	1f 92       	push	r1
      a4:	0f 92       	push	r0
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	0f 92       	push	r0
      aa:	11 24       	eor	r1, r1
      ac:	2f 93       	push	r18
      ae:	3f 93       	push	r19
      b0:	4f 93       	push	r20
      b2:	5f 93       	push	r21
      b4:	6f 93       	push	r22
      b6:	7f 93       	push	r23
      b8:	8f 93       	push	r24
      ba:	9f 93       	push	r25
      bc:	af 93       	push	r26
      be:	bf 93       	push	r27
      c0:	ef 93       	push	r30
      c2:	ff 93       	push	r31
	power_flag^=1;
      c4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <power_flag>
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	89 27       	eor	r24, r25
      cc:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <power_flag>
	if(power_flag==0){
      d0:	81 11       	cpse	r24, r1
      d2:	11 c0       	rjmp	.+34     	; 0xf6 <__vector_1+0x54>
		LED0_OFF();
      d4:	0e 94 57 03 	call	0x6ae	; 0x6ae <LED0_OFF>
		LED1_OFF();
      d8:	0e 94 65 03 	call	0x6ca	; 0x6ca <LED1_OFF>
		LED2_OFF();
      dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <LED2_OFF>
		Timer0_Stop();
      e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer0_Stop>
		Timer2_Stop();
      e4:	0e 94 b5 06 	call	0xd6a	; 0xd6a <Timer2_Stop>
		first_push_flag = 0;
      e8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <first_push_flag>
		SEVSEG_Disable1();
      ec:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <SEVSEG_Disable1>
		SEVSEG_Disable2();
      f0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <SEVSEG_Disable2>
      f4:	10 c0       	rjmp	.+32     	; 0x116 <__vector_1+0x74>
		// SEVSEG_Dot_Disable();
		// LCD_disable();
	}
	else {
		LED0_ON();
      f6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LED0_ON>
		//SEVSEG_Initialization();
		// LCD_Initialization();
		test=1;	//to reset the counter
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <test>
		Timer2_Start(PreS_1024_);	//start timer2 to get the ADC read every 100 ms
     100:	85 e0       	ldi	r24, 0x05	; 5
     102:	0e 94 57 06 	call	0xcae	; 0xcae <Timer2_Start>
		Timer2_WithInterrupt_SetDelay(Normal_Mode_ , 100 , 255);
     106:	2f ef       	ldi	r18, 0xFF	; 255
     108:	44 e6       	ldi	r20, 0x64	; 100
     10a:	50 e0       	ldi	r21, 0x00	; 0
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	70 e0       	ldi	r23, 0x00	; 0
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	0e 94 fd 06 	call	0xdfa	; 0xdfa <Timer2_WithInterrupt_SetDelay>
	}
}
     116:	ff 91       	pop	r31
     118:	ef 91       	pop	r30
     11a:	bf 91       	pop	r27
     11c:	af 91       	pop	r26
     11e:	9f 91       	pop	r25
     120:	8f 91       	pop	r24
     122:	7f 91       	pop	r23
     124:	6f 91       	pop	r22
     126:	5f 91       	pop	r21
     128:	4f 91       	pop	r20
     12a:	3f 91       	pop	r19
     12c:	2f 91       	pop	r18
     12e:	0f 90       	pop	r0
     130:	0f be       	out	0x3f, r0	; 63
     132:	0f 90       	pop	r0
     134:	1f 90       	pop	r1
     136:	18 95       	reti

00000138 <sitting_temp>:

//===============================================================================================


void sitting_temp(uint8_t btn0_read_,uint8_t btn1_read_){		//if user press the button make test = 1 to restart timer
	if(btn0_read_==PRESSED&&degree<75){
     138:	81 30       	cpi	r24, 0x01	; 1
     13a:	01 f5       	brne	.+64     	; 0x17c <sitting_temp+0x44>
     13c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     140:	9b 34       	cpi	r25, 0x4B	; 75
     142:	e0 f4       	brcc	.+56     	; 0x17c <sitting_temp+0x44>
		degree+=5;
     144:	65 e0       	ldi	r22, 0x05	; 5
     146:	69 0f       	add	r22, r25
     148:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <degree>
		EEPROM_Write(degree_addr , degree); // Saving desired temperature on EEPROM
     14c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 05 05 	call	0xa0a	; 0xa0a <EEPROM_Write>
		access_flag=1;
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <access_flag>
		test=1;
     15c:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <test>
		Timer0_Stop();
     160:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer0_Stop>
		Timer0_Start(PreS_1024);
     164:	85 e0       	ldi	r24, 0x05	; 5
     166:	0e 94 45 05 	call	0xa8a	; 0xa8a <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     16a:	2f ef       	ldi	r18, 0xFF	; 255
     16c:	48 e8       	ldi	r20, 0x88	; 136
     16e:	53 e1       	ldi	r21, 0x13	; 19
     170:	60 e0       	ldi	r22, 0x00	; 0
     172:	70 e0       	ldi	r23, 0x00	; 0
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <Timer0_WithInterrupt_SetDelay>
     17a:	08 95       	ret
	}
	else if(btn1_read_==PRESSED&&degree>35) {
     17c:	61 30       	cpi	r22, 0x01	; 1
     17e:	01 f5       	brne	.+64     	; 0x1c0 <sitting_temp+0x88>
     180:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     184:	94 32       	cpi	r25, 0x24	; 36
     186:	e0 f0       	brcs	.+56     	; 0x1c0 <sitting_temp+0x88>
		degree-=5;
     188:	6b ef       	ldi	r22, 0xFB	; 251
     18a:	69 0f       	add	r22, r25
     18c:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <degree>
		EEPROM_Write(degree_addr , degree); // Saving desired temperature on EEPROM
     190:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 05 05 	call	0xa0a	; 0xa0a <EEPROM_Write>
		access_flag=1;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <access_flag>
		test=1;
     1a0:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <test>
		Timer0_Stop();
     1a4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer0_Stop>
		Timer0_Start(PreS_1024);
     1a8:	85 e0       	ldi	r24, 0x05	; 5
     1aa:	0e 94 45 05 	call	0xa8a	; 0xa8a <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     1ae:	2f ef       	ldi	r18, 0xFF	; 255
     1b0:	48 e8       	ldi	r20, 0x88	; 136
     1b2:	53 e1       	ldi	r21, 0x13	; 19
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <Timer0_WithInterrupt_SetDelay>
     1be:	08 95       	ret
	}
	else if((btn1_read_==PRESSED&&degree==35)||(btn0_read_==PRESSED&&degree==75)) {
     1c0:	61 30       	cpi	r22, 0x01	; 1
     1c2:	21 f4       	brne	.+8      	; 0x1cc <sitting_temp+0x94>
     1c4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     1c8:	93 32       	cpi	r25, 0x23	; 35
     1ca:	31 f0       	breq	.+12     	; 0x1d8 <sitting_temp+0xa0>
     1cc:	81 30       	cpi	r24, 0x01	; 1
     1ce:	a1 f4       	brne	.+40     	; 0x1f8 <sitting_temp+0xc0>
     1d0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <degree>
     1d4:	8b 34       	cpi	r24, 0x4B	; 75
     1d6:	81 f4       	brne	.+32     	; 0x1f8 <sitting_temp+0xc0>
		test=1;
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <test>
		Timer0_Stop();
     1de:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer0_Stop>
		Timer0_Start(PreS_1024);
     1e2:	85 e0       	ldi	r24, 0x05	; 5
     1e4:	0e 94 45 05 	call	0xa8a	; 0xa8a <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     1e8:	2f ef       	ldi	r18, 0xFF	; 255
     1ea:	48 e8       	ldi	r20, 0x88	; 136
     1ec:	53 e1       	ldi	r21, 0x13	; 19
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <Timer0_WithInterrupt_SetDelay>
     1f8:	08 95       	ret

000001fa <main>:
{

	
	

	Interrupt_Initialization(INT0_Signal);
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	0e 94 1a 05 	call	0xa34	; 0xa34 <Interrupt_Initialization>
	DIO_SetPinPullUp(DIO_PORTD,DIO_PIN2);
     200:	62 e0       	ldi	r22, 0x02	; 2
     202:	83 e0       	ldi	r24, 0x03	; 3
     204:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinPullUp>
	Timer0_WithInterrupt_Initialization(Normal_Mode,Pin_disconnected);
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <Timer0_WithInterrupt_Initialization>
	Timer2_WithInterrupt_Initialization(Normal_Mode_ , Pin_disconnected_);
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	0e 94 bf 06 	call	0xd7e	; 0xd7e <Timer2_WithInterrupt_Initialization>

	// Timer1_with_interrupt_initialization(TIMER1_Normal , TIMER1_PIN_Disconnected,TIMER1_Channel_A);
	// Timer1_start(TIMER1_Prescaler_1024);
	// Timer1_with_interrupt_setDelay(TIMER1_Normal , 100 , 255);
	ADC_Initialization(ADC1);
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	0e 94 87 03 	call	0x70e	; 0x70e <ADC_Initialization>
	BTN0_Initialization();
     21e:	0e 94 25 03 	call	0x64a	; 0x64a <BTN0_Initialization>
	BTN1_Initialization();
     222:	0e 94 3a 03 	call	0x674	; 0x674 <BTN1_Initialization>
	LED0_Initialization();
     226:	0e 94 4b 03 	call	0x696	; 0x696 <LED0_Initialization>
	LED1_Initialization();
     22a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <LED1_Initialization>
	LED2_Initialization();
     22e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <LED2_Initialization>
	Relay_Initialization();
     232:	0e 94 75 03 	call	0x6ea	; 0x6ea <Relay_Initialization>
	SEVSEG_Initialization();
     236:	0e 94 b8 02 	call	0x570	; 0x570 <SEVSEG_Initialization>
	
	Timer2_Start(PreS_1024_);	//start timer2 to get the ADC read every 100 ms
     23a:	85 e0       	ldi	r24, 0x05	; 5
     23c:	0e 94 57 06 	call	0xcae	; 0xcae <Timer2_Start>
	Timer2_WithInterrupt_SetDelay(Normal_Mode_ , 100 , 255);
     240:	2f ef       	ldi	r18, 0xFF	; 255
     242:	44 e6       	ldi	r20, 0x64	; 100
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <Timer2_WithInterrupt_SetDelay>

	
	/* Replace with your application code */
	while (1)
	{
		btn1_read_ = BTN1_Read();	//get button1 read
     250:	0e 94 40 03 	call	0x680	; 0x680 <BTN1_Read>
     254:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <btn1_read_>
		btn0_read_ =BTN0_Read();	//get button0 read
     258:	0e 94 2f 03 	call	0x65e	; 0x65e <BTN0_Read>
     25c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <btn0_read_>
		

		//check if the device is on or off
		if (power_flag==0);	//if off do noting
     260:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <power_flag>
     264:	88 23       	and	r24, r24
     266:	a1 f3       	breq	.-24     	; 0x250 <main+0x56>
		else{	//if on start operations
			if (access_flag==1)
     268:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <access_flag>
     26c:	81 30       	cpi	r24, 0x01	; 1
     26e:	39 f4       	brne	.+14     	; 0x27e <main+0x84>
			{
				degree=EEPROM_Read(degree_addr);
     270:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 11 05 	call	0xa22	; 0xa22 <EEPROM_Read>
     27a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <degree>
			}
			

			if((first_push_flag==0&&btn0_read_==PRESSED)||(first_push_flag==0&&btn1_read_==PRESSED)){	//check if buttons are clicked for the first time to enter setting mode
     27e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <first_push_flag>
     282:	81 11       	cpse	r24, r1
     284:	19 c0       	rjmp	.+50     	; 0x2b8 <main+0xbe>
     286:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <btn0_read_>
     28a:	81 30       	cpi	r24, 0x01	; 1
     28c:	21 f0       	breq	.+8      	; 0x296 <main+0x9c>
     28e:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <btn1_read_>
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	89 f4       	brne	.+34     	; 0x2b8 <main+0xbe>
				first_push_flag=1;	//raise the flag
     296:	c1 e0       	ldi	r28, 0x01	; 1
     298:	c0 93 84 00 	sts	0x0084, r28	; 0x800084 <first_push_flag>
				Timer0_Start(PreS_1024);	//start timer0 so that if 5 seconds spend without using buttons ,exit setting mode
     29c:	85 e0       	ldi	r24, 0x05	; 5
     29e:	0e 94 45 05 	call	0xa8a	; 0xa8a <Timer0_Start>
				Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     2a2:	2f ef       	ldi	r18, 0xFF	; 255
     2a4:	48 e8       	ldi	r20, 0x88	; 136
     2a6:	53 e1       	ldi	r21, 0x13	; 19
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <Timer0_WithInterrupt_SetDelay>
				blink_7_segment = 1;
     2b2:	c0 93 6a 00 	sts	0x006A, r28	; 0x80006a <blink_7_segment>
     2b6:	06 c0       	rjmp	.+12     	; 0x2c4 <main+0xca>
				// btn1_read_=0;
				// btn0_read_=0;
			}
			else//  if( (btn0_read_==PRESSED) ||(btn1_read_==PRESSED) ) 
			{	//if this isn't the first click call the function of setting mode
				sitting_temp(btn0_read_,btn1_read_);
     2b8:	60 91 a3 00 	lds	r22, 0x00A3	; 0x8000a3 <btn1_read_>
     2bc:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <btn0_read_>
     2c0:	0e 94 9c 00 	call	0x138	; 0x138 <sitting_temp>
				
			}
			
			
			if (first_push_flag==0)
     2c4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <first_push_flag>
     2c8:	81 11       	cpse	r24, r1
     2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <main+0xda>
			{
				// LCD_Clear();
				// LCD_Write_Number(current_temp);
				SEVSEG_Display(current_temp);
     2cc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <current_temp>
     2d0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <SEVSEG_Display>
			}
			
			
			//compare the current temp with set_temp
			
			if (current_temp >= degree - 5 && current_temp <= degree + 5)
     2d4:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <current_temp>
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <degree>
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	ac 01       	movw	r20, r24
     2e2:	45 50       	subi	r20, 0x05	; 5
     2e4:	51 09       	sbc	r21, r1
     2e6:	24 17       	cp	r18, r20
     2e8:	35 07       	cpc	r19, r21
     2ea:	bc f0       	brlt	.+46     	; 0x31a <main+0x120>
     2ec:	bc 01       	movw	r22, r24
     2ee:	6b 5f       	subi	r22, 0xFB	; 251
     2f0:	7f 4f       	sbci	r23, 0xFF	; 255
     2f2:	62 17       	cp	r22, r18
     2f4:	73 07       	cpc	r23, r19
     2f6:	8c f0       	brlt	.+34     	; 0x31a <main+0x120>
			{
				LED1_OFF(); // Heating element off
     2f8:	0e 94 65 03 	call	0x6ca	; 0x6ca <LED1_OFF>
				LED2_OFF(); // Cooling element off
     2fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <LED2_OFF>
				heat_flag=0;	//raise flag of heating element
     300:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <heat_flag>
				Relay_ON();
     304:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <Relay_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     308:	8f e3       	ldi	r24, 0x3F	; 63
     30a:	9c e9       	ldi	r25, 0x9C	; 156
     30c:	01 97       	sbiw	r24, 0x01	; 1
     30e:	f1 f7       	brne	.-4      	; 0x30c <main+0x112>
     310:	00 c0       	rjmp	.+0      	; 0x312 <main+0x118>
     312:	00 00       	nop
				_delay_ms(10);
				Relay_OFF();
     314:	0e 94 81 03 	call	0x702	; 0x702 <Relay_OFF>
			
			
			//compare the current temp with set_temp
			
			if (current_temp >= degree - 5 && current_temp <= degree + 5)
			{
     318:	9b cf       	rjmp	.-202    	; 0x250 <main+0x56>
				heat_flag=0;	//raise flag of heating element
				Relay_ON();
				_delay_ms(10);
				Relay_OFF();
			}
			else if(current_temp<degree-5){
     31a:	24 17       	cp	r18, r20
     31c:	35 07       	cpc	r19, r21
     31e:	44 f4       	brge	.+16     	; 0x330 <main+0x136>
				heat_flag=1;	//raise flag of heating element
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <heat_flag>
				LED1_ON(); // Heating element on
     326:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LED1_ON>
				LED2_OFF(); // Cooling element off
     32a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <LED2_OFF>
     32e:	90 cf       	rjmp	.-224    	; 0x250 <main+0x56>
			}
			else if (current_temp>degree+5)
     330:	05 96       	adiw	r24, 0x05	; 5
     332:	82 17       	cp	r24, r18
     334:	93 07       	cpc	r25, r19
     336:	0c f0       	brlt	.+2      	; 0x33a <main+0x140>
     338:	8b cf       	rjmp	.-234    	; 0x250 <main+0x56>
			{
				heat_flag=0;	//raise flag of heating element
     33a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <heat_flag>
				LED1_OFF(); // Heating element off
     33e:	0e 94 65 03 	call	0x6ca	; 0x6ca <LED1_OFF>
				LED2_ON(); // Cooling element on
     342:	0e 94 6d 03 	call	0x6da	; 0x6da <LED2_ON>
     346:	84 cf       	rjmp	.-248    	; 0x250 <main+0x56>

00000348 <calcualate_avg_temp>:

//===============================================================================================


uint8_t calcualate_avg_temp(uint16_t* arr)
{
     348:	bc 01       	movw	r22, r24
	uint16_t sum = 0;
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     34a:	90 e0       	ldi	r25, 0x00	; 0
//===============================================================================================


uint8_t calcualate_avg_temp(uint16_t* arr)
{
	uint16_t sum = 0;
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	30 e0       	ldi	r19, 0x00	; 0
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     350:	0b c0       	rjmp	.+22     	; 0x368 <calcualate_avg_temp+0x20>
	{
		sum += arr[i];
     352:	e9 2f       	mov	r30, r25
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ee 0f       	add	r30, r30
     358:	ff 1f       	adc	r31, r31
     35a:	e6 0f       	add	r30, r22
     35c:	f7 1f       	adc	r31, r23
     35e:	40 81       	ld	r20, Z
     360:	51 81       	ldd	r21, Z+1	; 0x01
     362:	24 0f       	add	r18, r20
     364:	35 1f       	adc	r19, r21

uint8_t calcualate_avg_temp(uint16_t* arr)
{
	uint16_t sum = 0;
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     366:	9f 5f       	subi	r25, 0xFF	; 255
     368:	9a 30       	cpi	r25, 0x0A	; 10
     36a:	98 f3       	brcs	.-26     	; 0x352 <calcualate_avg_temp+0xa>
	{
		sum += arr[i];
	}
	
	return sum /  10;
     36c:	ad ec       	ldi	r26, 0xCD	; 205
     36e:	bc ec       	ldi	r27, 0xCC	; 204
     370:	0e 94 bb 08 	call	0x1176	; 0x1176 <__umulhisi3>
     374:	96 95       	lsr	r25
     376:	87 95       	ror	r24
     378:	96 95       	lsr	r25
     37a:	87 95       	ror	r24
     37c:	96 95       	lsr	r25
     37e:	87 95       	ror	r24
}
     380:	08 95       	ret

00000382 <__vector_11>:

//===============================================================================================



ISR(TIMER0_OVF_vect){
     382:	1f 92       	push	r1
     384:	0f 92       	push	r0
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	0f 92       	push	r0
     38a:	11 24       	eor	r1, r1
     38c:	2f 93       	push	r18
     38e:	3f 93       	push	r19
     390:	4f 93       	push	r20
     392:	5f 93       	push	r21
     394:	6f 93       	push	r22
     396:	7f 93       	push	r23
     398:	8f 93       	push	r24
     39a:	9f 93       	push	r25
     39c:	af 93       	push	r26
     39e:	bf 93       	push	r27
     3a0:	ef 93       	push	r30
     3a2:	ff 93       	push	r31
	
	static uint32_t cnt=0;
	if(test==1){	//restart count from 0 if user press the buttons
     3a4:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <test>
     3a8:	81 30       	cpi	r24, 0x01	; 1
     3aa:	51 f4       	brne	.+20     	; 0x3c0 <__vector_11+0x3e>
		cnt=0;
     3ac:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.2133>
     3b0:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.2133+0x1>
     3b4:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <cnt.2133+0x2>
     3b8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <cnt.2133+0x3>
		test=0;
     3bc:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <test>
	}
	if(cnt==Number_OVF){		//if counter reach number of overflows
     3c0:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <cnt.2133>
     3c4:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <cnt.2133+0x1>
     3c8:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <cnt.2133+0x2>
     3cc:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <cnt.2133+0x3>
     3d0:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <Number_OVF>
     3d4:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <Number_OVF+0x1>
     3d8:	a0 91 90 00 	lds	r26, 0x0090	; 0x800090 <Number_OVF+0x2>
     3dc:	b0 91 91 00 	lds	r27, 0x0091	; 0x800091 <Number_OVF+0x3>
     3e0:	48 17       	cp	r20, r24
     3e2:	59 07       	cpc	r21, r25
     3e4:	6a 07       	cpc	r22, r26
     3e6:	7b 07       	cpc	r23, r27
     3e8:	61 f4       	brne	.+24     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		Timer0_Stop();			//stop the timer
     3ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer0_Stop>
		first_push_flag=0;
     3ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <first_push_flag>
		cnt=0;					//make  counter =0
     3f2:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.2133>
     3f6:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.2133+0x1>
     3fa:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <cnt.2133+0x2>
     3fe:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <cnt.2133+0x3>
	else if(cnt%(Number_OVF/5)==0){
		LCD_Write_Number(degree);
		//SEVSEG_Display(degree);
	}
	*/
	cnt++;
     402:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cnt.2133>
     406:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cnt.2133+0x1>
     40a:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <cnt.2133+0x2>
     40e:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <cnt.2133+0x3>
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	a1 1d       	adc	r26, r1
     416:	b1 1d       	adc	r27, r1
     418:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <cnt.2133>
     41c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <cnt.2133+0x1>
     420:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <cnt.2133+0x2>
     424:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <cnt.2133+0x3>
}
     428:	ff 91       	pop	r31
     42a:	ef 91       	pop	r30
     42c:	bf 91       	pop	r27
     42e:	af 91       	pop	r26
     430:	9f 91       	pop	r25
     432:	8f 91       	pop	r24
     434:	7f 91       	pop	r23
     436:	6f 91       	pop	r22
     438:	5f 91       	pop	r21
     43a:	4f 91       	pop	r20
     43c:	3f 91       	pop	r19
     43e:	2f 91       	pop	r18
     440:	0f 90       	pop	r0
     442:	0f be       	out	0x3f, r0	; 63
     444:	0f 90       	pop	r0
     446:	1f 90       	pop	r1
     448:	18 95       	reti

0000044a <__vector_5>:

//===============================================================================================


ISR(TIMER2_OVF_vect)
{
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	2f 93       	push	r18
     456:	3f 93       	push	r19
     458:	4f 93       	push	r20
     45a:	5f 93       	push	r21
     45c:	6f 93       	push	r22
     45e:	7f 93       	push	r23
     460:	8f 93       	push	r24
     462:	9f 93       	push	r25
     464:	af 93       	push	r26
     466:	bf 93       	push	r27
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	ef 93       	push	r30
     46e:	ff 93       	push	r31
	static uint32_t timer2_count = 0;
	
	if (first_push_flag == 1)
     470:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <first_push_flag>
     474:	81 30       	cpi	r24, 0x01	; 1
     476:	69 f4       	brne	.+26     	; 0x492 <__vector_5+0x48>
	{
		if( blink_7_segment )
     478:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <blink_7_segment>
     47c:	88 23       	and	r24, r24
     47e:	29 f0       	breq	.+10     	; 0x48a <__vector_5+0x40>
		{
			SEVSEG_Display(degree);
     480:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <degree>
     484:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <SEVSEG_Display>
     488:	04 c0       	rjmp	.+8      	; 0x492 <__vector_5+0x48>
		}
		else
		{
			SEVSEG_Disable1();
     48a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <SEVSEG_Disable1>
			SEVSEG_Disable2();
     48e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <SEVSEG_Disable2>
	{
		SEVSEG_Display(current_temp);
	}
	*/
	
	if(timer2_count < Timer2_OVF)
     492:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     496:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
     49a:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <__data_end+0x2>
     49e:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <__data_end+0x3>
     4a2:	40 91 9c 00 	lds	r20, 0x009C	; 0x80009c <Timer2_OVF>
     4a6:	50 91 9d 00 	lds	r21, 0x009D	; 0x80009d <Timer2_OVF+0x1>
     4aa:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <Timer2_OVF+0x2>
     4ae:	70 91 9f 00 	lds	r23, 0x009F	; 0x80009f <Timer2_OVF+0x3>
     4b2:	84 17       	cp	r24, r20
     4b4:	95 07       	cpc	r25, r21
     4b6:	a6 07       	cpc	r26, r22
     4b8:	b7 07       	cpc	r27, r23
     4ba:	60 f4       	brcc	.+24     	; 0x4d4 <__vector_5+0x8a>
	{
		timer2_count++;
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	a1 1d       	adc	r26, r1
     4c0:	b1 1d       	adc	r27, r1
     4c2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
     4c6:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
     4ca:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <__data_end+0x2>
     4ce:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <__data_end+0x3>
     4d2:	3b c0       	rjmp	.+118    	; 0x54a <__vector_5+0x100>
	}
	else
	{
		// ADC read
		last_10_temp[temp_index] = (500.0 * ADC_Read()) / 1024.0 ; // degree
     4d4:	c0 91 6b 00 	lds	r28, 0x006B	; 0x80006b <temp_index>
     4d8:	d0 e0       	ldi	r29, 0x00	; 0
     4da:	0e 94 b3 03 	call	0x766	; 0x766 <ADC_Read>
     4de:	bc 01       	movw	r22, r24
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 98 07 	call	0xf30	; 0xf30 <__floatunsisf>
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	4a ef       	ldi	r20, 0xFA	; 250
     4ee:	53 e4       	ldi	r21, 0x43	; 67
     4f0:	0e 94 26 08 	call	0x104c	; 0x104c <__mulsf3>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e8       	ldi	r20, 0x80	; 128
     4fa:	5a e3       	ldi	r21, 0x3A	; 58
     4fc:	0e 94 26 08 	call	0x104c	; 0x104c <__mulsf3>
     500:	cc 0f       	add	r28, r28
     502:	dd 1f       	adc	r29, r29
     504:	c4 59       	subi	r28, 0x94	; 148
     506:	df 4f       	sbci	r29, 0xFF	; 255
     508:	0e 94 69 07 	call	0xed2	; 0xed2 <__fixunssfsi>
     50c:	79 83       	std	Y+1, r23	; 0x01
     50e:	68 83       	st	Y, r22
		temp_index++;
     510:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <temp_index>
     514:	8f 5f       	subi	r24, 0xFF	; 255
     516:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <temp_index>

		if(temp_index > 9)
     51a:	8a 30       	cpi	r24, 0x0A	; 10
     51c:	70 f0       	brcs	.+28     	; 0x53a <__vector_5+0xf0>
		{
			temp_index = 0;
     51e:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <temp_index>
			current_temp=calcualate_avg_temp(last_10_temp);
     522:	8c e6       	ldi	r24, 0x6C	; 108
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 a4 01 	call	0x348	; 0x348 <calcualate_avg_temp>
     52a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <current_temp>
			
			blink_7_segment ^= 1;
     52e:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <blink_7_segment>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	89 27       	eor	r24, r25
     536:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <blink_7_segment>
		}
		timer2_count = 0;
     53a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
     53e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
     542:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
     546:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>

	}
}
     54a:	ff 91       	pop	r31
     54c:	ef 91       	pop	r30
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	bf 91       	pop	r27
     554:	af 91       	pop	r26
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	7f 91       	pop	r23
     55c:	6f 91       	pop	r22
     55e:	5f 91       	pop	r21
     560:	4f 91       	pop	r20
     562:	3f 91       	pop	r19
     564:	2f 91       	pop	r18
     566:	0f 90       	pop	r0
     568:	0f be       	out	0x3f, r0	; 63
     56a:	0f 90       	pop	r0
     56c:	1f 90       	pop	r1
     56e:	18 95       	reti

00000570 <SEVSEG_Initialization>:
{
	DIO_SetPinValue(SEVSEG_CTRL_PORT, SEVSEG_PIN_DOT, SEVSEG_HIGH);
}
void SEVSEG_Dot_Disable(void)//Disable dot
{
	DIO_SetPinValue(SEVSEG_CTRL_PORT, SEVSEG_PIN_DOT, SEVSEG_LOW);
     570:	41 e0       	ldi	r20, 0x01	; 1
     572:	61 e0       	ldi	r22, 0x01	; 1
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_SetPinDirection>
     57a:	41 e0       	ldi	r20, 0x01	; 1
     57c:	62 e0       	ldi	r22, 0x02	; 2
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_SetPinDirection>
     584:	41 e0       	ldi	r20, 0x01	; 1
     586:	64 e0       	ldi	r22, 0x04	; 4
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_SetPinDirection>
     58e:	41 e0       	ldi	r20, 0x01	; 1
     590:	65 e0       	ldi	r22, 0x05	; 5
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_SetPinDirection>
     598:	41 e0       	ldi	r20, 0x01	; 1
     59a:	66 e0       	ldi	r22, 0x06	; 6
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_SetPinDirection>
     5a2:	41 e0       	ldi	r20, 0x01	; 1
     5a4:	67 e0       	ldi	r22, 0x07	; 7
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_SetPinDirection>
     5ac:	41 e0       	ldi	r20, 0x01	; 1
     5ae:	63 e0       	ldi	r22, 0x03	; 3
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_SetPinDirection>
     5b6:	08 95       	ret

000005b8 <SEVSEG_Enable1>:
     5b8:	41 e0       	ldi	r20, 0x01	; 1
     5ba:	61 e0       	ldi	r22, 0x01	; 1
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinValue>
     5c2:	08 95       	ret

000005c4 <SEVSEG_Disable1>:
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinValue>
     5ce:	08 95       	ret

000005d0 <SEVSEG_Enable2>:
     5d0:	41 e0       	ldi	r20, 0x01	; 1
     5d2:	62 e0       	ldi	r22, 0x02	; 2
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinValue>
     5da:	08 95       	ret

000005dc <SEVSEG_Disable2>:
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	62 e0       	ldi	r22, 0x02	; 2
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinValue>
     5e6:	08 95       	ret

000005e8 <SEVSEG_Display>:
}
void SEVSEG_Display(uint8_t number)
{
     5e8:	cf 93       	push	r28
	uint8_t num1 = number%10;
     5ea:	9d ec       	ldi	r25, 0xCD	; 205
     5ec:	89 9f       	mul	r24, r25
     5ee:	91 2d       	mov	r25, r1
     5f0:	11 24       	eor	r1, r1
     5f2:	29 2f       	mov	r18, r25
     5f4:	26 95       	lsr	r18
     5f6:	26 95       	lsr	r18
     5f8:	26 95       	lsr	r18
     5fa:	22 0f       	add	r18, r18
     5fc:	32 2f       	mov	r19, r18
     5fe:	33 0f       	add	r19, r19
     600:	33 0f       	add	r19, r19
     602:	23 0f       	add	r18, r19
     604:	82 1b       	sub	r24, r18
     606:	28 2f       	mov	r18, r24
	uint8_t num2 = number/10;
     608:	c9 2f       	mov	r28, r25
     60a:	c6 95       	lsr	r28
     60c:	c6 95       	lsr	r28
     60e:	c6 95       	lsr	r28
	PORTA = (num1 << 4);
     610:	22 95       	swap	r18
     612:	20 7f       	andi	r18, 0xF0	; 240
     614:	2b bb       	out	0x1b, r18	; 27
	SEVSEG_Enable1();
     616:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <SEVSEG_Enable1>
	SEVSEG_Disable2();
     61a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <SEVSEG_Disable2>
     61e:	8f e3       	ldi	r24, 0x3F	; 63
     620:	9c e9       	ldi	r25, 0x9C	; 156
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	f1 f7       	brne	.-4      	; 0x622 <SEVSEG_Display+0x3a>
     626:	00 c0       	rjmp	.+0      	; 0x628 <SEVSEG_Display+0x40>
     628:	00 00       	nop
	_delay_ms(10);
	PORTA = (num2 << 4);
     62a:	9c 2f       	mov	r25, r28
     62c:	92 95       	swap	r25
     62e:	90 7f       	andi	r25, 0xF0	; 240
     630:	9b bb       	out	0x1b, r25	; 27
	SEVSEG_Disable1();
     632:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <SEVSEG_Disable1>
	SEVSEG_Enable2();
     636:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <SEVSEG_Enable2>
     63a:	8f e3       	ldi	r24, 0x3F	; 63
     63c:	9c e9       	ldi	r25, 0x9C	; 156
     63e:	01 97       	sbiw	r24, 0x01	; 1
     640:	f1 f7       	brne	.-4      	; 0x63e <SEVSEG_Display+0x56>
     642:	00 c0       	rjmp	.+0      	; 0x644 <SEVSEG_Display+0x5c>
     644:	00 00       	nop
	_delay_ms(10);
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <BTN0_Initialization>:
#include "PushBTN0.h"


void BTN0_Initialization(void)
{
	DIO_SetPinDirection(BTN0_PORT, BTN0_PIN, BTN0_INP);
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_SetPinDirection>
	DIO_SetPinPullUp(BTN0_PORT , BTN0_PIN);
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinPullUp>
     65c:	08 95       	ret

0000065e <BTN0_Read>:

uint8_t BTN0_Read(void)
{
	uint8_t Btn = NPRESSED;
	uint8_t val = 0;
	val = DIO_ReadPinValue(BTN0_PORT, BTN0_PIN);
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	0e 94 9d 04 	call	0x93a	; 0x93a <DIO_ReadPinValue>
     666:	ef e3       	ldi	r30, 0x3F	; 63
     668:	fc e9       	ldi	r31, 0x9C	; 156
     66a:	31 97       	sbiw	r30, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <BTN0_Read+0xc>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <BTN0_Read+0x12>
     670:	00 00       	nop
	{
		Btn = DIO_ReadPinValue(BTN0_PORT, BTN0_PIN);
	}
	_delay_ms(10);
	return val;
}
     672:	08 95       	ret

00000674 <BTN1_Initialization>:
#include "PushBTN1.h"


void BTN1_Initialization(void)
{
	DIO_SetPinDirection(BTN1_PORT, BTN1_PIN, BTN1_INP);
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	66 e0       	ldi	r22, 0x06	; 6
     678:	83 e0       	ldi	r24, 0x03	; 3
     67a:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_SetPinDirection>
     67e:	08 95       	ret

00000680 <BTN1_Read>:

uint8_t BTN1_Read(void)
{
	uint8_t Btn = NPRESSED;
	uint8_t val = 0;
	val = DIO_ReadPinValue(BTN1_PORT, BTN1_PIN);
     680:	66 e0       	ldi	r22, 0x06	; 6
     682:	83 e0       	ldi	r24, 0x03	; 3
     684:	0e 94 9d 04 	call	0x93a	; 0x93a <DIO_ReadPinValue>
     688:	ef e3       	ldi	r30, 0x3F	; 63
     68a:	fc e9       	ldi	r31, 0x9C	; 156
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <BTN1_Read+0xc>
     690:	00 c0       	rjmp	.+0      	; 0x692 <BTN1_Read+0x12>
     692:	00 00       	nop
	{
		Btn = DIO_ReadPinValue(BTN1_PORT, BTN1_PIN);
	}
	_delay_ms(10);
	return val;
}
     694:	08 95       	ret

00000696 <LED0_Initialization>:
#include "LED0.h"

void LED0_Initialization(void)
{
	//SET_BIT(LED0_DDR, LED0);
	DIO_SetPinDirection(LED0_PORT, LED0, LED0_OUT);
     696:	41 e0       	ldi	r20, 0x01	; 1
     698:	62 e0       	ldi	r22, 0x02	; 2
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_SetPinDirection>
     6a0:	08 95       	ret

000006a2 <LED0_ON>:
}
void LED0_ON(void)
{
	//SET_BIT(LED0_PORT, LED0);
	DIO_SetPinValue(LED0_PORT, LED0, LED0_ONN);
     6a2:	41 e0       	ldi	r20, 0x01	; 1
     6a4:	62 e0       	ldi	r22, 0x02	; 2
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinValue>
     6ac:	08 95       	ret

000006ae <LED0_OFF>:
}
void LED0_OFF(void)
{
	//CLR_BIT(LED0_PORT, LED0);
	DIO_SetPinValue(LED0_PORT, LED0, LED0_OFFF);
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	62 e0       	ldi	r22, 0x02	; 2
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinValue>
     6b8:	08 95       	ret

000006ba <LED1_Initialization>:
 */ 
#include "LED1.h"

void LED1_Initialization(void)
{
	SET_BIT(LED1_DDR, LED1);
     6ba:	84 b3       	in	r24, 0x14	; 20
     6bc:	80 68       	ori	r24, 0x80	; 128
     6be:	84 bb       	out	0x14, r24	; 20
     6c0:	08 95       	ret

000006c2 <LED1_ON>:
}
void LED1_ON(void)
{
	SET_BIT(LED1_PORT, LED1);
     6c2:	85 b3       	in	r24, 0x15	; 21
     6c4:	80 68       	ori	r24, 0x80	; 128
     6c6:	85 bb       	out	0x15, r24	; 21
     6c8:	08 95       	ret

000006ca <LED1_OFF>:
}
void LED1_OFF(void)
{
	CLR_BIT(LED1_PORT, LED1);
     6ca:	85 b3       	in	r24, 0x15	; 21
     6cc:	8f 77       	andi	r24, 0x7F	; 127
     6ce:	85 bb       	out	0x15, r24	; 21
     6d0:	08 95       	ret

000006d2 <LED2_Initialization>:
 */ 
#include "LED2.h"

void LED2_Initialization(void)
{
	SET_BIT(LED2_DDR, LED2);
     6d2:	81 b3       	in	r24, 0x11	; 17
     6d4:	88 60       	ori	r24, 0x08	; 8
     6d6:	81 bb       	out	0x11, r24	; 17
     6d8:	08 95       	ret

000006da <LED2_ON>:
}
void LED2_ON(void)
{
	SET_BIT(LED2_PORT, LED2);
     6da:	82 b3       	in	r24, 0x12	; 18
     6dc:	88 60       	ori	r24, 0x08	; 8
     6de:	82 bb       	out	0x12, r24	; 18
     6e0:	08 95       	ret

000006e2 <LED2_OFF>:
}
void LED2_OFF(void)
{
	CLR_BIT(LED2_PORT, LED2);
     6e2:	82 b3       	in	r24, 0x12	; 18
     6e4:	87 7f       	andi	r24, 0xF7	; 247
     6e6:	82 bb       	out	0x12, r24	; 18
     6e8:	08 95       	ret

000006ea <Relay_Initialization>:
#include "Relay.h"


void Relay_Initialization(void)
{
	DIO_SetPinDirection(RELAY_PORT, RELAY_PIN, RELAY_OUT);
     6ea:	41 e0       	ldi	r20, 0x01	; 1
     6ec:	62 e0       	ldi	r22, 0x02	; 2
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_SetPinDirection>
     6f4:	08 95       	ret

000006f6 <Relay_ON>:
}
void Relay_ON(void)
{
	DIO_SetPinValue(RELAY_PORT, RELAY_PIN, RELAY_HIGH);
     6f6:	41 e0       	ldi	r20, 0x01	; 1
     6f8:	62 e0       	ldi	r22, 0x02	; 2
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinValue>
     700:	08 95       	ret

00000702 <Relay_OFF>:
}
void Relay_OFF(void)
{
	DIO_SetPinValue(RELAY_PORT, RELAY_PIN, RELAY_LOW);
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	62 e0       	ldi	r22, 0x02	; 2
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_SetPinValue>
     70c:	08 95       	ret

0000070e <ADC_Initialization>:
	/*
	1- Select voltage refernce
	2- Select left or right adjust
	3- Select chanel (1)
	*/
	switch(chanel)
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	88 30       	cpi	r24, 0x08	; 8
     712:	91 05       	cpc	r25, r1
     714:	20 f5       	brcc	.+72     	; 0x75e <ADC_Initialization+0x50>
     716:	fc 01       	movw	r30, r24
     718:	e6 5d       	subi	r30, 0xD6	; 214
     71a:	ff 4f       	sbci	r31, 0xFF	; 255
     71c:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__tablejump2__>
	{
		case ADC0:
		ADMUX |= 0b01000000;//0x40
     720:	87 b1       	in	r24, 0x07	; 7
     722:	80 64       	ori	r24, 0x40	; 64
     724:	87 b9       	out	0x07, r24	; 7
		break;
     726:	1b c0       	rjmp	.+54     	; 0x75e <ADC_Initialization+0x50>
		case ADC1:
		ADMUX |= 0b01000001;//0x41
     728:	87 b1       	in	r24, 0x07	; 7
     72a:	81 64       	ori	r24, 0x41	; 65
     72c:	87 b9       	out	0x07, r24	; 7
		break;
     72e:	17 c0       	rjmp	.+46     	; 0x75e <ADC_Initialization+0x50>
		case ADC2:
		ADMUX |= 0b01000010;//0x42
     730:	87 b1       	in	r24, 0x07	; 7
     732:	82 64       	ori	r24, 0x42	; 66
     734:	87 b9       	out	0x07, r24	; 7
		break;
     736:	13 c0       	rjmp	.+38     	; 0x75e <ADC_Initialization+0x50>
		case ADC3:
		ADMUX |= 0b01000011;//0x43
     738:	87 b1       	in	r24, 0x07	; 7
     73a:	83 64       	ori	r24, 0x43	; 67
     73c:	87 b9       	out	0x07, r24	; 7
		break;
     73e:	0f c0       	rjmp	.+30     	; 0x75e <ADC_Initialization+0x50>
		case ADC4:
		ADMUX |= 0b01000100;//0x44
     740:	87 b1       	in	r24, 0x07	; 7
     742:	84 64       	ori	r24, 0x44	; 68
     744:	87 b9       	out	0x07, r24	; 7
		break;
     746:	0b c0       	rjmp	.+22     	; 0x75e <ADC_Initialization+0x50>
		case ADC5:
		ADMUX |= 0b01000101;//0x45
     748:	87 b1       	in	r24, 0x07	; 7
     74a:	85 64       	ori	r24, 0x45	; 69
     74c:	87 b9       	out	0x07, r24	; 7
		break;
     74e:	07 c0       	rjmp	.+14     	; 0x75e <ADC_Initialization+0x50>
		case ADC6:
		ADMUX |= 0b01000110;//0x46
     750:	87 b1       	in	r24, 0x07	; 7
     752:	86 64       	ori	r24, 0x46	; 70
     754:	87 b9       	out	0x07, r24	; 7
		break;
     756:	03 c0       	rjmp	.+6      	; 0x75e <ADC_Initialization+0x50>
		case ADC7:
		ADMUX |= 0b01000111;//0x47
     758:	87 b1       	in	r24, 0x07	; 7
     75a:	87 64       	ori	r24, 0x47	; 71
     75c:	87 b9       	out	0x07, r24	; 7
	/*
	1- Auto trigger mode
	2- Select prescaler
	3- enable ADC
	*/
	ADCSRA |= 0b10100111;//0xA7
     75e:	86 b1       	in	r24, 0x06	; 6
     760:	87 6a       	ori	r24, 0xA7	; 167
     762:	86 b9       	out	0x06, r24	; 6
     764:	08 95       	ret

00000766 <ADC_Read>:
}

uint16_t ADC_Read(void)
{
	uint16_t data = 0;
	SET_BIT(ADCSRA, ADSC);
     766:	86 b1       	in	r24, 0x06	; 6
     768:	80 64       	ori	r24, 0x40	; 64
     76a:	86 b9       	out	0x06, r24	; 6
	while(GET_BIT(ADCSRA, ADIF) != 1);//wait until conversion finished
     76c:	34 9b       	sbis	0x06, 4	; 6
     76e:	fe cf       	rjmp	.-4      	; 0x76c <ADC_Read+0x6>
	data = ADC_DATA;
     770:	84 b1       	in	r24, 0x04	; 4
     772:	95 b1       	in	r25, 0x05	; 5
	return data;
     774:	08 95       	ret

00000776 <DIO_SetPinDirection>:
		break;
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
		break;
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
     776:	44 23       	and	r20, r20
     778:	19 f0       	breq	.+6      	; 0x780 <DIO_SetPinDirection+0xa>
     77a:	41 30       	cpi	r20, 0x01	; 1
     77c:	c9 f1       	breq	.+114    	; 0x7f0 <DIO_SetPinDirection+0x7a>
     77e:	08 95       	ret
     780:	81 30       	cpi	r24, 0x01	; 1
     782:	91 f0       	breq	.+36     	; 0x7a8 <DIO_SetPinDirection+0x32>
     784:	28 f0       	brcs	.+10     	; 0x790 <DIO_SetPinDirection+0x1a>
     786:	82 30       	cpi	r24, 0x02	; 2
     788:	d9 f0       	breq	.+54     	; 0x7c0 <DIO_SetPinDirection+0x4a>
     78a:	83 30       	cpi	r24, 0x03	; 3
     78c:	29 f1       	breq	.+74     	; 0x7d8 <DIO_SetPinDirection+0x62>
     78e:	08 95       	ret
     790:	2a b3       	in	r18, 0x1a	; 26
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	02 c0       	rjmp	.+4      	; 0x79c <DIO_SetPinDirection+0x26>
     798:	88 0f       	add	r24, r24
     79a:	99 1f       	adc	r25, r25
     79c:	6a 95       	dec	r22
     79e:	e2 f7       	brpl	.-8      	; 0x798 <DIO_SetPinDirection+0x22>
     7a0:	80 95       	com	r24
     7a2:	82 23       	and	r24, r18
     7a4:	8a bb       	out	0x1a, r24	; 26
     7a6:	08 95       	ret
     7a8:	27 b3       	in	r18, 0x17	; 23
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <DIO_SetPinDirection+0x3e>
     7b0:	88 0f       	add	r24, r24
     7b2:	99 1f       	adc	r25, r25
     7b4:	6a 95       	dec	r22
     7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <DIO_SetPinDirection+0x3a>
     7b8:	80 95       	com	r24
     7ba:	82 23       	and	r24, r18
     7bc:	87 bb       	out	0x17, r24	; 23
     7be:	08 95       	ret
     7c0:	24 b3       	in	r18, 0x14	; 20
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <DIO_SetPinDirection+0x56>
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	6a 95       	dec	r22
     7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <DIO_SetPinDirection+0x52>
     7d0:	80 95       	com	r24
     7d2:	82 23       	and	r24, r18
     7d4:	84 bb       	out	0x14, r24	; 20
     7d6:	08 95       	ret
     7d8:	21 b3       	in	r18, 0x11	; 17
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <DIO_SetPinDirection+0x6e>
     7e0:	88 0f       	add	r24, r24
     7e2:	99 1f       	adc	r25, r25
     7e4:	6a 95       	dec	r22
     7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <DIO_SetPinDirection+0x6a>
     7e8:	80 95       	com	r24
     7ea:	82 23       	and	r24, r18
     7ec:	81 bb       	out	0x11, r24	; 17
     7ee:	08 95       	ret
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	89 f0       	breq	.+34     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     7f4:	28 f0       	brcs	.+10     	; 0x800 <__DATA_REGION_LENGTH__>
     7f6:	82 30       	cpi	r24, 0x02	; 2
     7f8:	c9 f0       	breq	.+50     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     7fa:	83 30       	cpi	r24, 0x03	; 3
     7fc:	11 f1       	breq	.+68     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     7fe:	08 95       	ret
     800:	2a b3       	in	r18, 0x1a	; 26
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     808:	88 0f       	add	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	6a 95       	dec	r22
     80e:	e2 f7       	brpl	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     810:	82 2b       	or	r24, r18
     812:	8a bb       	out	0x1a, r24	; 26
     814:	08 95       	ret
     816:	27 b3       	in	r18, 0x17	; 23
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	02 c0       	rjmp	.+4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     81e:	88 0f       	add	r24, r24
     820:	99 1f       	adc	r25, r25
     822:	6a 95       	dec	r22
     824:	e2 f7       	brpl	.-8      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     826:	82 2b       	or	r24, r18
     828:	87 bb       	out	0x17, r24	; 23
     82a:	08 95       	ret
     82c:	24 b3       	in	r18, 0x14	; 20
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	02 c0       	rjmp	.+4      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     834:	88 0f       	add	r24, r24
     836:	99 1f       	adc	r25, r25
     838:	6a 95       	dec	r22
     83a:	e2 f7       	brpl	.-8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     83c:	82 2b       	or	r24, r18
     83e:	84 bb       	out	0x14, r24	; 20
     840:	08 95       	ret
     842:	21 b3       	in	r18, 0x11	; 17
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	02 c0       	rjmp	.+4      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     84a:	88 0f       	add	r24, r24
     84c:	99 1f       	adc	r25, r25
     84e:	6a 95       	dec	r22
     850:	e2 f7       	brpl	.-8      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     852:	82 2b       	or	r24, r18
     854:	81 bb       	out	0x11, r24	; 17
     856:	08 95       	ret

00000858 <DIO_SetPinValue>:
     858:	44 23       	and	r20, r20
     85a:	19 f0       	breq	.+6      	; 0x862 <__stack+0x3>
     85c:	41 30       	cpi	r20, 0x01	; 1
     85e:	c9 f1       	breq	.+114    	; 0x8d2 <__stack+0x73>
     860:	08 95       	ret
     862:	81 30       	cpi	r24, 0x01	; 1
     864:	91 f0       	breq	.+36     	; 0x88a <__stack+0x2b>
     866:	28 f0       	brcs	.+10     	; 0x872 <__stack+0x13>
     868:	82 30       	cpi	r24, 0x02	; 2
     86a:	d9 f0       	breq	.+54     	; 0x8a2 <__stack+0x43>
     86c:	83 30       	cpi	r24, 0x03	; 3
     86e:	29 f1       	breq	.+74     	; 0x8ba <__stack+0x5b>
     870:	08 95       	ret
     872:	2b b3       	in	r18, 0x1b	; 27
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	6a 95       	dec	r22
     880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
     882:	80 95       	com	r24
     884:	82 23       	and	r24, r18
     886:	8b bb       	out	0x1b, r24	; 27
     888:	08 95       	ret
     88a:	28 b3       	in	r18, 0x18	; 24
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	02 c0       	rjmp	.+4      	; 0x896 <__stack+0x37>
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	6a 95       	dec	r22
     898:	e2 f7       	brpl	.-8      	; 0x892 <__stack+0x33>
     89a:	80 95       	com	r24
     89c:	82 23       	and	r24, r18
     89e:	88 bb       	out	0x18, r24	; 24
     8a0:	08 95       	ret
     8a2:	25 b3       	in	r18, 0x15	; 21
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <__stack+0x4f>
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	6a 95       	dec	r22
     8b0:	e2 f7       	brpl	.-8      	; 0x8aa <__stack+0x4b>
     8b2:	80 95       	com	r24
     8b4:	82 23       	and	r24, r18
     8b6:	85 bb       	out	0x15, r24	; 21
     8b8:	08 95       	ret
     8ba:	22 b3       	in	r18, 0x12	; 18
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <__stack+0x67>
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	6a 95       	dec	r22
     8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <__stack+0x63>
     8ca:	80 95       	com	r24
     8cc:	82 23       	and	r24, r18
     8ce:	82 bb       	out	0x12, r24	; 18
     8d0:	08 95       	ret
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	89 f0       	breq	.+34     	; 0x8f8 <__stack+0x99>
     8d6:	28 f0       	brcs	.+10     	; 0x8e2 <__stack+0x83>
     8d8:	82 30       	cpi	r24, 0x02	; 2
     8da:	c9 f0       	breq	.+50     	; 0x90e <__stack+0xaf>
     8dc:	83 30       	cpi	r24, 0x03	; 3
     8de:	11 f1       	breq	.+68     	; 0x924 <__stack+0xc5>
     8e0:	08 95       	ret
     8e2:	2b b3       	in	r18, 0x1b	; 27
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__stack+0x8f>
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	6a 95       	dec	r22
     8f0:	e2 f7       	brpl	.-8      	; 0x8ea <__stack+0x8b>
     8f2:	82 2b       	or	r24, r18
     8f4:	8b bb       	out	0x1b, r24	; 27
     8f6:	08 95       	ret
     8f8:	28 b3       	in	r18, 0x18	; 24
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <__stack+0xa5>
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	6a 95       	dec	r22
     906:	e2 f7       	brpl	.-8      	; 0x900 <__stack+0xa1>
     908:	82 2b       	or	r24, r18
     90a:	88 bb       	out	0x18, r24	; 24
     90c:	08 95       	ret
     90e:	25 b3       	in	r18, 0x15	; 21
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	02 c0       	rjmp	.+4      	; 0x91a <__stack+0xbb>
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	6a 95       	dec	r22
     91c:	e2 f7       	brpl	.-8      	; 0x916 <__stack+0xb7>
     91e:	82 2b       	or	r24, r18
     920:	85 bb       	out	0x15, r24	; 21
     922:	08 95       	ret
     924:	22 b3       	in	r18, 0x12	; 18
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0xd1>
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	6a 95       	dec	r22
     932:	e2 f7       	brpl	.-8      	; 0x92c <__stack+0xcd>
     934:	82 2b       	or	r24, r18
     936:	82 bb       	out	0x12, r24	; 18
     938:	08 95       	ret

0000093a <DIO_ReadPinValue>:
     93a:	ef e3       	ldi	r30, 0x3F	; 63
     93c:	fc e9       	ldi	r31, 0x9C	; 156
     93e:	31 97       	sbiw	r30, 0x01	; 1
     940:	f1 f7       	brne	.-4      	; 0x93e <DIO_ReadPinValue+0x4>
     942:	00 c0       	rjmp	.+0      	; 0x944 <DIO_ReadPinValue+0xa>
     944:	00 00       	nop
//If pin is defined as input
uint8_t DIO_ReadPinValue (Port port, Pin pin)
{
	uint8_t reading = 0;
	_delay_ms(10);
	switch (port)
     946:	81 30       	cpi	r24, 0x01	; 1
     948:	79 f0       	breq	.+30     	; 0x968 <DIO_ReadPinValue+0x2e>
     94a:	28 f0       	brcs	.+10     	; 0x956 <DIO_ReadPinValue+0x1c>
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	a9 f0       	breq	.+42     	; 0x97a <DIO_ReadPinValue+0x40>
     950:	83 30       	cpi	r24, 0x03	; 3
     952:	e1 f0       	breq	.+56     	; 0x98c <DIO_ReadPinValue+0x52>
     954:	24 c0       	rjmp	.+72     	; 0x99e <DIO_ReadPinValue+0x64>
	{
		case DIO_PORTA:
		reading = GET_BIT(PINA, pin);
     956:	89 b3       	in	r24, 0x19	; 25
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	02 c0       	rjmp	.+4      	; 0x960 <DIO_ReadPinValue+0x26>
     95c:	95 95       	asr	r25
     95e:	87 95       	ror	r24
     960:	6a 95       	dec	r22
     962:	e2 f7       	brpl	.-8      	; 0x95c <DIO_ReadPinValue+0x22>
     964:	81 70       	andi	r24, 0x01	; 1
		break;
     966:	08 95       	ret
		case DIO_PORTB:
		reading = GET_BIT(PINB, pin);
     968:	86 b3       	in	r24, 0x16	; 22
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	02 c0       	rjmp	.+4      	; 0x972 <DIO_ReadPinValue+0x38>
     96e:	95 95       	asr	r25
     970:	87 95       	ror	r24
     972:	6a 95       	dec	r22
     974:	e2 f7       	brpl	.-8      	; 0x96e <DIO_ReadPinValue+0x34>
     976:	81 70       	andi	r24, 0x01	; 1
		break;
     978:	08 95       	ret
		case DIO_PORTC:
		reading = GET_BIT(PINC, pin);
     97a:	83 b3       	in	r24, 0x13	; 19
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	02 c0       	rjmp	.+4      	; 0x984 <DIO_ReadPinValue+0x4a>
     980:	95 95       	asr	r25
     982:	87 95       	ror	r24
     984:	6a 95       	dec	r22
     986:	e2 f7       	brpl	.-8      	; 0x980 <DIO_ReadPinValue+0x46>
     988:	81 70       	andi	r24, 0x01	; 1
		break;
     98a:	08 95       	ret
		case DIO_PORTD:
		reading = GET_BIT(PIND, pin);
     98c:	80 b3       	in	r24, 0x10	; 16
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	02 c0       	rjmp	.+4      	; 0x996 <DIO_ReadPinValue+0x5c>
     992:	95 95       	asr	r25
     994:	87 95       	ror	r24
     996:	6a 95       	dec	r22
     998:	e2 f7       	brpl	.-8      	; 0x992 <DIO_ReadPinValue+0x58>
     99a:	81 70       	andi	r24, 0x01	; 1
		break;
     99c:	08 95       	ret
	}
}
//If pin is defined as input
uint8_t DIO_ReadPinValue (Port port, Pin pin)
{
	uint8_t reading = 0;
     99e:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTD:
		reading = GET_BIT(PIND, pin);
		break;
	}
	return reading;
}
     9a0:	08 95       	ret

000009a2 <DIO_SetPinPullUp>:
void DIO_SetPinPullUp (Port port, Pin pin)
{
	switch (port)
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	89 f0       	breq	.+34     	; 0x9c8 <DIO_SetPinPullUp+0x26>
     9a6:	28 f0       	brcs	.+10     	; 0x9b2 <DIO_SetPinPullUp+0x10>
     9a8:	82 30       	cpi	r24, 0x02	; 2
     9aa:	c9 f0       	breq	.+50     	; 0x9de <DIO_SetPinPullUp+0x3c>
     9ac:	83 30       	cpi	r24, 0x03	; 3
     9ae:	11 f1       	breq	.+68     	; 0x9f4 <DIO_SetPinPullUp+0x52>
     9b0:	08 95       	ret
	{
		case DIO_PORTA:
		SET_BIT(PORTA, pin);
     9b2:	2b b3       	in	r18, 0x1b	; 27
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <DIO_SetPinPullUp+0x1c>
     9ba:	88 0f       	add	r24, r24
     9bc:	99 1f       	adc	r25, r25
     9be:	6a 95       	dec	r22
     9c0:	e2 f7       	brpl	.-8      	; 0x9ba <DIO_SetPinPullUp+0x18>
     9c2:	82 2b       	or	r24, r18
     9c4:	8b bb       	out	0x1b, r24	; 27
		break;
     9c6:	08 95       	ret
		case DIO_PORTB:
		SET_BIT(PORTB, pin);
     9c8:	28 b3       	in	r18, 0x18	; 24
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <DIO_SetPinPullUp+0x32>
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	6a 95       	dec	r22
     9d6:	e2 f7       	brpl	.-8      	; 0x9d0 <DIO_SetPinPullUp+0x2e>
     9d8:	82 2b       	or	r24, r18
     9da:	88 bb       	out	0x18, r24	; 24
		break;
     9dc:	08 95       	ret
		case DIO_PORTC:
		SET_BIT(PORTC, pin);
     9de:	25 b3       	in	r18, 0x15	; 21
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <DIO_SetPinPullUp+0x48>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	6a 95       	dec	r22
     9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <DIO_SetPinPullUp+0x44>
     9ee:	82 2b       	or	r24, r18
     9f0:	85 bb       	out	0x15, r24	; 21
		break;
     9f2:	08 95       	ret
		case DIO_PORTD:
		SET_BIT(PORTD, pin);
     9f4:	22 b3       	in	r18, 0x12	; 18
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	02 c0       	rjmp	.+4      	; 0xa00 <DIO_SetPinPullUp+0x5e>
     9fc:	88 0f       	add	r24, r24
     9fe:	99 1f       	adc	r25, r25
     a00:	6a 95       	dec	r22
     a02:	e2 f7       	brpl	.-8      	; 0x9fc <DIO_SetPinPullUp+0x5a>
     a04:	82 2b       	or	r24, r18
     a06:	82 bb       	out	0x12, r24	; 18
     a08:	08 95       	ret

00000a0a <EEPROM_Write>:
#include "EEPROM.h"

void EEPROM_Write(uint16_t address , uint8_t data)
{
	// Wait for completion of previous write 
	while(EECR & (1<<EEWE));
     a0a:	e1 99       	sbic	0x1c, 1	; 28
     a0c:	fe cf       	rjmp	.-4      	; 0xa0a <EEPROM_Write>
	/* Set up address and data registers */
	EEAR = address;
     a0e:	9f bb       	out	0x1f, r25	; 31
     a10:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
     a12:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     a14:	8c b3       	in	r24, 0x1c	; 28
     a16:	84 60       	ori	r24, 0x04	; 4
     a18:	8c bb       	out	0x1c, r24	; 28
	/* Start EEPROM write by setting EEWE */
	EECR |= (1<<EEWE);
     a1a:	8c b3       	in	r24, 0x1c	; 28
     a1c:	82 60       	ori	r24, 0x02	; 2
     a1e:	8c bb       	out	0x1c, r24	; 28
     a20:	08 95       	ret

00000a22 <EEPROM_Read>:
}

uint8_t EEPROM_Read(uint16_t adderss)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     a22:	e1 99       	sbic	0x1c, 1	; 28
     a24:	fe cf       	rjmp	.-4      	; 0xa22 <EEPROM_Read>
	/* Set up address register */
	EEAR = adderss;
     a26:	9f bb       	out	0x1f, r25	; 31
     a28:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1<<EERE);
     a2a:	8c b3       	in	r24, 0x1c	; 28
     a2c:	81 60       	ori	r24, 0x01	; 1
     a2e:	8c bb       	out	0x1c, r24	; 28
	/* Return data from data register */
	return EEDR;
     a30:	8d b3       	in	r24, 0x1d	; 29
     a32:	08 95       	ret

00000a34 <Interrupt_Initialization>:
*/

void Interrupt_Initialization(Interrupt_Signal_Pin pin)
{
	//Define Direction as input
	CLR_BIT(DDRD, PD2);
     a34:	91 b3       	in	r25, 0x11	; 17
     a36:	9b 7f       	andi	r25, 0xFB	; 251
     a38:	91 bb       	out	0x11, r25	; 17
	CLR_BIT(DDRD, PD3);
     a3a:	91 b3       	in	r25, 0x11	; 17
     a3c:	97 7f       	andi	r25, 0xF7	; 247
     a3e:	91 bb       	out	0x11, r25	; 17
	CLR_BIT(DDRD, PB2);
     a40:	91 b3       	in	r25, 0x11	; 17
     a42:	9b 7f       	andi	r25, 0xFB	; 251
     a44:	91 bb       	out	0x11, r25	; 17
	//Enable Global interrupt (Apartment Door)
	//===============================================================
	#if Global_INTERRUPT_STATUS == GLOBAL_EN
	sei();
     a46:	78 94       	sei
	//CLR_BIT(SREG, 7);
	#else
	#warning This is invalid choice
	#endif
	//==============================================================
	if(pin == INT0_Signal)
     a48:	81 11       	cpse	r24, r1
     a4a:	0a c0       	rjmp	.+20     	; 0xa60 <Interrupt_Initialization+0x2c>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT0);
     a4c:	8b b7       	in	r24, 0x3b	; 59
     a4e:	80 64       	ori	r24, 0x40	; 64
     a50:	8b bf       	out	0x3b, r24	; 59
		#elif Interrupt_SENSE == HIGH_SIGNAL
		CLR_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);
		#elif Interrupt_SENSE == Falling_SIGNAL
		SET_BIT(MCUCR, ISC01);CLR_BIT(MCUCR, ISC00);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);
     a52:	85 b7       	in	r24, 0x35	; 53
     a54:	82 60       	ori	r24, 0x02	; 2
     a56:	85 bf       	out	0x35, r24	; 53
     a58:	85 b7       	in	r24, 0x35	; 53
     a5a:	81 60       	ori	r24, 0x01	; 1
     a5c:	85 bf       	out	0x35, r24	; 53
     a5e:	08 95       	ret
		#else
		#warning This is invalid
		#endif
	}
	else if(pin == INT1_Signal)
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	51 f4       	brne	.+20     	; 0xa78 <Interrupt_Initialization+0x44>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT1);
     a64:	8b b7       	in	r24, 0x3b	; 59
     a66:	80 68       	ori	r24, 0x80	; 128
     a68:	8b bf       	out	0x3b, r24	; 59
		#elif Interrupt_SENSE == HIGH_SIGNAL
		CLR_BIT(MCUCR, ISC11);SET_BIT(MCUCR, ISC10);
		#elif Interrupt_SENSE == Falling_SIGNAL
		SET_BIT(MCUCR, ISC11);CLR_BIT(MCUCR, ISC10);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCR, ISC11);SET_BIT(MCUCR, ISC10);
     a6a:	85 b7       	in	r24, 0x35	; 53
     a6c:	88 60       	ori	r24, 0x08	; 8
     a6e:	85 bf       	out	0x35, r24	; 53
     a70:	85 b7       	in	r24, 0x35	; 53
     a72:	84 60       	ori	r24, 0x04	; 4
     a74:	85 bf       	out	0x35, r24	; 53
     a76:	08 95       	ret
		#else
		#warning This is invalid
		#endif
	}
	else if(pin == INT2_Signal)
     a78:	82 30       	cpi	r24, 0x02	; 2
     a7a:	31 f4       	brne	.+12     	; 0xa88 <Interrupt_Initialization+0x54>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT2);
     a7c:	8b b7       	in	r24, 0x3b	; 59
     a7e:	80 62       	ori	r24, 0x20	; 32
     a80:	8b bf       	out	0x3b, r24	; 59
		#if Interrupt_SENSE == Falling_SIGNAL
		CLR_BIT(MCUCSR, ISC2);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCSR, ISC2);
     a82:	84 b7       	in	r24, 0x34	; 52
     a84:	80 64       	ori	r24, 0x40	; 64
     a86:	84 bf       	out	0x34, r24	; 52
     a88:	08 95       	ret

00000a8a <Timer0_Start>:
			while(GET_BIT(TIFR, OCF0) != 1);//Wait until raise flag
			SET_BIT(TIFR, OCF0);//Clear flag
			counter++;//Increment counter
		}
	}
}
     a8a:	83 30       	cpi	r24, 0x03	; 3
     a8c:	61 f1       	breq	.+88     	; 0xae6 <Timer0_Start+0x5c>
     a8e:	28 f4       	brcc	.+10     	; 0xa9a <Timer0_Start+0x10>
     a90:	81 30       	cpi	r24, 0x01	; 1
     a92:	49 f0       	breq	.+18     	; 0xaa6 <Timer0_Start+0x1c>
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	b9 f0       	breq	.+46     	; 0xac6 <Timer0_Start+0x3c>
     a98:	08 95       	ret
     a9a:	84 30       	cpi	r24, 0x04	; 4
     a9c:	a1 f1       	breq	.+104    	; 0xb06 <Timer0_Start+0x7c>
     a9e:	85 30       	cpi	r24, 0x05	; 5
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <Timer0_Start+0x1a>
     aa2:	41 c0       	rjmp	.+130    	; 0xb26 <Timer0_Start+0x9c>
     aa4:	08 95       	ret
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <_Prescaler+0x1>
     aae:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <_Prescaler>
     ab2:	83 b7       	in	r24, 0x33	; 51
     ab4:	8b 7f       	andi	r24, 0xFB	; 251
     ab6:	83 bf       	out	0x33, r24	; 51
     ab8:	83 b7       	in	r24, 0x33	; 51
     aba:	8d 7f       	andi	r24, 0xFD	; 253
     abc:	83 bf       	out	0x33, r24	; 51
     abe:	83 b7       	in	r24, 0x33	; 51
     ac0:	81 60       	ori	r24, 0x01	; 1
     ac2:	83 bf       	out	0x33, r24	; 51
     ac4:	08 95       	ret
     ac6:	88 e0       	ldi	r24, 0x08	; 8
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <_Prescaler+0x1>
     ace:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <_Prescaler>
     ad2:	83 b7       	in	r24, 0x33	; 51
     ad4:	8b 7f       	andi	r24, 0xFB	; 251
     ad6:	83 bf       	out	0x33, r24	; 51
     ad8:	83 b7       	in	r24, 0x33	; 51
     ada:	82 60       	ori	r24, 0x02	; 2
     adc:	83 bf       	out	0x33, r24	; 51
     ade:	83 b7       	in	r24, 0x33	; 51
     ae0:	8e 7f       	andi	r24, 0xFE	; 254
     ae2:	83 bf       	out	0x33, r24	; 51
     ae4:	08 95       	ret
     ae6:	80 e4       	ldi	r24, 0x40	; 64
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <_Prescaler+0x1>
     aee:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <_Prescaler>
     af2:	83 b7       	in	r24, 0x33	; 51
     af4:	8b 7f       	andi	r24, 0xFB	; 251
     af6:	83 bf       	out	0x33, r24	; 51
     af8:	83 b7       	in	r24, 0x33	; 51
     afa:	82 60       	ori	r24, 0x02	; 2
     afc:	83 bf       	out	0x33, r24	; 51
     afe:	83 b7       	in	r24, 0x33	; 51
     b00:	81 60       	ori	r24, 0x01	; 1
     b02:	83 bf       	out	0x33, r24	; 51
     b04:	08 95       	ret
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <_Prescaler+0x1>
     b0e:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <_Prescaler>
     b12:	83 b7       	in	r24, 0x33	; 51
     b14:	84 60       	ori	r24, 0x04	; 4
     b16:	83 bf       	out	0x33, r24	; 51
     b18:	83 b7       	in	r24, 0x33	; 51
     b1a:	8d 7f       	andi	r24, 0xFD	; 253
     b1c:	83 bf       	out	0x33, r24	; 51
     b1e:	83 b7       	in	r24, 0x33	; 51
     b20:	8e 7f       	andi	r24, 0xFE	; 254
     b22:	83 bf       	out	0x33, r24	; 51
     b24:	08 95       	ret
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	94 e0       	ldi	r25, 0x04	; 4
     b2a:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <_Prescaler+0x1>
     b2e:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <_Prescaler>
     b32:	83 b7       	in	r24, 0x33	; 51
     b34:	84 60       	ori	r24, 0x04	; 4
     b36:	83 bf       	out	0x33, r24	; 51
     b38:	83 b7       	in	r24, 0x33	; 51
     b3a:	8d 7f       	andi	r24, 0xFD	; 253
     b3c:	83 bf       	out	0x33, r24	; 51
     b3e:	83 b7       	in	r24, 0x33	; 51
     b40:	81 60       	ori	r24, 0x01	; 1
     b42:	83 bf       	out	0x33, r24	; 51
     b44:	08 95       	ret

00000b46 <Timer0_Stop>:
     b46:	83 b7       	in	r24, 0x33	; 51
     b48:	8b 7f       	andi	r24, 0xFB	; 251
     b4a:	83 bf       	out	0x33, r24	; 51
     b4c:	83 b7       	in	r24, 0x33	; 51
     b4e:	8d 7f       	andi	r24, 0xFD	; 253
     b50:	83 bf       	out	0x33, r24	; 51
     b52:	83 b7       	in	r24, 0x33	; 51
     b54:	8e 7f       	andi	r24, 0xFE	; 254
     b56:	83 bf       	out	0x33, r24	; 51
     b58:	08 95       	ret

00000b5a <Timer0_WithInterrupt_Initialization>:
uint32_t Number_CTC = 0;
uint32_t Init_Value = 0;

void Timer0_WithInterrupt_Initialization(Timer0_Mode mode, Timer0_Pin_Mode pin)
{
	cli();//Close global interrupt
     b5a:	f8 94       	cli
	switch(mode)//Chose Mode
     b5c:	88 23       	and	r24, r24
     b5e:	19 f0       	breq	.+6      	; 0xb66 <Timer0_WithInterrupt_Initialization+0xc>
     b60:	82 30       	cpi	r24, 0x02	; 2
     b62:	59 f0       	breq	.+22     	; 0xb7a <Timer0_WithInterrupt_Initialization+0x20>
     b64:	13 c0       	rjmp	.+38     	; 0xb8c <Timer0_WithInterrupt_Initialization+0x32>
	{
		case Normal_Mode:
		CLR_BIT(TCCR0, WGM01);CLR_BIT(TCCR0, WGM00);
     b66:	83 b7       	in	r24, 0x33	; 51
     b68:	87 7f       	andi	r24, 0xF7	; 247
     b6a:	83 bf       	out	0x33, r24	; 51
     b6c:	83 b7       	in	r24, 0x33	; 51
     b6e:	8f 7b       	andi	r24, 0xBF	; 191
     b70:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TIMSK, TOIE0);//Open OVF interrupt
     b72:	89 b7       	in	r24, 0x39	; 57
     b74:	81 60       	ori	r24, 0x01	; 1
     b76:	89 bf       	out	0x39, r24	; 57
		break;
     b78:	09 c0       	rjmp	.+18     	; 0xb8c <Timer0_WithInterrupt_Initialization+0x32>
		case CTC_Mode:
		SET_BIT(TCCR0, WGM01);CLR_BIT(TCCR0, WGM00);
     b7a:	83 b7       	in	r24, 0x33	; 51
     b7c:	88 60       	ori	r24, 0x08	; 8
     b7e:	83 bf       	out	0x33, r24	; 51
     b80:	83 b7       	in	r24, 0x33	; 51
     b82:	8f 7b       	andi	r24, 0xBF	; 191
     b84:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TIMSK, OCIE0);//Open CTC Interrupt
     b86:	89 b7       	in	r24, 0x39	; 57
     b88:	82 60       	ori	r24, 0x02	; 2
     b8a:	89 bf       	out	0x39, r24	; 57
		case PWM_PhaseCorrect:
		break;
		case PWM_Fast:
		break;
	}
	switch(pin)//Output pin mode
     b8c:	61 30       	cpi	r22, 0x01	; 1
     b8e:	69 f0       	breq	.+26     	; 0xbaa <Timer0_WithInterrupt_Initialization+0x50>
     b90:	28 f0       	brcs	.+10     	; 0xb9c <Timer0_WithInterrupt_Initialization+0x42>
     b92:	62 30       	cpi	r22, 0x02	; 2
     b94:	89 f0       	breq	.+34     	; 0xbb8 <Timer0_WithInterrupt_Initialization+0x5e>
     b96:	63 30       	cpi	r22, 0x03	; 3
     b98:	b1 f0       	breq	.+44     	; 0xbc6 <Timer0_WithInterrupt_Initialization+0x6c>
     b9a:	1b c0       	rjmp	.+54     	; 0xbd2 <Timer0_WithInterrupt_Initialization+0x78>
	{
		case Pin_disconnected:
		CLR_BIT(TCCR0, COM01);CLR_BIT(TCCR0, COM00);
     b9c:	83 b7       	in	r24, 0x33	; 51
     b9e:	8f 7d       	andi	r24, 0xDF	; 223
     ba0:	83 bf       	out	0x33, r24	; 51
     ba2:	83 b7       	in	r24, 0x33	; 51
     ba4:	8f 7e       	andi	r24, 0xEF	; 239
     ba6:	83 bf       	out	0x33, r24	; 51
		break;
     ba8:	14 c0       	rjmp	.+40     	; 0xbd2 <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Toggle:
		CLR_BIT(TCCR0, COM01);SET_BIT(TCCR0, COM00);
     baa:	83 b7       	in	r24, 0x33	; 51
     bac:	8f 7d       	andi	r24, 0xDF	; 223
     bae:	83 bf       	out	0x33, r24	; 51
     bb0:	83 b7       	in	r24, 0x33	; 51
     bb2:	80 61       	ori	r24, 0x10	; 16
     bb4:	83 bf       	out	0x33, r24	; 51
		break;
     bb6:	0d c0       	rjmp	.+26     	; 0xbd2 <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Clear:
		SET_BIT(TCCR0, COM01);CLR_BIT(TCCR0, COM00);
     bb8:	83 b7       	in	r24, 0x33	; 51
     bba:	80 62       	ori	r24, 0x20	; 32
     bbc:	83 bf       	out	0x33, r24	; 51
     bbe:	83 b7       	in	r24, 0x33	; 51
     bc0:	8f 7e       	andi	r24, 0xEF	; 239
     bc2:	83 bf       	out	0x33, r24	; 51
		break;
     bc4:	06 c0       	rjmp	.+12     	; 0xbd2 <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Set:
		SET_BIT(TCCR0, COM01);SET_BIT(TCCR0, COM00);
     bc6:	83 b7       	in	r24, 0x33	; 51
     bc8:	80 62       	ori	r24, 0x20	; 32
     bca:	83 bf       	out	0x33, r24	; 51
     bcc:	83 b7       	in	r24, 0x33	; 51
     bce:	80 61       	ori	r24, 0x10	; 16
     bd0:	83 bf       	out	0x33, r24	; 51
		break;
	}
	sei();//Enable global interrupt
     bd2:	78 94       	sei
     bd4:	08 95       	ret

00000bd6 <Timer0_WithInterrupt_SetDelay>:
}
void Timer0_WithInterrupt_SetDelay(Timer0_Mode mode, uint32_t delay, uint8_t top)
{
     bd6:	0f 93       	push	r16
	if(mode == Normal_Mode)
     bd8:	81 11       	cpse	r24, r1
     bda:	37 c0       	rjmp	.+110    	; 0xc4a <Timer0_WithInterrupt_SetDelay+0x74>
	{
		uint8_t Tick = ( 1 * _Prescaler) / Frequency;
     bdc:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <_Prescaler>
     be0:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <_Prescaler+0x1>
     be4:	f9 01       	movw	r30, r18
     be6:	f2 95       	swap	r31
     be8:	e2 95       	swap	r30
     bea:	ef 70       	andi	r30, 0x0F	; 15
     bec:	ef 27       	eor	r30, r31
     bee:	ff 70       	andi	r31, 0x0F	; 15
     bf0:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     bf2:	a8 ee       	ldi	r26, 0xE8	; 232
     bf4:	b3 e0       	ldi	r27, 0x03	; 3
     bf6:	9a 01       	movw	r18, r20
     bf8:	ab 01       	movw	r20, r22
     bfa:	0e 94 ca 08 	call	0x1194	; 0x1194 <__muluhisi3>
     bfe:	2e 2f       	mov	r18, r30
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	0e 94 93 08 	call	0x1126	; 0x1126 <__udivmodsi4>
		Number_OVF = count / Bits;
     c0a:	bb 27       	eor	r27, r27
     c0c:	a5 2f       	mov	r26, r21
     c0e:	94 2f       	mov	r25, r20
     c10:	83 2f       	mov	r24, r19
		Number_OVF ++;
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	a1 1d       	adc	r26, r1
     c16:	b1 1d       	adc	r27, r1
     c18:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <Number_OVF>
     c1c:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <Number_OVF+0x1>
     c20:	a0 93 90 00 	sts	0x0090, r26	; 0x800090 <Number_OVF+0x2>
     c24:	b0 93 91 00 	sts	0x0091, r27	; 0x800091 <Number_OVF+0x3>
		Init_Value = Bits - (count % Bits);
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	82 1b       	sub	r24, r18
     c32:	91 09       	sbc	r25, r1
     c34:	a1 09       	sbc	r26, r1
     c36:	b1 09       	sbc	r27, r1
     c38:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <Init_Value>
     c3c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <Init_Value+0x1>
     c40:	a0 93 88 00 	sts	0x0088, r26	; 0x800088 <Init_Value+0x2>
     c44:	b0 93 89 00 	sts	0x0089, r27	; 0x800089 <Init_Value+0x3>
		return;
     c48:	30 c0       	rjmp	.+96     	; 0xcaa <Timer0_WithInterrupt_SetDelay+0xd4>
	}
	else if(mode == CTC_Mode)
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	71 f5       	brne	.+92     	; 0xcaa <Timer0_WithInterrupt_SetDelay+0xd4>
	{
		OCR0 = top;
     c4e:	2c bf       	out	0x3c, r18	; 60
		uint8_t Tick = ( 1 * _Prescaler) / Frequency;
     c50:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <_Prescaler>
     c54:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <_Prescaler+0x1>
     c58:	f9 01       	movw	r30, r18
     c5a:	f2 95       	swap	r31
     c5c:	e2 95       	swap	r30
     c5e:	ef 70       	andi	r30, 0x0F	; 15
     c60:	ef 27       	eor	r30, r31
     c62:	ff 70       	andi	r31, 0x0F	; 15
     c64:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     c66:	a8 ee       	ldi	r26, 0xE8	; 232
     c68:	b3 e0       	ldi	r27, 0x03	; 3
     c6a:	9a 01       	movw	r18, r20
     c6c:	ab 01       	movw	r20, r22
     c6e:	0e 94 ca 08 	call	0x1194	; 0x1194 <__muluhisi3>
     c72:	2e 2f       	mov	r18, r30
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	0e 94 93 08 	call	0x1126	; 0x1126 <__udivmodsi4>
     c7e:	ca 01       	movw	r24, r20
     c80:	b9 01       	movw	r22, r18
		Number_CTC = count / OCR0;
     c82:	0c b7       	in	r16, 0x3c	; 60
     c84:	20 2f       	mov	r18, r16
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	0e 94 93 08 	call	0x1126	; 0x1126 <__udivmodsi4>
		Number_CTC ++;
     c90:	da 01       	movw	r26, r20
     c92:	c9 01       	movw	r24, r18
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	a1 1d       	adc	r26, r1
     c98:	b1 1d       	adc	r27, r1
     c9a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <Number_CTC>
     c9e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <Number_CTC+0x1>
     ca2:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <Number_CTC+0x2>
     ca6:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <Number_CTC+0x3>
		return;
	}
}
     caa:	0f 91       	pop	r16
     cac:	08 95       	ret

00000cae <Timer2_Start>:

uint16 _Prescaler_ = 0;

void Timer2_Start(Timer2_Prescaler prescaler)
{
	switch(prescaler)
     cae:	83 30       	cpi	r24, 0x03	; 3
     cb0:	61 f1       	breq	.+88     	; 0xd0a <Timer2_Start+0x5c>
     cb2:	28 f4       	brcc	.+10     	; 0xcbe <Timer2_Start+0x10>
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	49 f0       	breq	.+18     	; 0xcca <Timer2_Start+0x1c>
     cb8:	82 30       	cpi	r24, 0x02	; 2
     cba:	b9 f0       	breq	.+46     	; 0xcea <Timer2_Start+0x3c>
     cbc:	08 95       	ret
     cbe:	84 30       	cpi	r24, 0x04	; 4
     cc0:	a1 f1       	breq	.+104    	; 0xd2a <Timer2_Start+0x7c>
     cc2:	85 30       	cpi	r24, 0x05	; 5
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <Timer2_Start+0x1a>
     cc6:	41 c0       	rjmp	.+130    	; 0xd4a <Timer2_Start+0x9c>
     cc8:	08 95       	ret
	{
		case PreS_0_:
		break;
		case PreS_1_:
		_Prescaler_ = 1;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <_Prescaler_+0x1>
     cd2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <_Prescaler_>
		CLR_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);SET_BIT(TCCR2, CS20);
     cd6:	85 b5       	in	r24, 0x25	; 37
     cd8:	8b 7f       	andi	r24, 0xFB	; 251
     cda:	85 bd       	out	0x25, r24	; 37
     cdc:	85 b5       	in	r24, 0x25	; 37
     cde:	8d 7f       	andi	r24, 0xFD	; 253
     ce0:	85 bd       	out	0x25, r24	; 37
     ce2:	85 b5       	in	r24, 0x25	; 37
     ce4:	81 60       	ori	r24, 0x01	; 1
     ce6:	85 bd       	out	0x25, r24	; 37
		break;
     ce8:	08 95       	ret
		case PreS_8_:
		_Prescaler_ = 8;
     cea:	88 e0       	ldi	r24, 0x08	; 8
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <_Prescaler_+0x1>
     cf2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <_Prescaler_>
		CLR_BIT(TCCR2, CS22);SET_BIT(TCCR2, CS21);CLR_BIT(TCCR2, CS20);
     cf6:	85 b5       	in	r24, 0x25	; 37
     cf8:	8b 7f       	andi	r24, 0xFB	; 251
     cfa:	85 bd       	out	0x25, r24	; 37
     cfc:	85 b5       	in	r24, 0x25	; 37
     cfe:	82 60       	ori	r24, 0x02	; 2
     d00:	85 bd       	out	0x25, r24	; 37
     d02:	85 b5       	in	r24, 0x25	; 37
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	85 bd       	out	0x25, r24	; 37
		break;
     d08:	08 95       	ret
		case PreS_64_:
		_Prescaler_ = 64;
     d0a:	80 e4       	ldi	r24, 0x40	; 64
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <_Prescaler_+0x1>
     d12:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <_Prescaler_>
		CLR_BIT(TCCR2, CS22);SET_BIT(TCCR2, CS21);SET_BIT(TCCR2, CS20);
     d16:	85 b5       	in	r24, 0x25	; 37
     d18:	8b 7f       	andi	r24, 0xFB	; 251
     d1a:	85 bd       	out	0x25, r24	; 37
     d1c:	85 b5       	in	r24, 0x25	; 37
     d1e:	82 60       	ori	r24, 0x02	; 2
     d20:	85 bd       	out	0x25, r24	; 37
     d22:	85 b5       	in	r24, 0x25	; 37
     d24:	81 60       	ori	r24, 0x01	; 1
     d26:	85 bd       	out	0x25, r24	; 37
		break;
     d28:	08 95       	ret
		case PreS_256_:
		_Prescaler_ = 256;
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <_Prescaler_+0x1>
     d32:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <_Prescaler_>
		SET_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);CLR_BIT(TCCR2, CS20);
     d36:	85 b5       	in	r24, 0x25	; 37
     d38:	84 60       	ori	r24, 0x04	; 4
     d3a:	85 bd       	out	0x25, r24	; 37
     d3c:	85 b5       	in	r24, 0x25	; 37
     d3e:	8d 7f       	andi	r24, 0xFD	; 253
     d40:	85 bd       	out	0x25, r24	; 37
     d42:	85 b5       	in	r24, 0x25	; 37
     d44:	8e 7f       	andi	r24, 0xFE	; 254
     d46:	85 bd       	out	0x25, r24	; 37
		break;
     d48:	08 95       	ret
		case PreS_1024_:
		_Prescaler_ = 1024;
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	94 e0       	ldi	r25, 0x04	; 4
     d4e:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <_Prescaler_+0x1>
     d52:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <_Prescaler_>
		SET_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);SET_BIT(TCCR2, CS20);
     d56:	85 b5       	in	r24, 0x25	; 37
     d58:	84 60       	ori	r24, 0x04	; 4
     d5a:	85 bd       	out	0x25, r24	; 37
     d5c:	85 b5       	in	r24, 0x25	; 37
     d5e:	8d 7f       	andi	r24, 0xFD	; 253
     d60:	85 bd       	out	0x25, r24	; 37
     d62:	85 b5       	in	r24, 0x25	; 37
     d64:	81 60       	ori	r24, 0x01	; 1
     d66:	85 bd       	out	0x25, r24	; 37
     d68:	08 95       	ret

00000d6a <Timer2_Stop>:
		
	}
}
void Timer2_Stop(void)
{
	CLR_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);CLR_BIT(TCCR2, CS20);
     d6a:	85 b5       	in	r24, 0x25	; 37
     d6c:	8b 7f       	andi	r24, 0xFB	; 251
     d6e:	85 bd       	out	0x25, r24	; 37
     d70:	85 b5       	in	r24, 0x25	; 37
     d72:	8d 7f       	andi	r24, 0xFD	; 253
     d74:	85 bd       	out	0x25, r24	; 37
     d76:	85 b5       	in	r24, 0x25	; 37
     d78:	8e 7f       	andi	r24, 0xFE	; 254
     d7a:	85 bd       	out	0x25, r24	; 37
     d7c:	08 95       	ret

00000d7e <Timer2_WithInterrupt_Initialization>:
uint32_t Timer2_CTC = 0;
uint32_t Timer2_Init_Value = 0;

void Timer2_WithInterrupt_Initialization(Timer2_Mode mode, Timer2_Pin_Mode pin)
{
	cli();//Close global interrupt
     d7e:	f8 94       	cli
	switch(mode)//Chose Mode
     d80:	88 23       	and	r24, r24
     d82:	19 f0       	breq	.+6      	; 0xd8a <Timer2_WithInterrupt_Initialization+0xc>
     d84:	82 30       	cpi	r24, 0x02	; 2
     d86:	59 f0       	breq	.+22     	; 0xd9e <Timer2_WithInterrupt_Initialization+0x20>
     d88:	13 c0       	rjmp	.+38     	; 0xdb0 <Timer2_WithInterrupt_Initialization+0x32>
	{
		case Normal_Mode_:
		CLR_BIT(TCCR2, WGM21);CLR_BIT(TCCR2, WGM20);
     d8a:	85 b5       	in	r24, 0x25	; 37
     d8c:	87 7f       	andi	r24, 0xF7	; 247
     d8e:	85 bd       	out	0x25, r24	; 37
     d90:	85 b5       	in	r24, 0x25	; 37
     d92:	8f 7b       	andi	r24, 0xBF	; 191
     d94:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TIMSK, TOIE2);//Open OVF interrupt
     d96:	89 b7       	in	r24, 0x39	; 57
     d98:	80 64       	ori	r24, 0x40	; 64
     d9a:	89 bf       	out	0x39, r24	; 57
		break;
     d9c:	09 c0       	rjmp	.+18     	; 0xdb0 <Timer2_WithInterrupt_Initialization+0x32>
		case CTC_Mode_:
		SET_BIT(TCCR2, WGM21);CLR_BIT(TCCR2, WGM20);
     d9e:	85 b5       	in	r24, 0x25	; 37
     da0:	88 60       	ori	r24, 0x08	; 8
     da2:	85 bd       	out	0x25, r24	; 37
     da4:	85 b5       	in	r24, 0x25	; 37
     da6:	8f 7b       	andi	r24, 0xBF	; 191
     da8:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TIMSK, OCIE2);//Open CTC Interrupt
     daa:	89 b7       	in	r24, 0x39	; 57
     dac:	80 68       	ori	r24, 0x80	; 128
     dae:	89 bf       	out	0x39, r24	; 57
		case PWM_PhaseCorrect_:
		break;
		case PWM_Fast_:
		break;
	}
	switch(pin)//Output pin mode
     db0:	61 30       	cpi	r22, 0x01	; 1
     db2:	69 f0       	breq	.+26     	; 0xdce <Timer2_WithInterrupt_Initialization+0x50>
     db4:	28 f0       	brcs	.+10     	; 0xdc0 <Timer2_WithInterrupt_Initialization+0x42>
     db6:	62 30       	cpi	r22, 0x02	; 2
     db8:	89 f0       	breq	.+34     	; 0xddc <Timer2_WithInterrupt_Initialization+0x5e>
     dba:	63 30       	cpi	r22, 0x03	; 3
     dbc:	b1 f0       	breq	.+44     	; 0xdea <Timer2_WithInterrupt_Initialization+0x6c>
     dbe:	1b c0       	rjmp	.+54     	; 0xdf6 <Timer2_WithInterrupt_Initialization+0x78>
	{
		case Pin_disconnected_:
		CLR_BIT(TCCR2, COM21);CLR_BIT(TCCR2, COM20);
     dc0:	85 b5       	in	r24, 0x25	; 37
     dc2:	8f 7d       	andi	r24, 0xDF	; 223
     dc4:	85 bd       	out	0x25, r24	; 37
     dc6:	85 b5       	in	r24, 0x25	; 37
     dc8:	8f 7e       	andi	r24, 0xEF	; 239
     dca:	85 bd       	out	0x25, r24	; 37
		break;
     dcc:	14 c0       	rjmp	.+40     	; 0xdf6 <Timer2_WithInterrupt_Initialization+0x78>
		case Pin_Toggle_:
		CLR_BIT(TCCR2, COM21);SET_BIT(TCCR2, COM20);
     dce:	85 b5       	in	r24, 0x25	; 37
     dd0:	8f 7d       	andi	r24, 0xDF	; 223
     dd2:	85 bd       	out	0x25, r24	; 37
     dd4:	85 b5       	in	r24, 0x25	; 37
     dd6:	80 61       	ori	r24, 0x10	; 16
     dd8:	85 bd       	out	0x25, r24	; 37
		break;
     dda:	0d c0       	rjmp	.+26     	; 0xdf6 <Timer2_WithInterrupt_Initialization+0x78>
		case Pin_Clear_:
		SET_BIT(TCCR2, COM21);CLR_BIT(TCCR2, COM20);
     ddc:	85 b5       	in	r24, 0x25	; 37
     dde:	80 62       	ori	r24, 0x20	; 32
     de0:	85 bd       	out	0x25, r24	; 37
     de2:	85 b5       	in	r24, 0x25	; 37
     de4:	8f 7e       	andi	r24, 0xEF	; 239
     de6:	85 bd       	out	0x25, r24	; 37
		break;
     de8:	06 c0       	rjmp	.+12     	; 0xdf6 <Timer2_WithInterrupt_Initialization+0x78>
		case Pin_Set_:
		SET_BIT(TCCR2, COM21);SET_BIT(TCCR2, COM20);
     dea:	85 b5       	in	r24, 0x25	; 37
     dec:	80 62       	ori	r24, 0x20	; 32
     dee:	85 bd       	out	0x25, r24	; 37
     df0:	85 b5       	in	r24, 0x25	; 37
     df2:	80 61       	ori	r24, 0x10	; 16
     df4:	85 bd       	out	0x25, r24	; 37
		break;
	}
	sei();//Enable global interrupt
     df6:	78 94       	sei
     df8:	08 95       	ret

00000dfa <Timer2_WithInterrupt_SetDelay>:
}
void Timer2_WithInterrupt_SetDelay(Timer2_Mode mode, uint32_t delay, uint8_t top)
{
     dfa:	0f 93       	push	r16
	if(mode == Normal_Mode_)
     dfc:	81 11       	cpse	r24, r1
     dfe:	37 c0       	rjmp	.+110    	; 0xe6e <Timer2_WithInterrupt_SetDelay+0x74>
	{
		uint8_t Tick = ( 1 * _Prescaler_) / Frequency;
     e00:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <_Prescaler_>
     e04:	30 91 a1 00 	lds	r19, 0x00A1	; 0x8000a1 <_Prescaler_+0x1>
     e08:	f9 01       	movw	r30, r18
     e0a:	f2 95       	swap	r31
     e0c:	e2 95       	swap	r30
     e0e:	ef 70       	andi	r30, 0x0F	; 15
     e10:	ef 27       	eor	r30, r31
     e12:	ff 70       	andi	r31, 0x0F	; 15
     e14:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     e16:	a8 ee       	ldi	r26, 0xE8	; 232
     e18:	b3 e0       	ldi	r27, 0x03	; 3
     e1a:	9a 01       	movw	r18, r20
     e1c:	ab 01       	movw	r20, r22
     e1e:	0e 94 ca 08 	call	0x1194	; 0x1194 <__muluhisi3>
     e22:	2e 2f       	mov	r18, r30
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	50 e0       	ldi	r21, 0x00	; 0
     e2a:	0e 94 93 08 	call	0x1126	; 0x1126 <__udivmodsi4>
		Timer2_OVF = count / Bits;
     e2e:	bb 27       	eor	r27, r27
     e30:	a5 2f       	mov	r26, r21
     e32:	94 2f       	mov	r25, r20
     e34:	83 2f       	mov	r24, r19
		Timer2_OVF ++;
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	a1 1d       	adc	r26, r1
     e3a:	b1 1d       	adc	r27, r1
     e3c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <Timer2_OVF>
     e40:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <Timer2_OVF+0x1>
     e44:	a0 93 9e 00 	sts	0x009E, r26	; 0x80009e <Timer2_OVF+0x2>
     e48:	b0 93 9f 00 	sts	0x009F, r27	; 0x80009f <Timer2_OVF+0x3>
		Timer2_Init_Value = Bits - (count % Bits);
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	a0 e0       	ldi	r26, 0x00	; 0
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	82 1b       	sub	r24, r18
     e56:	91 09       	sbc	r25, r1
     e58:	a1 09       	sbc	r26, r1
     e5a:	b1 09       	sbc	r27, r1
     e5c:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <Timer2_Init_Value>
     e60:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <Timer2_Init_Value+0x1>
     e64:	a0 93 96 00 	sts	0x0096, r26	; 0x800096 <Timer2_Init_Value+0x2>
     e68:	b0 93 97 00 	sts	0x0097, r27	; 0x800097 <Timer2_Init_Value+0x3>
		return;
     e6c:	30 c0       	rjmp	.+96     	; 0xece <Timer2_WithInterrupt_SetDelay+0xd4>
	}
	else if(mode == CTC_Mode_)
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	71 f5       	brne	.+92     	; 0xece <Timer2_WithInterrupt_SetDelay+0xd4>
	{
		OCR2 = top;
     e72:	23 bd       	out	0x23, r18	; 35
		uint8_t Tick = ( 1 * _Prescaler_) / Frequency;
     e74:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <_Prescaler_>
     e78:	30 91 a1 00 	lds	r19, 0x00A1	; 0x8000a1 <_Prescaler_+0x1>
     e7c:	f9 01       	movw	r30, r18
     e7e:	f2 95       	swap	r31
     e80:	e2 95       	swap	r30
     e82:	ef 70       	andi	r30, 0x0F	; 15
     e84:	ef 27       	eor	r30, r31
     e86:	ff 70       	andi	r31, 0x0F	; 15
     e88:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     e8a:	a8 ee       	ldi	r26, 0xE8	; 232
     e8c:	b3 e0       	ldi	r27, 0x03	; 3
     e8e:	9a 01       	movw	r18, r20
     e90:	ab 01       	movw	r20, r22
     e92:	0e 94 ca 08 	call	0x1194	; 0x1194 <__muluhisi3>
     e96:	2e 2f       	mov	r18, r30
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	0e 94 93 08 	call	0x1126	; 0x1126 <__udivmodsi4>
     ea2:	ca 01       	movw	r24, r20
     ea4:	b9 01       	movw	r22, r18
		Timer2_CTC = count / OCR0;
     ea6:	0c b7       	in	r16, 0x3c	; 60
     ea8:	20 2f       	mov	r18, r16
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	0e 94 93 08 	call	0x1126	; 0x1126 <__udivmodsi4>
		Timer2_CTC ++;
     eb4:	da 01       	movw	r26, r20
     eb6:	c9 01       	movw	r24, r18
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	a1 1d       	adc	r26, r1
     ebc:	b1 1d       	adc	r27, r1
     ebe:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <Timer2_CTC>
     ec2:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <Timer2_CTC+0x1>
     ec6:	a0 93 9a 00 	sts	0x009A, r26	; 0x80009a <Timer2_CTC+0x2>
     eca:	b0 93 9b 00 	sts	0x009B, r27	; 0x80009b <Timer2_CTC+0x3>
		return;
	}
}
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <__fixunssfsi>:
     ed2:	0e 94 05 08 	call	0x100a	; 0x100a <__fp_splitA>
     ed6:	88 f0       	brcs	.+34     	; 0xefa <__fixunssfsi+0x28>
     ed8:	9f 57       	subi	r25, 0x7F	; 127
     eda:	98 f0       	brcs	.+38     	; 0xf02 <__fixunssfsi+0x30>
     edc:	b9 2f       	mov	r27, r25
     ede:	99 27       	eor	r25, r25
     ee0:	b7 51       	subi	r27, 0x17	; 23
     ee2:	b0 f0       	brcs	.+44     	; 0xf10 <__fixunssfsi+0x3e>
     ee4:	e1 f0       	breq	.+56     	; 0xf1e <__fixunssfsi+0x4c>
     ee6:	66 0f       	add	r22, r22
     ee8:	77 1f       	adc	r23, r23
     eea:	88 1f       	adc	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	1a f0       	brmi	.+6      	; 0xef6 <__fixunssfsi+0x24>
     ef0:	ba 95       	dec	r27
     ef2:	c9 f7       	brne	.-14     	; 0xee6 <__fixunssfsi+0x14>
     ef4:	14 c0       	rjmp	.+40     	; 0xf1e <__fixunssfsi+0x4c>
     ef6:	b1 30       	cpi	r27, 0x01	; 1
     ef8:	91 f0       	breq	.+36     	; 0xf1e <__fixunssfsi+0x4c>
     efa:	0e 94 1f 08 	call	0x103e	; 0x103e <__fp_zero>
     efe:	b1 e0       	ldi	r27, 0x01	; 1
     f00:	08 95       	ret
     f02:	0c 94 1f 08 	jmp	0x103e	; 0x103e <__fp_zero>
     f06:	67 2f       	mov	r22, r23
     f08:	78 2f       	mov	r23, r24
     f0a:	88 27       	eor	r24, r24
     f0c:	b8 5f       	subi	r27, 0xF8	; 248
     f0e:	39 f0       	breq	.+14     	; 0xf1e <__fixunssfsi+0x4c>
     f10:	b9 3f       	cpi	r27, 0xF9	; 249
     f12:	cc f3       	brlt	.-14     	; 0xf06 <__fixunssfsi+0x34>
     f14:	86 95       	lsr	r24
     f16:	77 95       	ror	r23
     f18:	67 95       	ror	r22
     f1a:	b3 95       	inc	r27
     f1c:	d9 f7       	brne	.-10     	; 0xf14 <__fixunssfsi+0x42>
     f1e:	3e f4       	brtc	.+14     	; 0xf2e <__fixunssfsi+0x5c>
     f20:	90 95       	com	r25
     f22:	80 95       	com	r24
     f24:	70 95       	com	r23
     f26:	61 95       	neg	r22
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	8f 4f       	sbci	r24, 0xFF	; 255
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	08 95       	ret

00000f30 <__floatunsisf>:
     f30:	e8 94       	clt
     f32:	09 c0       	rjmp	.+18     	; 0xf46 <__floatsisf+0x12>

00000f34 <__floatsisf>:
     f34:	97 fb       	bst	r25, 7
     f36:	3e f4       	brtc	.+14     	; 0xf46 <__floatsisf+0x12>
     f38:	90 95       	com	r25
     f3a:	80 95       	com	r24
     f3c:	70 95       	com	r23
     f3e:	61 95       	neg	r22
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	8f 4f       	sbci	r24, 0xFF	; 255
     f44:	9f 4f       	sbci	r25, 0xFF	; 255
     f46:	99 23       	and	r25, r25
     f48:	a9 f0       	breq	.+42     	; 0xf74 <__floatsisf+0x40>
     f4a:	f9 2f       	mov	r31, r25
     f4c:	96 e9       	ldi	r25, 0x96	; 150
     f4e:	bb 27       	eor	r27, r27
     f50:	93 95       	inc	r25
     f52:	f6 95       	lsr	r31
     f54:	87 95       	ror	r24
     f56:	77 95       	ror	r23
     f58:	67 95       	ror	r22
     f5a:	b7 95       	ror	r27
     f5c:	f1 11       	cpse	r31, r1
     f5e:	f8 cf       	rjmp	.-16     	; 0xf50 <__floatsisf+0x1c>
     f60:	fa f4       	brpl	.+62     	; 0xfa0 <__floatsisf+0x6c>
     f62:	bb 0f       	add	r27, r27
     f64:	11 f4       	brne	.+4      	; 0xf6a <__floatsisf+0x36>
     f66:	60 ff       	sbrs	r22, 0
     f68:	1b c0       	rjmp	.+54     	; 0xfa0 <__floatsisf+0x6c>
     f6a:	6f 5f       	subi	r22, 0xFF	; 255
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	8f 4f       	sbci	r24, 0xFF	; 255
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	16 c0       	rjmp	.+44     	; 0xfa0 <__floatsisf+0x6c>
     f74:	88 23       	and	r24, r24
     f76:	11 f0       	breq	.+4      	; 0xf7c <__floatsisf+0x48>
     f78:	96 e9       	ldi	r25, 0x96	; 150
     f7a:	11 c0       	rjmp	.+34     	; 0xf9e <__floatsisf+0x6a>
     f7c:	77 23       	and	r23, r23
     f7e:	21 f0       	breq	.+8      	; 0xf88 <__floatsisf+0x54>
     f80:	9e e8       	ldi	r25, 0x8E	; 142
     f82:	87 2f       	mov	r24, r23
     f84:	76 2f       	mov	r23, r22
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <__floatsisf+0x5e>
     f88:	66 23       	and	r22, r22
     f8a:	71 f0       	breq	.+28     	; 0xfa8 <__floatsisf+0x74>
     f8c:	96 e8       	ldi	r25, 0x86	; 134
     f8e:	86 2f       	mov	r24, r22
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	2a f0       	brmi	.+10     	; 0xfa0 <__floatsisf+0x6c>
     f96:	9a 95       	dec	r25
     f98:	66 0f       	add	r22, r22
     f9a:	77 1f       	adc	r23, r23
     f9c:	88 1f       	adc	r24, r24
     f9e:	da f7       	brpl	.-10     	; 0xf96 <__floatsisf+0x62>
     fa0:	88 0f       	add	r24, r24
     fa2:	96 95       	lsr	r25
     fa4:	87 95       	ror	r24
     fa6:	97 f9       	bld	r25, 7
     fa8:	08 95       	ret

00000faa <__fp_inf>:
     faa:	97 f9       	bld	r25, 7
     fac:	9f 67       	ori	r25, 0x7F	; 127
     fae:	80 e8       	ldi	r24, 0x80	; 128
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	08 95       	ret

00000fb6 <__fp_nan>:
     fb6:	9f ef       	ldi	r25, 0xFF	; 255
     fb8:	80 ec       	ldi	r24, 0xC0	; 192
     fba:	08 95       	ret

00000fbc <__fp_pscA>:
     fbc:	00 24       	eor	r0, r0
     fbe:	0a 94       	dec	r0
     fc0:	16 16       	cp	r1, r22
     fc2:	17 06       	cpc	r1, r23
     fc4:	18 06       	cpc	r1, r24
     fc6:	09 06       	cpc	r0, r25
     fc8:	08 95       	ret

00000fca <__fp_pscB>:
     fca:	00 24       	eor	r0, r0
     fcc:	0a 94       	dec	r0
     fce:	12 16       	cp	r1, r18
     fd0:	13 06       	cpc	r1, r19
     fd2:	14 06       	cpc	r1, r20
     fd4:	05 06       	cpc	r0, r21
     fd6:	08 95       	ret

00000fd8 <__fp_round>:
     fd8:	09 2e       	mov	r0, r25
     fda:	03 94       	inc	r0
     fdc:	00 0c       	add	r0, r0
     fde:	11 f4       	brne	.+4      	; 0xfe4 <__fp_round+0xc>
     fe0:	88 23       	and	r24, r24
     fe2:	52 f0       	brmi	.+20     	; 0xff8 <__fp_round+0x20>
     fe4:	bb 0f       	add	r27, r27
     fe6:	40 f4       	brcc	.+16     	; 0xff8 <__fp_round+0x20>
     fe8:	bf 2b       	or	r27, r31
     fea:	11 f4       	brne	.+4      	; 0xff0 <__fp_round+0x18>
     fec:	60 ff       	sbrs	r22, 0
     fee:	04 c0       	rjmp	.+8      	; 0xff8 <__fp_round+0x20>
     ff0:	6f 5f       	subi	r22, 0xFF	; 255
     ff2:	7f 4f       	sbci	r23, 0xFF	; 255
     ff4:	8f 4f       	sbci	r24, 0xFF	; 255
     ff6:	9f 4f       	sbci	r25, 0xFF	; 255
     ff8:	08 95       	ret

00000ffa <__fp_split3>:
     ffa:	57 fd       	sbrc	r21, 7
     ffc:	90 58       	subi	r25, 0x80	; 128
     ffe:	44 0f       	add	r20, r20
    1000:	55 1f       	adc	r21, r21
    1002:	59 f0       	breq	.+22     	; 0x101a <__fp_splitA+0x10>
    1004:	5f 3f       	cpi	r21, 0xFF	; 255
    1006:	71 f0       	breq	.+28     	; 0x1024 <__fp_splitA+0x1a>
    1008:	47 95       	ror	r20

0000100a <__fp_splitA>:
    100a:	88 0f       	add	r24, r24
    100c:	97 fb       	bst	r25, 7
    100e:	99 1f       	adc	r25, r25
    1010:	61 f0       	breq	.+24     	; 0x102a <__fp_splitA+0x20>
    1012:	9f 3f       	cpi	r25, 0xFF	; 255
    1014:	79 f0       	breq	.+30     	; 0x1034 <__fp_splitA+0x2a>
    1016:	87 95       	ror	r24
    1018:	08 95       	ret
    101a:	12 16       	cp	r1, r18
    101c:	13 06       	cpc	r1, r19
    101e:	14 06       	cpc	r1, r20
    1020:	55 1f       	adc	r21, r21
    1022:	f2 cf       	rjmp	.-28     	; 0x1008 <__fp_split3+0xe>
    1024:	46 95       	lsr	r20
    1026:	f1 df       	rcall	.-30     	; 0x100a <__fp_splitA>
    1028:	08 c0       	rjmp	.+16     	; 0x103a <__fp_splitA+0x30>
    102a:	16 16       	cp	r1, r22
    102c:	17 06       	cpc	r1, r23
    102e:	18 06       	cpc	r1, r24
    1030:	99 1f       	adc	r25, r25
    1032:	f1 cf       	rjmp	.-30     	; 0x1016 <__fp_splitA+0xc>
    1034:	86 95       	lsr	r24
    1036:	71 05       	cpc	r23, r1
    1038:	61 05       	cpc	r22, r1
    103a:	08 94       	sec
    103c:	08 95       	ret

0000103e <__fp_zero>:
    103e:	e8 94       	clt

00001040 <__fp_szero>:
    1040:	bb 27       	eor	r27, r27
    1042:	66 27       	eor	r22, r22
    1044:	77 27       	eor	r23, r23
    1046:	cb 01       	movw	r24, r22
    1048:	97 f9       	bld	r25, 7
    104a:	08 95       	ret

0000104c <__mulsf3>:
    104c:	0e 94 39 08 	call	0x1072	; 0x1072 <__mulsf3x>
    1050:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__fp_round>
    1054:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fp_pscA>
    1058:	38 f0       	brcs	.+14     	; 0x1068 <__mulsf3+0x1c>
    105a:	0e 94 e5 07 	call	0xfca	; 0xfca <__fp_pscB>
    105e:	20 f0       	brcs	.+8      	; 0x1068 <__mulsf3+0x1c>
    1060:	95 23       	and	r25, r21
    1062:	11 f0       	breq	.+4      	; 0x1068 <__mulsf3+0x1c>
    1064:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__fp_inf>
    1068:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__fp_nan>
    106c:	11 24       	eor	r1, r1
    106e:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_szero>

00001072 <__mulsf3x>:
    1072:	0e 94 fd 07 	call	0xffa	; 0xffa <__fp_split3>
    1076:	70 f3       	brcs	.-36     	; 0x1054 <__mulsf3+0x8>

00001078 <__mulsf3_pse>:
    1078:	95 9f       	mul	r25, r21
    107a:	c1 f3       	breq	.-16     	; 0x106c <__mulsf3+0x20>
    107c:	95 0f       	add	r25, r21
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	55 1f       	adc	r21, r21
    1082:	62 9f       	mul	r22, r18
    1084:	f0 01       	movw	r30, r0
    1086:	72 9f       	mul	r23, r18
    1088:	bb 27       	eor	r27, r27
    108a:	f0 0d       	add	r31, r0
    108c:	b1 1d       	adc	r27, r1
    108e:	63 9f       	mul	r22, r19
    1090:	aa 27       	eor	r26, r26
    1092:	f0 0d       	add	r31, r0
    1094:	b1 1d       	adc	r27, r1
    1096:	aa 1f       	adc	r26, r26
    1098:	64 9f       	mul	r22, r20
    109a:	66 27       	eor	r22, r22
    109c:	b0 0d       	add	r27, r0
    109e:	a1 1d       	adc	r26, r1
    10a0:	66 1f       	adc	r22, r22
    10a2:	82 9f       	mul	r24, r18
    10a4:	22 27       	eor	r18, r18
    10a6:	b0 0d       	add	r27, r0
    10a8:	a1 1d       	adc	r26, r1
    10aa:	62 1f       	adc	r22, r18
    10ac:	73 9f       	mul	r23, r19
    10ae:	b0 0d       	add	r27, r0
    10b0:	a1 1d       	adc	r26, r1
    10b2:	62 1f       	adc	r22, r18
    10b4:	83 9f       	mul	r24, r19
    10b6:	a0 0d       	add	r26, r0
    10b8:	61 1d       	adc	r22, r1
    10ba:	22 1f       	adc	r18, r18
    10bc:	74 9f       	mul	r23, r20
    10be:	33 27       	eor	r19, r19
    10c0:	a0 0d       	add	r26, r0
    10c2:	61 1d       	adc	r22, r1
    10c4:	23 1f       	adc	r18, r19
    10c6:	84 9f       	mul	r24, r20
    10c8:	60 0d       	add	r22, r0
    10ca:	21 1d       	adc	r18, r1
    10cc:	82 2f       	mov	r24, r18
    10ce:	76 2f       	mov	r23, r22
    10d0:	6a 2f       	mov	r22, r26
    10d2:	11 24       	eor	r1, r1
    10d4:	9f 57       	subi	r25, 0x7F	; 127
    10d6:	50 40       	sbci	r21, 0x00	; 0
    10d8:	9a f0       	brmi	.+38     	; 0x1100 <__mulsf3_pse+0x88>
    10da:	f1 f0       	breq	.+60     	; 0x1118 <__mulsf3_pse+0xa0>
    10dc:	88 23       	and	r24, r24
    10de:	4a f0       	brmi	.+18     	; 0x10f2 <__mulsf3_pse+0x7a>
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	bb 1f       	adc	r27, r27
    10e6:	66 1f       	adc	r22, r22
    10e8:	77 1f       	adc	r23, r23
    10ea:	88 1f       	adc	r24, r24
    10ec:	91 50       	subi	r25, 0x01	; 1
    10ee:	50 40       	sbci	r21, 0x00	; 0
    10f0:	a9 f7       	brne	.-22     	; 0x10dc <__mulsf3_pse+0x64>
    10f2:	9e 3f       	cpi	r25, 0xFE	; 254
    10f4:	51 05       	cpc	r21, r1
    10f6:	80 f0       	brcs	.+32     	; 0x1118 <__mulsf3_pse+0xa0>
    10f8:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__fp_inf>
    10fc:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_szero>
    1100:	5f 3f       	cpi	r21, 0xFF	; 255
    1102:	e4 f3       	brlt	.-8      	; 0x10fc <__mulsf3_pse+0x84>
    1104:	98 3e       	cpi	r25, 0xE8	; 232
    1106:	d4 f3       	brlt	.-12     	; 0x10fc <__mulsf3_pse+0x84>
    1108:	86 95       	lsr	r24
    110a:	77 95       	ror	r23
    110c:	67 95       	ror	r22
    110e:	b7 95       	ror	r27
    1110:	f7 95       	ror	r31
    1112:	e7 95       	ror	r30
    1114:	9f 5f       	subi	r25, 0xFF	; 255
    1116:	c1 f7       	brne	.-16     	; 0x1108 <__mulsf3_pse+0x90>
    1118:	fe 2b       	or	r31, r30
    111a:	88 0f       	add	r24, r24
    111c:	91 1d       	adc	r25, r1
    111e:	96 95       	lsr	r25
    1120:	87 95       	ror	r24
    1122:	97 f9       	bld	r25, 7
    1124:	08 95       	ret

00001126 <__udivmodsi4>:
    1126:	a1 e2       	ldi	r26, 0x21	; 33
    1128:	1a 2e       	mov	r1, r26
    112a:	aa 1b       	sub	r26, r26
    112c:	bb 1b       	sub	r27, r27
    112e:	fd 01       	movw	r30, r26
    1130:	0d c0       	rjmp	.+26     	; 0x114c <__udivmodsi4_ep>

00001132 <__udivmodsi4_loop>:
    1132:	aa 1f       	adc	r26, r26
    1134:	bb 1f       	adc	r27, r27
    1136:	ee 1f       	adc	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	a2 17       	cp	r26, r18
    113c:	b3 07       	cpc	r27, r19
    113e:	e4 07       	cpc	r30, r20
    1140:	f5 07       	cpc	r31, r21
    1142:	20 f0       	brcs	.+8      	; 0x114c <__udivmodsi4_ep>
    1144:	a2 1b       	sub	r26, r18
    1146:	b3 0b       	sbc	r27, r19
    1148:	e4 0b       	sbc	r30, r20
    114a:	f5 0b       	sbc	r31, r21

0000114c <__udivmodsi4_ep>:
    114c:	66 1f       	adc	r22, r22
    114e:	77 1f       	adc	r23, r23
    1150:	88 1f       	adc	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	1a 94       	dec	r1
    1156:	69 f7       	brne	.-38     	; 0x1132 <__udivmodsi4_loop>
    1158:	60 95       	com	r22
    115a:	70 95       	com	r23
    115c:	80 95       	com	r24
    115e:	90 95       	com	r25
    1160:	9b 01       	movw	r18, r22
    1162:	ac 01       	movw	r20, r24
    1164:	bd 01       	movw	r22, r26
    1166:	cf 01       	movw	r24, r30
    1168:	08 95       	ret

0000116a <__tablejump2__>:
    116a:	ee 0f       	add	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	05 90       	lpm	r0, Z+
    1170:	f4 91       	lpm	r31, Z
    1172:	e0 2d       	mov	r30, r0
    1174:	09 94       	ijmp

00001176 <__umulhisi3>:
    1176:	a2 9f       	mul	r26, r18
    1178:	b0 01       	movw	r22, r0
    117a:	b3 9f       	mul	r27, r19
    117c:	c0 01       	movw	r24, r0
    117e:	a3 9f       	mul	r26, r19
    1180:	70 0d       	add	r23, r0
    1182:	81 1d       	adc	r24, r1
    1184:	11 24       	eor	r1, r1
    1186:	91 1d       	adc	r25, r1
    1188:	b2 9f       	mul	r27, r18
    118a:	70 0d       	add	r23, r0
    118c:	81 1d       	adc	r24, r1
    118e:	11 24       	eor	r1, r1
    1190:	91 1d       	adc	r25, r1
    1192:	08 95       	ret

00001194 <__muluhisi3>:
    1194:	0e 94 bb 08 	call	0x1176	; 0x1176 <__umulhisi3>
    1198:	a5 9f       	mul	r26, r21
    119a:	90 0d       	add	r25, r0
    119c:	b4 9f       	mul	r27, r20
    119e:	90 0d       	add	r25, r0
    11a0:	a4 9f       	mul	r26, r20
    11a2:	80 0d       	add	r24, r0
    11a4:	91 1d       	adc	r25, r1
    11a6:	11 24       	eor	r1, r1
    11a8:	08 95       	ret

000011aa <_exit>:
    11aa:	f8 94       	cli

000011ac <__stop_program>:
    11ac:	ff cf       	rjmp	.-2      	; 0x11ac <__stop_program>
