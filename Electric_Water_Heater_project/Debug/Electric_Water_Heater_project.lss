
Electric_Water_Heater_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001438  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001438  000014cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  00800062  00800062  000014ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001500  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003881  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013bb  00000000  00000000  00005195  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000231d  00000000  00000000  00006550  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c8  00000000  00000000  00008870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e6b  00000000  00000000  00009038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002091  00000000  00000000  00009ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000bf34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_1>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	35 04       	cpc	r3, r5
      56:	39 04       	cpc	r3, r9
      58:	3d 04       	cpc	r3, r13
      5a:	41 04       	cpc	r4, r1
      5c:	45 04       	cpc	r4, r5
      5e:	49 04       	cpc	r4, r9
      60:	4d 04       	cpc	r4, r13
      62:	51 04       	cpc	r5, r1

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e3       	ldi	r30, 0x38	; 56
      78:	f4 e1       	ldi	r31, 0x14	; 20
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a2 36       	cpi	r26, 0x62	; 98
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	20 e0       	ldi	r18, 0x00	; 0
      88:	a2 e6       	ldi	r26, 0x62	; 98
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a7 3a       	cpi	r26, 0xA7	; 167
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
      9a:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <__vector_1>:



//===============================================================================================

ISR(INT0_vect){
      a2:	1f 92       	push	r1
      a4:	0f 92       	push	r0
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	0f 92       	push	r0
      aa:	11 24       	eor	r1, r1
      ac:	2f 93       	push	r18
      ae:	3f 93       	push	r19
      b0:	4f 93       	push	r20
      b2:	5f 93       	push	r21
      b4:	6f 93       	push	r22
      b6:	7f 93       	push	r23
      b8:	8f 93       	push	r24
      ba:	9f 93       	push	r25
      bc:	af 93       	push	r26
      be:	bf 93       	push	r27
      c0:	ef 93       	push	r30
      c2:	ff 93       	push	r31
	power_flag^=1;
      c4:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <power_flag>
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	89 27       	eor	r24, r25
      cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <power_flag>
	if(power_flag==0){
      d0:	81 11       	cpse	r24, r1
      d2:	0f c0       	rjmp	.+30     	; 0xf2 <__vector_1+0x50>
		LED0_OFF();
      d4:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <LED0_OFF>
		LED1_OFF();
      d8:	0e 94 0a 04 	call	0x814	; 0x814 <LED1_OFF>
		LED2_OFF();
      dc:	0e 94 16 04 	call	0x82c	; 0x82c <LED2_OFF>
		Timer0_Stop();
      e0:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer0_Stop>
		Timer2_Stop();
      e4:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <Timer2_Stop>
		first_push_flag=0;
      e8:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <first_push_flag>
		//SEVSEG_Disable1();
		//SEVSEG_Disable2();
		//SEVSEG_Dot_Disable();
		LCD_disable();
      ec:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <LCD_disable>
      f0:	12 c0       	rjmp	.+36     	; 0x116 <__vector_1+0x74>
	}
	else {
		LED0_ON();
      f2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LED0_ON>
		//SEVSEG_Initialization();
		LCD_Initialization();
      f6:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_Initialization>
		test=1;	//to reset the counter
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <test>
		Timer2_Start(PreS_1024_);	//start timer2 to get the ADC read every 100 ms
     100:	85 e0       	ldi	r24, 0x05	; 5
     102:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Timer2_Start>
		Timer2_WithInterrupt_SetDelay(Normal_Mode_ , 100 , 255);
     106:	2f ef       	ldi	r18, 0xFF	; 255
     108:	44 e6       	ldi	r20, 0x64	; 100
     10a:	50 e0       	ldi	r21, 0x00	; 0
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	70 e0       	ldi	r23, 0x00	; 0
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	0e 94 a2 07 	call	0xf44	; 0xf44 <Timer2_WithInterrupt_SetDelay>
	}
}
     116:	ff 91       	pop	r31
     118:	ef 91       	pop	r30
     11a:	bf 91       	pop	r27
     11c:	af 91       	pop	r26
     11e:	9f 91       	pop	r25
     120:	8f 91       	pop	r24
     122:	7f 91       	pop	r23
     124:	6f 91       	pop	r22
     126:	5f 91       	pop	r21
     128:	4f 91       	pop	r20
     12a:	3f 91       	pop	r19
     12c:	2f 91       	pop	r18
     12e:	0f 90       	pop	r0
     130:	0f be       	out	0x3f, r0	; 63
     132:	0f 90       	pop	r0
     134:	1f 90       	pop	r1
     136:	18 95       	reti

00000138 <sitting_temp>:

//===============================================================================================


void sitting_temp(uint8_t btn0_read_,uint8_t btn1_read_){		//if user press the button make test = 1 to restart timer
	if(btn0_read_==PRESSED&&degree<75){
     138:	81 30       	cpi	r24, 0x01	; 1
     13a:	01 f5       	brne	.+64     	; 0x17c <sitting_temp+0x44>
     13c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     140:	9b 34       	cpi	r25, 0x4B	; 75
     142:	e0 f4       	brcc	.+56     	; 0x17c <sitting_temp+0x44>
		degree+=5;
     144:	65 e0       	ldi	r22, 0x05	; 5
     146:	69 0f       	add	r22, r25
     148:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <degree>
		EEPROM_Write(degree_addr , degree); // Saving desired temperature on EEPROM
     14c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 aa 05 	call	0xb54	; 0xb54 <EEPROM_Write>
		access_flag=1;
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <access_flag>
		test=1;
     15c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <test>
		Timer0_Stop();
     160:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer0_Stop>
		Timer0_Start(PreS_1024);
     164:	85 e0       	ldi	r24, 0x05	; 5
     166:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     16a:	2f ef       	ldi	r18, 0xFF	; 255
     16c:	48 e8       	ldi	r20, 0x88	; 136
     16e:	53 e1       	ldi	r21, 0x13	; 19
     170:	60 e0       	ldi	r22, 0x00	; 0
     172:	70 e0       	ldi	r23, 0x00	; 0
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	0e 94 90 06 	call	0xd20	; 0xd20 <Timer0_WithInterrupt_SetDelay>
     17a:	08 95       	ret
	}
	else if(btn1_read_==PRESSED&&degree>35) {
     17c:	61 30       	cpi	r22, 0x01	; 1
     17e:	01 f5       	brne	.+64     	; 0x1c0 <sitting_temp+0x88>
     180:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     184:	94 32       	cpi	r25, 0x24	; 36
     186:	e0 f0       	brcs	.+56     	; 0x1c0 <sitting_temp+0x88>
		degree-=5;
     188:	6b ef       	ldi	r22, 0xFB	; 251
     18a:	69 0f       	add	r22, r25
     18c:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <degree>
		EEPROM_Write(degree_addr , degree); // Saving desired temperature on EEPROM
     190:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 aa 05 	call	0xb54	; 0xb54 <EEPROM_Write>
		access_flag=1;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <access_flag>
		test=1;
     1a0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <test>
		Timer0_Stop();
     1a4:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer0_Stop>
		Timer0_Start(PreS_1024);
     1a8:	85 e0       	ldi	r24, 0x05	; 5
     1aa:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     1ae:	2f ef       	ldi	r18, 0xFF	; 255
     1b0:	48 e8       	ldi	r20, 0x88	; 136
     1b2:	53 e1       	ldi	r21, 0x13	; 19
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	0e 94 90 06 	call	0xd20	; 0xd20 <Timer0_WithInterrupt_SetDelay>
     1be:	08 95       	ret
	}
	else if((btn1_read_==PRESSED&&degree==35)||(btn0_read_==PRESSED&&degree==75)) {
     1c0:	61 30       	cpi	r22, 0x01	; 1
     1c2:	21 f4       	brne	.+8      	; 0x1cc <sitting_temp+0x94>
     1c4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     1c8:	93 32       	cpi	r25, 0x23	; 35
     1ca:	31 f0       	breq	.+12     	; 0x1d8 <sitting_temp+0xa0>
     1cc:	81 30       	cpi	r24, 0x01	; 1
     1ce:	a1 f4       	brne	.+40     	; 0x1f8 <sitting_temp+0xc0>
     1d0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <degree>
     1d4:	8b 34       	cpi	r24, 0x4B	; 75
     1d6:	81 f4       	brne	.+32     	; 0x1f8 <sitting_temp+0xc0>
		test=1;
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <test>
		Timer0_Stop();
     1de:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer0_Stop>
		Timer0_Start(PreS_1024);
     1e2:	85 e0       	ldi	r24, 0x05	; 5
     1e4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     1e8:	2f ef       	ldi	r18, 0xFF	; 255
     1ea:	48 e8       	ldi	r20, 0x88	; 136
     1ec:	53 e1       	ldi	r21, 0x13	; 19
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	0e 94 90 06 	call	0xd20	; 0xd20 <Timer0_WithInterrupt_SetDelay>
     1f8:	08 95       	ret

000001fa <main>:
{

	
	

	Interrupt_Initialization(INT0_Signal);
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	0e 94 bf 05 	call	0xb7e	; 0xb7e <Interrupt_Initialization>
	DIO_SetPinPullUp(DIO_PORTD,DIO_PIN2);
     200:	62 e0       	ldi	r22, 0x02	; 2
     202:	83 e0       	ldi	r24, 0x03	; 3
     204:	0e 94 76 05 	call	0xaec	; 0xaec <DIO_SetPinPullUp>
	Timer0_WithInterrupt_Initialization(Normal_Mode,Pin_disconnected);
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	0e 94 52 06 	call	0xca4	; 0xca4 <Timer0_WithInterrupt_Initialization>
	Timer2_WithInterrupt_Initialization(Normal_Mode_ , Pin_disconnected_);
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	0e 94 64 07 	call	0xec8	; 0xec8 <Timer2_WithInterrupt_Initialization>

	// Timer1_with_interrupt_initialization(TIMER1_Normal , TIMER1_PIN_Disconnected,TIMER1_Channel_A);
	// Timer1_start(TIMER1_Prescaler_1024);
	// Timer1_with_interrupt_setDelay(TIMER1_Normal , 100 , 255);
	ADC_Initialization(ADC1);
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	0e 94 2c 04 	call	0x858	; 0x858 <ADC_Initialization>
	BTN0_Initialization();
     21e:	0e 94 3a 03 	call	0x674	; 0x674 <BTN0_Initialization>
	BTN1_Initialization();
     222:	0e 94 4f 03 	call	0x69e	; 0x69e <BTN1_Initialization>
	LED0_Initialization();
     226:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LED0_Initialization>
	LED1_Initialization();
     22a:	0e 94 02 04 	call	0x804	; 0x804 <LED1_Initialization>
	LED2_Initialization();
     22e:	0e 94 0e 04 	call	0x81c	; 0x81c <LED2_Initialization>
	Relay_Initialization();
     232:	0e 94 1a 04 	call	0x834	; 0x834 <Relay_Initialization>
	
	Timer2_Start(PreS_1024_);	//start timer2 to get the ADC read every 100 ms
     236:	85 e0       	ldi	r24, 0x05	; 5
     238:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Timer2_Start>
	Timer2_WithInterrupt_SetDelay(Normal_Mode_ , 100 , 255);
     23c:	2f ef       	ldi	r18, 0xFF	; 255
     23e:	44 e6       	ldi	r20, 0x64	; 100
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	0e 94 a2 07 	call	0xf44	; 0xf44 <Timer2_WithInterrupt_SetDelay>

	
	/* Replace with your application code */
	while (1)
	{
		btn1_read_ = BTN1_Read();	//get button1 read
     24c:	0e 94 55 03 	call	0x6aa	; 0x6aa <BTN1_Read>
     250:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <btn1_read_>
		btn0_read_ =BTN0_Read();	//get button0 read
     254:	0e 94 44 03 	call	0x688	; 0x688 <BTN0_Read>
     258:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <btn0_read_>
		

		//check if the device is on or off
		if (power_flag==0);	//if off do noting
     25c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <power_flag>
     260:	88 23       	and	r24, r24
     262:	a1 f3       	breq	.-24     	; 0x24c <main+0x52>
		else{	//if on start operations
			if (access_flag==1)
     264:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <access_flag>
     268:	81 30       	cpi	r24, 0x01	; 1
     26a:	39 f4       	brne	.+14     	; 0x27a <main+0x80>
			{
				degree=EEPROM_Read(degree_addr);
     26c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 b6 05 	call	0xb6c	; 0xb6c <EEPROM_Read>
     276:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <degree>
			}
			

			if((first_push_flag==0&&btn0_read_==PRESSED)||(first_push_flag==0&&btn1_read_==PRESSED)){	//check if buttons are clicked for the first time to enter setting mode
     27a:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <first_push_flag>
     27e:	81 11       	cpse	r24, r1
     280:	19 c0       	rjmp	.+50     	; 0x2b4 <main+0xba>
     282:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <btn0_read_>
     286:	81 30       	cpi	r24, 0x01	; 1
     288:	21 f0       	breq	.+8      	; 0x292 <main+0x98>
     28a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <btn1_read_>
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	89 f4       	brne	.+34     	; 0x2b4 <main+0xba>
				first_push_flag=1;	//raise the flag
     292:	c1 e0       	ldi	r28, 0x01	; 1
     294:	c0 93 87 00 	sts	0x0087, r28	; 0x800087 <first_push_flag>
				Timer0_Start(PreS_1024);	//start timer0 so that if 5 seconds spend without using buttons ,exit setting mode
     298:	85 e0       	ldi	r24, 0x05	; 5
     29a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Timer0_Start>
				Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     29e:	2f ef       	ldi	r18, 0xFF	; 255
     2a0:	48 e8       	ldi	r20, 0x88	; 136
     2a2:	53 e1       	ldi	r21, 0x13	; 19
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 90 06 	call	0xd20	; 0xd20 <Timer0_WithInterrupt_SetDelay>
				blink_7_segment = 1;
     2ae:	c0 93 6a 00 	sts	0x006A, r28	; 0x80006a <blink_7_segment>
     2b2:	06 c0       	rjmp	.+12     	; 0x2c0 <main+0xc6>
				// btn1_read_=0;
				// btn0_read_=0;
			}
			else//  if( (btn0_read_==PRESSED) ||(btn1_read_==PRESSED) ) 
			{	//if this isn't the first click call the function of setting mode
				sitting_temp(btn0_read_,btn1_read_);
     2b4:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <btn1_read_>
     2b8:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <btn0_read_>
     2bc:	0e 94 9c 00 	call	0x138	; 0x138 <sitting_temp>
				
			}
			
			//compare the current temp with set_temp
			
			if (current_temp >= degree - 5 && current_temp <= degree + 5)
     2c0:	c0 91 61 00 	lds	r28, 0x0061	; 0x800061 <degree>
     2c4:	d0 e0       	ldi	r29, 0x00	; 0
     2c6:	be 01       	movw	r22, r28
     2c8:	65 50       	subi	r22, 0x05	; 5
     2ca:	71 09       	sbc	r23, r1
     2cc:	07 2e       	mov	r0, r23
     2ce:	00 0c       	add	r0, r0
     2d0:	88 0b       	sbc	r24, r24
     2d2:	99 0b       	sbc	r25, r25
     2d4:	0e 94 b6 08 	call	0x116c	; 0x116c <__floatsisf>
     2d8:	4b 01       	movw	r8, r22
     2da:	5c 01       	movw	r10, r24
     2dc:	c0 90 80 00 	lds	r12, 0x0080	; 0x800080 <current_temp>
     2e0:	d0 90 81 00 	lds	r13, 0x0081	; 0x800081 <current_temp+0x1>
     2e4:	e0 90 82 00 	lds	r14, 0x0082	; 0x800082 <current_temp+0x2>
     2e8:	f0 90 83 00 	lds	r15, 0x0083	; 0x800083 <current_temp+0x3>
     2ec:	a7 01       	movw	r20, r14
     2ee:	96 01       	movw	r18, r12
     2f0:	0e 94 0e 08 	call	0x101c	; 0x101c <__cmpsf2>
     2f4:	18 16       	cp	r1, r24
     2f6:	14 f1       	brlt	.+68     	; 0x33c <main+0x142>
     2f8:	be 01       	movw	r22, r28
     2fa:	6b 5f       	subi	r22, 0xFB	; 251
     2fc:	7f 4f       	sbci	r23, 0xFF	; 255
     2fe:	07 2e       	mov	r0, r23
     300:	00 0c       	add	r0, r0
     302:	88 0b       	sbc	r24, r24
     304:	99 0b       	sbc	r25, r25
     306:	0e 94 b6 08 	call	0x116c	; 0x116c <__floatsisf>
     30a:	9b 01       	movw	r18, r22
     30c:	ac 01       	movw	r20, r24
     30e:	c7 01       	movw	r24, r14
     310:	b6 01       	movw	r22, r12
     312:	0e 94 0e 08 	call	0x101c	; 0x101c <__cmpsf2>
     316:	18 16       	cp	r1, r24
     318:	8c f0       	brlt	.+34     	; 0x33c <main+0x142>
			{
				LED1_OFF(); // Heating element off
     31a:	0e 94 0a 04 	call	0x814	; 0x814 <LED1_OFF>
				LED2_OFF(); // Cooling element off
     31e:	0e 94 16 04 	call	0x82c	; 0x82c <LED2_OFF>
				heat_flag=0;	//raise flag of heating element
     322:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <heat_flag>
				Relay_ON();
     326:	0e 94 20 04 	call	0x840	; 0x840 <Relay_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     32a:	8f e3       	ldi	r24, 0x3F	; 63
     32c:	9c e9       	ldi	r25, 0x9C	; 156
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <main+0x134>
     332:	00 c0       	rjmp	.+0      	; 0x334 <main+0x13a>
     334:	00 00       	nop
				_delay_ms(10);
				Relay_OFF();
     336:	0e 94 26 04 	call	0x84c	; 0x84c <Relay_OFF>
			}
			
			//compare the current temp with set_temp
			
			if (current_temp >= degree - 5 && current_temp <= degree + 5)
			{
     33a:	27 c0       	rjmp	.+78     	; 0x38a <main+0x190>
				heat_flag=0;	//raise flag of heating element
				Relay_ON();
				_delay_ms(10);
				Relay_OFF();
			}
			else if(current_temp<degree-5){
     33c:	a7 01       	movw	r20, r14
     33e:	96 01       	movw	r18, r12
     340:	c5 01       	movw	r24, r10
     342:	b4 01       	movw	r22, r8
     344:	0e 94 66 09 	call	0x12cc	; 0x12cc <__gesf2>
     348:	18 16       	cp	r1, r24
     34a:	44 f4       	brge	.+16     	; 0x35c <main+0x162>
				heat_flag=1;	//raise flag of heating element
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <heat_flag>
				LED1_ON(); // Heating element on
     352:	0e 94 06 04 	call	0x80c	; 0x80c <LED1_ON>
				LED2_OFF(); // Cooling element off
     356:	0e 94 16 04 	call	0x82c	; 0x82c <LED2_OFF>
     35a:	17 c0       	rjmp	.+46     	; 0x38a <main+0x190>
			}
			else if (current_temp>degree+5)
     35c:	be 01       	movw	r22, r28
     35e:	6b 5f       	subi	r22, 0xFB	; 251
     360:	7f 4f       	sbci	r23, 0xFF	; 255
     362:	07 2e       	mov	r0, r23
     364:	00 0c       	add	r0, r0
     366:	88 0b       	sbc	r24, r24
     368:	99 0b       	sbc	r25, r25
     36a:	0e 94 b6 08 	call	0x116c	; 0x116c <__floatsisf>
     36e:	9b 01       	movw	r18, r22
     370:	ac 01       	movw	r20, r24
     372:	c7 01       	movw	r24, r14
     374:	b6 01       	movw	r22, r12
     376:	0e 94 66 09 	call	0x12cc	; 0x12cc <__gesf2>
     37a:	18 16       	cp	r1, r24
     37c:	34 f4       	brge	.+12     	; 0x38a <main+0x190>
			{
				heat_flag=0;	//raise flag of heating element
     37e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <heat_flag>
				LED1_OFF(); // Heating element off
     382:	0e 94 0a 04 	call	0x814	; 0x814 <LED1_OFF>
				LED2_ON(); // Cooling element on
     386:	0e 94 12 04 	call	0x824	; 0x824 <LED2_ON>
			}
			
			
			if (first_push_flag==0)
     38a:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <first_push_flag>
     38e:	81 11       	cpse	r24, r1
     390:	5d cf       	rjmp	.-326    	; 0x24c <main+0x52>
			{
				// LCD_Clear();
				// LCD_Write_Number(current_temp);
				SEVSEG_Display(current_temp);
     392:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <current_temp>
     396:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <current_temp+0x1>
     39a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <current_temp+0x2>
     39e:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <current_temp+0x3>
     3a2:	0e 94 85 08 	call	0x110a	; 0x110a <__fixunssfsi>
     3a6:	86 2f       	mov	r24, r22
     3a8:	0e 94 09 03 	call	0x612	; 0x612 <SEVSEG_Display>
     3ac:	4f cf       	rjmp	.-354    	; 0x24c <main+0x52>

000003ae <calcualate_avg_temp>:

//===============================================================================================


float calcualate_avg_temp(uint16_t* arr)
{
     3ae:	ac 01       	movw	r20, r24
	uint16_t sum = 0;
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     3b0:	90 e0       	ldi	r25, 0x00	; 0
//===============================================================================================


float calcualate_avg_temp(uint16_t* arr)
{
	uint16_t sum = 0;
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	70 e0       	ldi	r23, 0x00	; 0
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <calcualate_avg_temp+0x20>
	{
		sum += arr[i];
     3b8:	e9 2f       	mov	r30, r25
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	ee 0f       	add	r30, r30
     3be:	ff 1f       	adc	r31, r31
     3c0:	e4 0f       	add	r30, r20
     3c2:	f5 1f       	adc	r31, r21
     3c4:	20 81       	ld	r18, Z
     3c6:	31 81       	ldd	r19, Z+1	; 0x01
     3c8:	62 0f       	add	r22, r18
     3ca:	73 1f       	adc	r23, r19

float calcualate_avg_temp(uint16_t* arr)
{
	uint16_t sum = 0;
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     3cc:	9f 5f       	subi	r25, 0xFF	; 255
     3ce:	9a 30       	cpi	r25, 0x0A	; 10
     3d0:	98 f3       	brcs	.-26     	; 0x3b8 <calcualate_avg_temp+0xa>
	{
		sum += arr[i];
	}
	
	return (float ) sum / (float ) 10;
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatunsisf>
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	40 e2       	ldi	r20, 0x20	; 32
     3e0:	51 e4       	ldi	r21, 0x41	; 65
     3e2:	0e 94 13 08 	call	0x1026	; 0x1026 <__divsf3>
}
     3e6:	08 95       	ret

000003e8 <__vector_11>:

//===============================================================================================



ISR(TIMER0_OVF_vect){
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	2f 93       	push	r18
     3f4:	3f 93       	push	r19
     3f6:	4f 93       	push	r20
     3f8:	5f 93       	push	r21
     3fa:	6f 93       	push	r22
     3fc:	7f 93       	push	r23
     3fe:	8f 93       	push	r24
     400:	9f 93       	push	r25
     402:	af 93       	push	r26
     404:	bf 93       	push	r27
     406:	ef 93       	push	r30
     408:	ff 93       	push	r31
	
	static uint32_t cnt=0;
	if(test==1){	//restart count from 0 if user press the buttons
     40a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <test>
     40e:	81 30       	cpi	r24, 0x01	; 1
     410:	51 f4       	brne	.+20     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		cnt=0;
     412:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.2133>
     416:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.2133+0x1>
     41a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <cnt.2133+0x2>
     41e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <cnt.2133+0x3>
		test=0;
     422:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <test>
	}
	if(cnt==Number_OVF){		//if counter reach number of overflows
     426:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <cnt.2133>
     42a:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <cnt.2133+0x1>
     42e:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <cnt.2133+0x2>
     432:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <cnt.2133+0x3>
     436:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <Number_OVF>
     43a:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <Number_OVF+0x1>
     43e:	a0 91 93 00 	lds	r26, 0x0093	; 0x800093 <Number_OVF+0x2>
     442:	b0 91 94 00 	lds	r27, 0x0094	; 0x800094 <Number_OVF+0x3>
     446:	48 17       	cp	r20, r24
     448:	59 07       	cpc	r21, r25
     44a:	6a 07       	cpc	r22, r26
     44c:	7b 07       	cpc	r23, r27
     44e:	61 f4       	brne	.+24     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
		Timer0_Stop();			//stop the timer
     450:	0e 94 48 06 	call	0xc90	; 0xc90 <Timer0_Stop>
		first_push_flag=0;
     454:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <first_push_flag>
		cnt=0;					//make  counter =0
     458:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.2133>
     45c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.2133+0x1>
     460:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <cnt.2133+0x2>
     464:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <cnt.2133+0x3>
	else if(cnt%(Number_OVF/5)==0){
		LCD_Write_Number(degree);
		//SEVSEG_Display(degree);
	}
	*/
	cnt++;
     468:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cnt.2133>
     46c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cnt.2133+0x1>
     470:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <cnt.2133+0x2>
     474:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <cnt.2133+0x3>
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	a1 1d       	adc	r26, r1
     47c:	b1 1d       	adc	r27, r1
     47e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <cnt.2133>
     482:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <cnt.2133+0x1>
     486:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <cnt.2133+0x2>
     48a:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <cnt.2133+0x3>
}
     48e:	ff 91       	pop	r31
     490:	ef 91       	pop	r30
     492:	bf 91       	pop	r27
     494:	af 91       	pop	r26
     496:	9f 91       	pop	r25
     498:	8f 91       	pop	r24
     49a:	7f 91       	pop	r23
     49c:	6f 91       	pop	r22
     49e:	5f 91       	pop	r21
     4a0:	4f 91       	pop	r20
     4a2:	3f 91       	pop	r19
     4a4:	2f 91       	pop	r18
     4a6:	0f 90       	pop	r0
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	0f 90       	pop	r0
     4ac:	1f 90       	pop	r1
     4ae:	18 95       	reti

000004b0 <__vector_5>:

//===============================================================================================


ISR(TIMER2_OVF_vect)
{
     4b0:	1f 92       	push	r1
     4b2:	0f 92       	push	r0
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	0f 92       	push	r0
     4b8:	11 24       	eor	r1, r1
     4ba:	2f 93       	push	r18
     4bc:	3f 93       	push	r19
     4be:	4f 93       	push	r20
     4c0:	5f 93       	push	r21
     4c2:	6f 93       	push	r22
     4c4:	7f 93       	push	r23
     4c6:	8f 93       	push	r24
     4c8:	9f 93       	push	r25
     4ca:	af 93       	push	r26
     4cc:	bf 93       	push	r27
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	ef 93       	push	r30
     4d4:	ff 93       	push	r31
	static uint32_t timer2_count = 0;
	
	if (first_push_flag == 1)
     4d6:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <first_push_flag>
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	69 f4       	brne	.+26     	; 0x4f8 <__vector_5+0x48>
	{
		if( blink_7_segment )
     4de:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <blink_7_segment>
     4e2:	88 23       	and	r24, r24
     4e4:	29 f0       	breq	.+10     	; 0x4f0 <__vector_5+0x40>
		{
			SEVSEG_Display(degree);
     4e6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <degree>
     4ea:	0e 94 09 03 	call	0x612	; 0x612 <SEVSEG_Display>
     4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <__vector_5+0x48>
		}
		else
		{
			SEVSEG_Disable1();
     4f0:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SEVSEG_Disable1>
			SEVSEG_Disable2();
     4f4:	0e 94 03 03 	call	0x606	; 0x606 <SEVSEG_Disable2>
	else
	{
		SEVSEG_Display(current_temp);
	}
	*/
	if(timer2_count < Timer2_OVF)
     4f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     4fc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
     500:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <__data_end+0x2>
     504:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <__data_end+0x3>
     508:	40 91 9f 00 	lds	r20, 0x009F	; 0x80009f <Timer2_OVF>
     50c:	50 91 a0 00 	lds	r21, 0x00A0	; 0x8000a0 <Timer2_OVF+0x1>
     510:	60 91 a1 00 	lds	r22, 0x00A1	; 0x8000a1 <Timer2_OVF+0x2>
     514:	70 91 a2 00 	lds	r23, 0x00A2	; 0x8000a2 <Timer2_OVF+0x3>
     518:	84 17       	cp	r24, r20
     51a:	95 07       	cpc	r25, r21
     51c:	a6 07       	cpc	r26, r22
     51e:	b7 07       	cpc	r27, r23
     520:	60 f4       	brcc	.+24     	; 0x53a <__vector_5+0x8a>
	{
		timer2_count++;
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	a1 1d       	adc	r26, r1
     526:	b1 1d       	adc	r27, r1
     528:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
     52c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
     530:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <__data_end+0x2>
     534:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <__data_end+0x3>
     538:	41 c0       	rjmp	.+130    	; 0x5bc <__vector_5+0x10c>
	}
	else
	{
		// ADC read
		last_10_temp[temp_index] = (500.0 * ADC_Read()) / 1024.0 ; // degree
     53a:	c0 91 6b 00 	lds	r28, 0x006B	; 0x80006b <temp_index>
     53e:	d0 e0       	ldi	r29, 0x00	; 0
     540:	0e 94 58 04 	call	0x8b0	; 0x8b0 <ADC_Read>
     544:	bc 01       	movw	r22, r24
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 b4 08 	call	0x1168	; 0x1168 <__floatunsisf>
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	4a ef       	ldi	r20, 0xFA	; 250
     554:	53 e4       	ldi	r21, 0x43	; 67
     556:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__mulsf3>
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	40 e8       	ldi	r20, 0x80	; 128
     560:	5a e3       	ldi	r21, 0x3A	; 58
     562:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__mulsf3>
     566:	cc 0f       	add	r28, r28
     568:	dd 1f       	adc	r29, r29
     56a:	c4 59       	subi	r28, 0x94	; 148
     56c:	df 4f       	sbci	r29, 0xFF	; 255
     56e:	0e 94 85 08 	call	0x110a	; 0x110a <__fixunssfsi>
     572:	79 83       	std	Y+1, r23	; 0x01
     574:	68 83       	st	Y, r22
		temp_index++;
     576:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <temp_index>
     57a:	8f 5f       	subi	r24, 0xFF	; 255
     57c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <temp_index>

		if(temp_index > 9)
     580:	8a 30       	cpi	r24, 0x0A	; 10
     582:	a0 f0       	brcs	.+40     	; 0x5ac <__vector_5+0xfc>
		{
			temp_index = 0;
     584:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <temp_index>
			current_temp=calcualate_avg_temp(last_10_temp);
     588:	8c e6       	ldi	r24, 0x6C	; 108
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <calcualate_avg_temp>
     590:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <current_temp>
     594:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <current_temp+0x1>
     598:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <current_temp+0x2>
     59c:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <current_temp+0x3>
			
			blink_7_segment ^= 1;
     5a0:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <blink_7_segment>
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	89 27       	eor	r24, r25
     5a8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <blink_7_segment>
		}
		timer2_count = 0;
     5ac:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
     5b0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
     5b4:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
     5b8:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>

	}
}
     5bc:	ff 91       	pop	r31
     5be:	ef 91       	pop	r30
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	bf 91       	pop	r27
     5c6:	af 91       	pop	r26
     5c8:	9f 91       	pop	r25
     5ca:	8f 91       	pop	r24
     5cc:	7f 91       	pop	r23
     5ce:	6f 91       	pop	r22
     5d0:	5f 91       	pop	r21
     5d2:	4f 91       	pop	r20
     5d4:	3f 91       	pop	r19
     5d6:	2f 91       	pop	r18
     5d8:	0f 90       	pop	r0
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	0f 90       	pop	r0
     5de:	1f 90       	pop	r1
     5e0:	18 95       	reti

000005e2 <SEVSEG_Enable1>:
{
	DIO_SetPinValue(SEVSEG_CTRL_PORT, SEVSEG_PIN_DOT, SEVSEG_HIGH);
}
void SEVSEG_Dot_Disable(void)//Disable dot
{
	DIO_SetPinValue(SEVSEG_CTRL_PORT, SEVSEG_PIN_DOT, SEVSEG_LOW);
     5e2:	41 e0       	ldi	r20, 0x01	; 1
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinValue>
     5ec:	08 95       	ret

000005ee <SEVSEG_Disable1>:
     5ee:	40 e0       	ldi	r20, 0x00	; 0
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinValue>
     5f8:	08 95       	ret

000005fa <SEVSEG_Enable2>:
     5fa:	41 e0       	ldi	r20, 0x01	; 1
     5fc:	62 e0       	ldi	r22, 0x02	; 2
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinValue>
     604:	08 95       	ret

00000606 <SEVSEG_Disable2>:
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	62 e0       	ldi	r22, 0x02	; 2
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinValue>
     610:	08 95       	ret

00000612 <SEVSEG_Display>:
}
void SEVSEG_Display(uint8_t number)
{
     612:	cf 93       	push	r28
	uint8_t num1 = number%10;
     614:	9d ec       	ldi	r25, 0xCD	; 205
     616:	89 9f       	mul	r24, r25
     618:	91 2d       	mov	r25, r1
     61a:	11 24       	eor	r1, r1
     61c:	29 2f       	mov	r18, r25
     61e:	26 95       	lsr	r18
     620:	26 95       	lsr	r18
     622:	26 95       	lsr	r18
     624:	22 0f       	add	r18, r18
     626:	32 2f       	mov	r19, r18
     628:	33 0f       	add	r19, r19
     62a:	33 0f       	add	r19, r19
     62c:	23 0f       	add	r18, r19
     62e:	82 1b       	sub	r24, r18
     630:	28 2f       	mov	r18, r24
	uint8_t num2 = number/10;
     632:	c9 2f       	mov	r28, r25
     634:	c6 95       	lsr	r28
     636:	c6 95       	lsr	r28
     638:	c6 95       	lsr	r28
	PORTA = (num1 << 4);
     63a:	22 95       	swap	r18
     63c:	20 7f       	andi	r18, 0xF0	; 240
     63e:	2b bb       	out	0x1b, r18	; 27
	SEVSEG_Enable1();
     640:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SEVSEG_Enable1>
	SEVSEG_Disable2();
     644:	0e 94 03 03 	call	0x606	; 0x606 <SEVSEG_Disable2>
     648:	8f e3       	ldi	r24, 0x3F	; 63
     64a:	9c e9       	ldi	r25, 0x9C	; 156
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <SEVSEG_Display+0x3a>
     650:	00 c0       	rjmp	.+0      	; 0x652 <SEVSEG_Display+0x40>
     652:	00 00       	nop
	_delay_ms(10);
	PORTA = (num2 << 4);
     654:	9c 2f       	mov	r25, r28
     656:	92 95       	swap	r25
     658:	90 7f       	andi	r25, 0xF0	; 240
     65a:	9b bb       	out	0x1b, r25	; 27
	SEVSEG_Disable1();
     65c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <SEVSEG_Disable1>
	SEVSEG_Enable2();
     660:	0e 94 fd 02 	call	0x5fa	; 0x5fa <SEVSEG_Enable2>
     664:	8f e3       	ldi	r24, 0x3F	; 63
     666:	9c e9       	ldi	r25, 0x9C	; 156
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <SEVSEG_Display+0x56>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <SEVSEG_Display+0x5c>
     66e:	00 00       	nop
	_delay_ms(10);
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <BTN0_Initialization>:
#include "PushBTN0.h"


void BTN0_Initialization(void)
{
	DIO_SetPinDirection(BTN0_PORT, BTN0_PIN, BTN0_INP);
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <DIO_SetPinDirection>
	DIO_SetPinPullUp(BTN0_PORT , BTN0_PIN);
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	0e 94 76 05 	call	0xaec	; 0xaec <DIO_SetPinPullUp>
     686:	08 95       	ret

00000688 <BTN0_Read>:

uint8_t BTN0_Read(void)
{
	uint8_t Btn = NPRESSED;
	uint8_t val = 0;
	val = DIO_ReadPinValue(BTN0_PORT, BTN0_PIN);
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	0e 94 42 05 	call	0xa84	; 0xa84 <DIO_ReadPinValue>
     690:	ef e3       	ldi	r30, 0x3F	; 63
     692:	fc e9       	ldi	r31, 0x9C	; 156
     694:	31 97       	sbiw	r30, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <BTN0_Read+0xc>
     698:	00 c0       	rjmp	.+0      	; 0x69a <BTN0_Read+0x12>
     69a:	00 00       	nop
	{
		Btn = DIO_ReadPinValue(BTN0_PORT, BTN0_PIN);
	}
	_delay_ms(10);
	return val;
}
     69c:	08 95       	ret

0000069e <BTN1_Initialization>:
#include "PushBTN1.h"


void BTN1_Initialization(void)
{
	DIO_SetPinDirection(BTN1_PORT, BTN1_PIN, BTN1_INP);
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	66 e0       	ldi	r22, 0x06	; 6
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <DIO_SetPinDirection>
     6a8:	08 95       	ret

000006aa <BTN1_Read>:

uint8_t BTN1_Read(void)
{
	uint8_t Btn = NPRESSED;
	uint8_t val = 0;
	val = DIO_ReadPinValue(BTN1_PORT, BTN1_PIN);
     6aa:	66 e0       	ldi	r22, 0x06	; 6
     6ac:	83 e0       	ldi	r24, 0x03	; 3
     6ae:	0e 94 42 05 	call	0xa84	; 0xa84 <DIO_ReadPinValue>
     6b2:	ef e3       	ldi	r30, 0x3F	; 63
     6b4:	fc e9       	ldi	r31, 0x9C	; 156
     6b6:	31 97       	sbiw	r30, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <BTN1_Read+0xc>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <BTN1_Read+0x12>
     6bc:	00 00       	nop
	{
		Btn = DIO_ReadPinValue(BTN1_PORT, BTN1_PIN);
	}
	_delay_ms(10);
	return val;
}
     6be:	08 95       	ret

000006c0 <LCD_Write_Command>:
	{
		LCD_Write_Character(customChatacter[iter]);
	}
	/*Choose location*/
	LCD_Location(loc[0], loc[1]);
}
     6c0:	cf 93       	push	r28
     6c2:	c8 2f       	mov	r28, r24
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	61 e0       	ldi	r22, 0x01	; 1
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinValue>
     6ce:	40 e0       	ldi	r20, 0x00	; 0
     6d0:	62 e0       	ldi	r22, 0x02	; 2
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinValue>
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	63 e0       	ldi	r22, 0x03	; 3
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinValue>
     6e2:	8b b3       	in	r24, 0x1b	; 27
     6e4:	9c 2f       	mov	r25, r28
     6e6:	90 7f       	andi	r25, 0xF0	; 240
     6e8:	8f 70       	andi	r24, 0x0F	; 15
     6ea:	89 2b       	or	r24, r25
     6ec:	8b bb       	out	0x1b, r24	; 27
     6ee:	41 e0       	ldi	r20, 0x01	; 1
     6f0:	63 e0       	ldi	r22, 0x03	; 3
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinValue>
     6f8:	8f e9       	ldi	r24, 0x9F	; 159
     6fa:	9f e0       	ldi	r25, 0x0F	; 15
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <LCD_Write_Command+0x3c>
     700:	00 c0       	rjmp	.+0      	; 0x702 <LCD_Write_Command+0x42>
     702:	00 00       	nop
     704:	40 e0       	ldi	r20, 0x00	; 0
     706:	63 e0       	ldi	r22, 0x03	; 3
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinValue>
     70e:	20 e1       	ldi	r18, 0x10	; 16
     710:	c2 9f       	mul	r28, r18
     712:	c0 01       	movw	r24, r0
     714:	11 24       	eor	r1, r1
     716:	9b b3       	in	r25, 0x1b	; 27
     718:	9f 70       	andi	r25, 0x0F	; 15
     71a:	89 2b       	or	r24, r25
     71c:	8b bb       	out	0x1b, r24	; 27
     71e:	41 e0       	ldi	r20, 0x01	; 1
     720:	63 e0       	ldi	r22, 0x03	; 3
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinValue>
     728:	8f e9       	ldi	r24, 0x9F	; 159
     72a:	9f e0       	ldi	r25, 0x0F	; 15
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <LCD_Write_Command+0x6c>
     730:	00 c0       	rjmp	.+0      	; 0x732 <LCD_Write_Command+0x72>
     732:	00 00       	nop
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	63 e0       	ldi	r22, 0x03	; 3
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinValue>
     73e:	8f e1       	ldi	r24, 0x1F	; 31
     740:	9e e4       	ldi	r25, 0x4E	; 78
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <LCD_Write_Command+0x82>
     746:	00 c0       	rjmp	.+0      	; 0x748 <LCD_Write_Command+0x88>
     748:	00 00       	nop
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <LCD_Initialization>:
     74e:	41 e0       	ldi	r20, 0x01	; 1
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	0e 94 60 04 	call	0x8c0	; 0x8c0 <DIO_SetPinDirection>
     758:	41 e0       	ldi	r20, 0x01	; 1
     75a:	62 e0       	ldi	r22, 0x02	; 2
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <DIO_SetPinDirection>
     762:	41 e0       	ldi	r20, 0x01	; 1
     764:	63 e0       	ldi	r22, 0x03	; 3
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	0e 94 60 04 	call	0x8c0	; 0x8c0 <DIO_SetPinDirection>
     76c:	41 e0       	ldi	r20, 0x01	; 1
     76e:	64 e0       	ldi	r22, 0x04	; 4
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	0e 94 60 04 	call	0x8c0	; 0x8c0 <DIO_SetPinDirection>
     776:	41 e0       	ldi	r20, 0x01	; 1
     778:	65 e0       	ldi	r22, 0x05	; 5
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <DIO_SetPinDirection>
     780:	41 e0       	ldi	r20, 0x01	; 1
     782:	66 e0       	ldi	r22, 0x06	; 6
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	0e 94 60 04 	call	0x8c0	; 0x8c0 <DIO_SetPinDirection>
     78a:	41 e0       	ldi	r20, 0x01	; 1
     78c:	67 e0       	ldi	r22, 0x07	; 7
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 60 04 	call	0x8c0	; 0x8c0 <DIO_SetPinDirection>
     794:	83 e3       	ldi	r24, 0x33	; 51
     796:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_Write_Command>
     79a:	82 e3       	ldi	r24, 0x32	; 50
     79c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_Write_Command>
     7a0:	88 e2       	ldi	r24, 0x28	; 40
     7a2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_Write_Command>
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_Write_Command>
     7ac:	8c e0       	ldi	r24, 0x0C	; 12
     7ae:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_Write_Command>
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_Write_Command>
     7b8:	86 e0       	ldi	r24, 0x06	; 6
     7ba:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_Write_Command>
     7be:	08 95       	ret

000007c0 <LCD_disable>:

void LCD_disable(){
	
		DIO_SetPinDirection(LCD_CTRL_PORT, LCD_RS, 0);
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	0e 94 60 04 	call	0x8c0	; 0x8c0 <DIO_SetPinDirection>
		DIO_SetPinDirection(LCD_CTRL_PORT, LCD_RW, 0);
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	62 e0       	ldi	r22, 0x02	; 2
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <DIO_SetPinDirection>
		DIO_SetPinDirection(LCD_CTRL_PORT, LCD_EN, 0);
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	63 e0       	ldi	r22, 0x03	; 3
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	0e 94 60 04 	call	0x8c0	; 0x8c0 <DIO_SetPinDirection>
     7de:	08 95       	ret

000007e0 <LED0_Initialization>:
#include "LED0.h"

void LED0_Initialization(void)
{
	//SET_BIT(LED0_DDR, LED0);
	DIO_SetPinDirection(LED0_PORT, LED0, LED0_OUT);
     7e0:	41 e0       	ldi	r20, 0x01	; 1
     7e2:	62 e0       	ldi	r22, 0x02	; 2
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	0e 94 60 04 	call	0x8c0	; 0x8c0 <DIO_SetPinDirection>
     7ea:	08 95       	ret

000007ec <LED0_ON>:
}
void LED0_ON(void)
{
	//SET_BIT(LED0_PORT, LED0);
	DIO_SetPinValue(LED0_PORT, LED0, LED0_ONN);
     7ec:	41 e0       	ldi	r20, 0x01	; 1
     7ee:	62 e0       	ldi	r22, 0x02	; 2
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinValue>
     7f6:	08 95       	ret

000007f8 <LED0_OFF>:
}
void LED0_OFF(void)
{
	//CLR_BIT(LED0_PORT, LED0);
	DIO_SetPinValue(LED0_PORT, LED0, LED0_OFFF);
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	62 e0       	ldi	r22, 0x02	; 2
     7fc:	82 e0       	ldi	r24, 0x02	; 2
     7fe:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinValue>
     802:	08 95       	ret

00000804 <LED1_Initialization>:
 */ 
#include "LED1.h"

void LED1_Initialization(void)
{
	SET_BIT(LED1_DDR, LED1);
     804:	84 b3       	in	r24, 0x14	; 20
     806:	80 68       	ori	r24, 0x80	; 128
     808:	84 bb       	out	0x14, r24	; 20
     80a:	08 95       	ret

0000080c <LED1_ON>:
}
void LED1_ON(void)
{
	SET_BIT(LED1_PORT, LED1);
     80c:	85 b3       	in	r24, 0x15	; 21
     80e:	80 68       	ori	r24, 0x80	; 128
     810:	85 bb       	out	0x15, r24	; 21
     812:	08 95       	ret

00000814 <LED1_OFF>:
}
void LED1_OFF(void)
{
	CLR_BIT(LED1_PORT, LED1);
     814:	85 b3       	in	r24, 0x15	; 21
     816:	8f 77       	andi	r24, 0x7F	; 127
     818:	85 bb       	out	0x15, r24	; 21
     81a:	08 95       	ret

0000081c <LED2_Initialization>:
 */ 
#include "LED2.h"

void LED2_Initialization(void)
{
	SET_BIT(LED2_DDR, LED2);
     81c:	81 b3       	in	r24, 0x11	; 17
     81e:	88 60       	ori	r24, 0x08	; 8
     820:	81 bb       	out	0x11, r24	; 17
     822:	08 95       	ret

00000824 <LED2_ON>:
}
void LED2_ON(void)
{
	SET_BIT(LED2_PORT, LED2);
     824:	82 b3       	in	r24, 0x12	; 18
     826:	88 60       	ori	r24, 0x08	; 8
     828:	82 bb       	out	0x12, r24	; 18
     82a:	08 95       	ret

0000082c <LED2_OFF>:
}
void LED2_OFF(void)
{
	CLR_BIT(LED2_PORT, LED2);
     82c:	82 b3       	in	r24, 0x12	; 18
     82e:	87 7f       	andi	r24, 0xF7	; 247
     830:	82 bb       	out	0x12, r24	; 18
     832:	08 95       	ret

00000834 <Relay_Initialization>:
#include "Relay.h"


void Relay_Initialization(void)
{
	DIO_SetPinDirection(RELAY_PORT, RELAY_PIN, RELAY_OUT);
     834:	41 e0       	ldi	r20, 0x01	; 1
     836:	62 e0       	ldi	r22, 0x02	; 2
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <DIO_SetPinDirection>
     83e:	08 95       	ret

00000840 <Relay_ON>:
}
void Relay_ON(void)
{
	DIO_SetPinValue(RELAY_PORT, RELAY_PIN, RELAY_HIGH);
     840:	41 e0       	ldi	r20, 0x01	; 1
     842:	62 e0       	ldi	r22, 0x02	; 2
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinValue>
     84a:	08 95       	ret

0000084c <Relay_OFF>:
}
void Relay_OFF(void)
{
	DIO_SetPinValue(RELAY_PORT, RELAY_PIN, RELAY_LOW);
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	62 e0       	ldi	r22, 0x02	; 2
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <DIO_SetPinValue>
     856:	08 95       	ret

00000858 <ADC_Initialization>:
	/*
	1- Select voltage refernce
	2- Select left or right adjust
	3- Select chanel (1)
	*/
	switch(chanel)
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	88 30       	cpi	r24, 0x08	; 8
     85c:	91 05       	cpc	r25, r1
     85e:	20 f5       	brcc	.+72     	; 0x8a8 <__stack+0x49>
     860:	fc 01       	movw	r30, r24
     862:	e6 5d       	subi	r30, 0xD6	; 214
     864:	ff 4f       	sbci	r31, 0xFF	; 255
     866:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__tablejump2__>
	{
		case ADC0:
		ADMUX |= 0b01000000;//0x40
     86a:	87 b1       	in	r24, 0x07	; 7
     86c:	80 64       	ori	r24, 0x40	; 64
     86e:	87 b9       	out	0x07, r24	; 7
		break;
     870:	1b c0       	rjmp	.+54     	; 0x8a8 <__stack+0x49>
		case ADC1:
		ADMUX |= 0b01000001;//0x41
     872:	87 b1       	in	r24, 0x07	; 7
     874:	81 64       	ori	r24, 0x41	; 65
     876:	87 b9       	out	0x07, r24	; 7
		break;
     878:	17 c0       	rjmp	.+46     	; 0x8a8 <__stack+0x49>
		case ADC2:
		ADMUX |= 0b01000010;//0x42
     87a:	87 b1       	in	r24, 0x07	; 7
     87c:	82 64       	ori	r24, 0x42	; 66
     87e:	87 b9       	out	0x07, r24	; 7
		break;
     880:	13 c0       	rjmp	.+38     	; 0x8a8 <__stack+0x49>
		case ADC3:
		ADMUX |= 0b01000011;//0x43
     882:	87 b1       	in	r24, 0x07	; 7
     884:	83 64       	ori	r24, 0x43	; 67
     886:	87 b9       	out	0x07, r24	; 7
		break;
     888:	0f c0       	rjmp	.+30     	; 0x8a8 <__stack+0x49>
		case ADC4:
		ADMUX |= 0b01000100;//0x44
     88a:	87 b1       	in	r24, 0x07	; 7
     88c:	84 64       	ori	r24, 0x44	; 68
     88e:	87 b9       	out	0x07, r24	; 7
		break;
     890:	0b c0       	rjmp	.+22     	; 0x8a8 <__stack+0x49>
		case ADC5:
		ADMUX |= 0b01000101;//0x45
     892:	87 b1       	in	r24, 0x07	; 7
     894:	85 64       	ori	r24, 0x45	; 69
     896:	87 b9       	out	0x07, r24	; 7
		break;
     898:	07 c0       	rjmp	.+14     	; 0x8a8 <__stack+0x49>
		case ADC6:
		ADMUX |= 0b01000110;//0x46
     89a:	87 b1       	in	r24, 0x07	; 7
     89c:	86 64       	ori	r24, 0x46	; 70
     89e:	87 b9       	out	0x07, r24	; 7
		break;
     8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <__stack+0x49>
		case ADC7:
		ADMUX |= 0b01000111;//0x47
     8a2:	87 b1       	in	r24, 0x07	; 7
     8a4:	87 64       	ori	r24, 0x47	; 71
     8a6:	87 b9       	out	0x07, r24	; 7
	/*
	1- Auto trigger mode
	2- Select prescaler
	3- enable ADC
	*/
	ADCSRA |= 0b10100111;//0xA7
     8a8:	86 b1       	in	r24, 0x06	; 6
     8aa:	87 6a       	ori	r24, 0xA7	; 167
     8ac:	86 b9       	out	0x06, r24	; 6
     8ae:	08 95       	ret

000008b0 <ADC_Read>:
}

uint16_t ADC_Read(void)
{
	uint16_t data = 0;
	SET_BIT(ADCSRA, ADSC);
     8b0:	86 b1       	in	r24, 0x06	; 6
     8b2:	80 64       	ori	r24, 0x40	; 64
     8b4:	86 b9       	out	0x06, r24	; 6
	while(GET_BIT(ADCSRA, ADIF) != 1);//wait until conversion finished
     8b6:	34 9b       	sbis	0x06, 4	; 6
     8b8:	fe cf       	rjmp	.-4      	; 0x8b6 <ADC_Read+0x6>
	data = ADC_DATA;
     8ba:	84 b1       	in	r24, 0x04	; 4
     8bc:	95 b1       	in	r25, 0x05	; 5
	return data;
     8be:	08 95       	ret

000008c0 <DIO_SetPinDirection>:
		break;
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
		break;
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
     8c0:	44 23       	and	r20, r20
     8c2:	19 f0       	breq	.+6      	; 0x8ca <DIO_SetPinDirection+0xa>
     8c4:	41 30       	cpi	r20, 0x01	; 1
     8c6:	c9 f1       	breq	.+114    	; 0x93a <DIO_SetPinDirection+0x7a>
     8c8:	08 95       	ret
     8ca:	81 30       	cpi	r24, 0x01	; 1
     8cc:	91 f0       	breq	.+36     	; 0x8f2 <DIO_SetPinDirection+0x32>
     8ce:	28 f0       	brcs	.+10     	; 0x8da <DIO_SetPinDirection+0x1a>
     8d0:	82 30       	cpi	r24, 0x02	; 2
     8d2:	d9 f0       	breq	.+54     	; 0x90a <DIO_SetPinDirection+0x4a>
     8d4:	83 30       	cpi	r24, 0x03	; 3
     8d6:	29 f1       	breq	.+74     	; 0x922 <DIO_SetPinDirection+0x62>
     8d8:	08 95       	ret
     8da:	2a b3       	in	r18, 0x1a	; 26
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <DIO_SetPinDirection+0x26>
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	6a 95       	dec	r22
     8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <DIO_SetPinDirection+0x22>
     8ea:	80 95       	com	r24
     8ec:	82 23       	and	r24, r18
     8ee:	8a bb       	out	0x1a, r24	; 26
     8f0:	08 95       	ret
     8f2:	27 b3       	in	r18, 0x17	; 23
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <DIO_SetPinDirection+0x3e>
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	6a 95       	dec	r22
     900:	e2 f7       	brpl	.-8      	; 0x8fa <DIO_SetPinDirection+0x3a>
     902:	80 95       	com	r24
     904:	82 23       	and	r24, r18
     906:	87 bb       	out	0x17, r24	; 23
     908:	08 95       	ret
     90a:	24 b3       	in	r18, 0x14	; 20
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	02 c0       	rjmp	.+4      	; 0x916 <DIO_SetPinDirection+0x56>
     912:	88 0f       	add	r24, r24
     914:	99 1f       	adc	r25, r25
     916:	6a 95       	dec	r22
     918:	e2 f7       	brpl	.-8      	; 0x912 <DIO_SetPinDirection+0x52>
     91a:	80 95       	com	r24
     91c:	82 23       	and	r24, r18
     91e:	84 bb       	out	0x14, r24	; 20
     920:	08 95       	ret
     922:	21 b3       	in	r18, 0x11	; 17
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	02 c0       	rjmp	.+4      	; 0x92e <DIO_SetPinDirection+0x6e>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	6a 95       	dec	r22
     930:	e2 f7       	brpl	.-8      	; 0x92a <DIO_SetPinDirection+0x6a>
     932:	80 95       	com	r24
     934:	82 23       	and	r24, r18
     936:	81 bb       	out	0x11, r24	; 17
     938:	08 95       	ret
     93a:	81 30       	cpi	r24, 0x01	; 1
     93c:	89 f0       	breq	.+34     	; 0x960 <DIO_SetPinDirection+0xa0>
     93e:	28 f0       	brcs	.+10     	; 0x94a <DIO_SetPinDirection+0x8a>
     940:	82 30       	cpi	r24, 0x02	; 2
     942:	c9 f0       	breq	.+50     	; 0x976 <DIO_SetPinDirection+0xb6>
     944:	83 30       	cpi	r24, 0x03	; 3
     946:	11 f1       	breq	.+68     	; 0x98c <DIO_SetPinDirection+0xcc>
     948:	08 95       	ret
     94a:	2a b3       	in	r18, 0x1a	; 26
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	02 c0       	rjmp	.+4      	; 0x956 <DIO_SetPinDirection+0x96>
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	6a 95       	dec	r22
     958:	e2 f7       	brpl	.-8      	; 0x952 <DIO_SetPinDirection+0x92>
     95a:	82 2b       	or	r24, r18
     95c:	8a bb       	out	0x1a, r24	; 26
     95e:	08 95       	ret
     960:	27 b3       	in	r18, 0x17	; 23
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	02 c0       	rjmp	.+4      	; 0x96c <DIO_SetPinDirection+0xac>
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	6a 95       	dec	r22
     96e:	e2 f7       	brpl	.-8      	; 0x968 <DIO_SetPinDirection+0xa8>
     970:	82 2b       	or	r24, r18
     972:	87 bb       	out	0x17, r24	; 23
     974:	08 95       	ret
     976:	24 b3       	in	r18, 0x14	; 20
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	02 c0       	rjmp	.+4      	; 0x982 <DIO_SetPinDirection+0xc2>
     97e:	88 0f       	add	r24, r24
     980:	99 1f       	adc	r25, r25
     982:	6a 95       	dec	r22
     984:	e2 f7       	brpl	.-8      	; 0x97e <DIO_SetPinDirection+0xbe>
     986:	82 2b       	or	r24, r18
     988:	84 bb       	out	0x14, r24	; 20
     98a:	08 95       	ret
     98c:	21 b3       	in	r18, 0x11	; 17
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	02 c0       	rjmp	.+4      	; 0x998 <DIO_SetPinDirection+0xd8>
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	6a 95       	dec	r22
     99a:	e2 f7       	brpl	.-8      	; 0x994 <DIO_SetPinDirection+0xd4>
     99c:	82 2b       	or	r24, r18
     99e:	81 bb       	out	0x11, r24	; 17
     9a0:	08 95       	ret

000009a2 <DIO_SetPinValue>:
     9a2:	44 23       	and	r20, r20
     9a4:	19 f0       	breq	.+6      	; 0x9ac <DIO_SetPinValue+0xa>
     9a6:	41 30       	cpi	r20, 0x01	; 1
     9a8:	c9 f1       	breq	.+114    	; 0xa1c <DIO_SetPinValue+0x7a>
     9aa:	08 95       	ret
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	91 f0       	breq	.+36     	; 0x9d4 <DIO_SetPinValue+0x32>
     9b0:	28 f0       	brcs	.+10     	; 0x9bc <DIO_SetPinValue+0x1a>
     9b2:	82 30       	cpi	r24, 0x02	; 2
     9b4:	d9 f0       	breq	.+54     	; 0x9ec <DIO_SetPinValue+0x4a>
     9b6:	83 30       	cpi	r24, 0x03	; 3
     9b8:	29 f1       	breq	.+74     	; 0xa04 <DIO_SetPinValue+0x62>
     9ba:	08 95       	ret
     9bc:	2b b3       	in	r18, 0x1b	; 27
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <DIO_SetPinValue+0x26>
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	6a 95       	dec	r22
     9ca:	e2 f7       	brpl	.-8      	; 0x9c4 <DIO_SetPinValue+0x22>
     9cc:	80 95       	com	r24
     9ce:	82 23       	and	r24, r18
     9d0:	8b bb       	out	0x1b, r24	; 27
     9d2:	08 95       	ret
     9d4:	28 b3       	in	r18, 0x18	; 24
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <DIO_SetPinValue+0x3e>
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	6a 95       	dec	r22
     9e2:	e2 f7       	brpl	.-8      	; 0x9dc <DIO_SetPinValue+0x3a>
     9e4:	80 95       	com	r24
     9e6:	82 23       	and	r24, r18
     9e8:	88 bb       	out	0x18, r24	; 24
     9ea:	08 95       	ret
     9ec:	25 b3       	in	r18, 0x15	; 21
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <DIO_SetPinValue+0x56>
     9f4:	88 0f       	add	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	6a 95       	dec	r22
     9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <DIO_SetPinValue+0x52>
     9fc:	80 95       	com	r24
     9fe:	82 23       	and	r24, r18
     a00:	85 bb       	out	0x15, r24	; 21
     a02:	08 95       	ret
     a04:	22 b3       	in	r18, 0x12	; 18
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <DIO_SetPinValue+0x6e>
     a0c:	88 0f       	add	r24, r24
     a0e:	99 1f       	adc	r25, r25
     a10:	6a 95       	dec	r22
     a12:	e2 f7       	brpl	.-8      	; 0xa0c <DIO_SetPinValue+0x6a>
     a14:	80 95       	com	r24
     a16:	82 23       	and	r24, r18
     a18:	82 bb       	out	0x12, r24	; 18
     a1a:	08 95       	ret
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	89 f0       	breq	.+34     	; 0xa42 <DIO_SetPinValue+0xa0>
     a20:	28 f0       	brcs	.+10     	; 0xa2c <DIO_SetPinValue+0x8a>
     a22:	82 30       	cpi	r24, 0x02	; 2
     a24:	c9 f0       	breq	.+50     	; 0xa58 <DIO_SetPinValue+0xb6>
     a26:	83 30       	cpi	r24, 0x03	; 3
     a28:	11 f1       	breq	.+68     	; 0xa6e <DIO_SetPinValue+0xcc>
     a2a:	08 95       	ret
     a2c:	2b b3       	in	r18, 0x1b	; 27
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <DIO_SetPinValue+0x96>
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	6a 95       	dec	r22
     a3a:	e2 f7       	brpl	.-8      	; 0xa34 <DIO_SetPinValue+0x92>
     a3c:	82 2b       	or	r24, r18
     a3e:	8b bb       	out	0x1b, r24	; 27
     a40:	08 95       	ret
     a42:	28 b3       	in	r18, 0x18	; 24
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <DIO_SetPinValue+0xac>
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	6a 95       	dec	r22
     a50:	e2 f7       	brpl	.-8      	; 0xa4a <DIO_SetPinValue+0xa8>
     a52:	82 2b       	or	r24, r18
     a54:	88 bb       	out	0x18, r24	; 24
     a56:	08 95       	ret
     a58:	25 b3       	in	r18, 0x15	; 21
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <DIO_SetPinValue+0xc2>
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	6a 95       	dec	r22
     a66:	e2 f7       	brpl	.-8      	; 0xa60 <DIO_SetPinValue+0xbe>
     a68:	82 2b       	or	r24, r18
     a6a:	85 bb       	out	0x15, r24	; 21
     a6c:	08 95       	ret
     a6e:	22 b3       	in	r18, 0x12	; 18
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <DIO_SetPinValue+0xd8>
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	6a 95       	dec	r22
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <DIO_SetPinValue+0xd4>
     a7e:	82 2b       	or	r24, r18
     a80:	82 bb       	out	0x12, r24	; 18
     a82:	08 95       	ret

00000a84 <DIO_ReadPinValue>:
     a84:	ef e3       	ldi	r30, 0x3F	; 63
     a86:	fc e9       	ldi	r31, 0x9C	; 156
     a88:	31 97       	sbiw	r30, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <DIO_ReadPinValue+0x4>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <DIO_ReadPinValue+0xa>
     a8e:	00 00       	nop
//If pin is defined as input
uint8_t DIO_ReadPinValue (Port port, Pin pin)
{
	uint8_t reading = 0;
	_delay_ms(10);
	switch (port)
     a90:	81 30       	cpi	r24, 0x01	; 1
     a92:	79 f0       	breq	.+30     	; 0xab2 <DIO_ReadPinValue+0x2e>
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <DIO_ReadPinValue+0x1c>
     a96:	82 30       	cpi	r24, 0x02	; 2
     a98:	a9 f0       	breq	.+42     	; 0xac4 <DIO_ReadPinValue+0x40>
     a9a:	83 30       	cpi	r24, 0x03	; 3
     a9c:	e1 f0       	breq	.+56     	; 0xad6 <DIO_ReadPinValue+0x52>
     a9e:	24 c0       	rjmp	.+72     	; 0xae8 <DIO_ReadPinValue+0x64>
	{
		case DIO_PORTA:
		reading = GET_BIT(PINA, pin);
     aa0:	89 b3       	in	r24, 0x19	; 25
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <DIO_ReadPinValue+0x26>
     aa6:	95 95       	asr	r25
     aa8:	87 95       	ror	r24
     aaa:	6a 95       	dec	r22
     aac:	e2 f7       	brpl	.-8      	; 0xaa6 <DIO_ReadPinValue+0x22>
     aae:	81 70       	andi	r24, 0x01	; 1
		break;
     ab0:	08 95       	ret
		case DIO_PORTB:
		reading = GET_BIT(PINB, pin);
     ab2:	86 b3       	in	r24, 0x16	; 22
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <DIO_ReadPinValue+0x38>
     ab8:	95 95       	asr	r25
     aba:	87 95       	ror	r24
     abc:	6a 95       	dec	r22
     abe:	e2 f7       	brpl	.-8      	; 0xab8 <DIO_ReadPinValue+0x34>
     ac0:	81 70       	andi	r24, 0x01	; 1
		break;
     ac2:	08 95       	ret
		case DIO_PORTC:
		reading = GET_BIT(PINC, pin);
     ac4:	83 b3       	in	r24, 0x13	; 19
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	02 c0       	rjmp	.+4      	; 0xace <DIO_ReadPinValue+0x4a>
     aca:	95 95       	asr	r25
     acc:	87 95       	ror	r24
     ace:	6a 95       	dec	r22
     ad0:	e2 f7       	brpl	.-8      	; 0xaca <DIO_ReadPinValue+0x46>
     ad2:	81 70       	andi	r24, 0x01	; 1
		break;
     ad4:	08 95       	ret
		case DIO_PORTD:
		reading = GET_BIT(PIND, pin);
     ad6:	80 b3       	in	r24, 0x10	; 16
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <DIO_ReadPinValue+0x5c>
     adc:	95 95       	asr	r25
     ade:	87 95       	ror	r24
     ae0:	6a 95       	dec	r22
     ae2:	e2 f7       	brpl	.-8      	; 0xadc <DIO_ReadPinValue+0x58>
     ae4:	81 70       	andi	r24, 0x01	; 1
		break;
     ae6:	08 95       	ret
	}
}
//If pin is defined as input
uint8_t DIO_ReadPinValue (Port port, Pin pin)
{
	uint8_t reading = 0;
     ae8:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTD:
		reading = GET_BIT(PIND, pin);
		break;
	}
	return reading;
}
     aea:	08 95       	ret

00000aec <DIO_SetPinPullUp>:
void DIO_SetPinPullUp (Port port, Pin pin)
{
	switch (port)
     aec:	81 30       	cpi	r24, 0x01	; 1
     aee:	89 f0       	breq	.+34     	; 0xb12 <DIO_SetPinPullUp+0x26>
     af0:	28 f0       	brcs	.+10     	; 0xafc <DIO_SetPinPullUp+0x10>
     af2:	82 30       	cpi	r24, 0x02	; 2
     af4:	c9 f0       	breq	.+50     	; 0xb28 <DIO_SetPinPullUp+0x3c>
     af6:	83 30       	cpi	r24, 0x03	; 3
     af8:	11 f1       	breq	.+68     	; 0xb3e <DIO_SetPinPullUp+0x52>
     afa:	08 95       	ret
	{
		case DIO_PORTA:
		SET_BIT(PORTA, pin);
     afc:	2b b3       	in	r18, 0x1b	; 27
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <DIO_SetPinPullUp+0x1c>
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	6a 95       	dec	r22
     b0a:	e2 f7       	brpl	.-8      	; 0xb04 <DIO_SetPinPullUp+0x18>
     b0c:	82 2b       	or	r24, r18
     b0e:	8b bb       	out	0x1b, r24	; 27
		break;
     b10:	08 95       	ret
		case DIO_PORTB:
		SET_BIT(PORTB, pin);
     b12:	28 b3       	in	r18, 0x18	; 24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <DIO_SetPinPullUp+0x32>
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	6a 95       	dec	r22
     b20:	e2 f7       	brpl	.-8      	; 0xb1a <DIO_SetPinPullUp+0x2e>
     b22:	82 2b       	or	r24, r18
     b24:	88 bb       	out	0x18, r24	; 24
		break;
     b26:	08 95       	ret
		case DIO_PORTC:
		SET_BIT(PORTC, pin);
     b28:	25 b3       	in	r18, 0x15	; 21
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <DIO_SetPinPullUp+0x48>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	6a 95       	dec	r22
     b36:	e2 f7       	brpl	.-8      	; 0xb30 <DIO_SetPinPullUp+0x44>
     b38:	82 2b       	or	r24, r18
     b3a:	85 bb       	out	0x15, r24	; 21
		break;
     b3c:	08 95       	ret
		case DIO_PORTD:
		SET_BIT(PORTD, pin);
     b3e:	22 b3       	in	r18, 0x12	; 18
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <DIO_SetPinPullUp+0x5e>
     b46:	88 0f       	add	r24, r24
     b48:	99 1f       	adc	r25, r25
     b4a:	6a 95       	dec	r22
     b4c:	e2 f7       	brpl	.-8      	; 0xb46 <DIO_SetPinPullUp+0x5a>
     b4e:	82 2b       	or	r24, r18
     b50:	82 bb       	out	0x12, r24	; 18
     b52:	08 95       	ret

00000b54 <EEPROM_Write>:
#include "EEPROM.h"

void EEPROM_Write(uint16_t address , uint8_t data)
{
	// Wait for completion of previous write 
	while(EECR & (1<<EEWE));
     b54:	e1 99       	sbic	0x1c, 1	; 28
     b56:	fe cf       	rjmp	.-4      	; 0xb54 <EEPROM_Write>
	/* Set up address and data registers */
	EEAR = address;
     b58:	9f bb       	out	0x1f, r25	; 31
     b5a:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
     b5c:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     b5e:	8c b3       	in	r24, 0x1c	; 28
     b60:	84 60       	ori	r24, 0x04	; 4
     b62:	8c bb       	out	0x1c, r24	; 28
	/* Start EEPROM write by setting EEWE */
	EECR |= (1<<EEWE);
     b64:	8c b3       	in	r24, 0x1c	; 28
     b66:	82 60       	ori	r24, 0x02	; 2
     b68:	8c bb       	out	0x1c, r24	; 28
     b6a:	08 95       	ret

00000b6c <EEPROM_Read>:
}

uint8_t EEPROM_Read(uint16_t adderss)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     b6c:	e1 99       	sbic	0x1c, 1	; 28
     b6e:	fe cf       	rjmp	.-4      	; 0xb6c <EEPROM_Read>
	/* Set up address register */
	EEAR = adderss;
     b70:	9f bb       	out	0x1f, r25	; 31
     b72:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1<<EERE);
     b74:	8c b3       	in	r24, 0x1c	; 28
     b76:	81 60       	ori	r24, 0x01	; 1
     b78:	8c bb       	out	0x1c, r24	; 28
	/* Return data from data register */
	return EEDR;
     b7a:	8d b3       	in	r24, 0x1d	; 29
     b7c:	08 95       	ret

00000b7e <Interrupt_Initialization>:
*/

void Interrupt_Initialization(Interrupt_Signal_Pin pin)
{
	//Define Direction as input
	CLR_BIT(DDRD, PD2);
     b7e:	91 b3       	in	r25, 0x11	; 17
     b80:	9b 7f       	andi	r25, 0xFB	; 251
     b82:	91 bb       	out	0x11, r25	; 17
	CLR_BIT(DDRD, PD3);
     b84:	91 b3       	in	r25, 0x11	; 17
     b86:	97 7f       	andi	r25, 0xF7	; 247
     b88:	91 bb       	out	0x11, r25	; 17
	CLR_BIT(DDRD, PB2);
     b8a:	91 b3       	in	r25, 0x11	; 17
     b8c:	9b 7f       	andi	r25, 0xFB	; 251
     b8e:	91 bb       	out	0x11, r25	; 17
	//Enable Global interrupt (Apartment Door)
	//===============================================================
	#if Global_INTERRUPT_STATUS == GLOBAL_EN
	sei();
     b90:	78 94       	sei
	//CLR_BIT(SREG, 7);
	#else
	#warning This is invalid choice
	#endif
	//==============================================================
	if(pin == INT0_Signal)
     b92:	81 11       	cpse	r24, r1
     b94:	0a c0       	rjmp	.+20     	; 0xbaa <Interrupt_Initialization+0x2c>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT0);
     b96:	8b b7       	in	r24, 0x3b	; 59
     b98:	80 64       	ori	r24, 0x40	; 64
     b9a:	8b bf       	out	0x3b, r24	; 59
		#elif Interrupt_SENSE == HIGH_SIGNAL
		CLR_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);
		#elif Interrupt_SENSE == Falling_SIGNAL
		SET_BIT(MCUCR, ISC01);CLR_BIT(MCUCR, ISC00);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);
     b9c:	85 b7       	in	r24, 0x35	; 53
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	85 bf       	out	0x35, r24	; 53
     ba2:	85 b7       	in	r24, 0x35	; 53
     ba4:	81 60       	ori	r24, 0x01	; 1
     ba6:	85 bf       	out	0x35, r24	; 53
     ba8:	08 95       	ret
		#else
		#warning This is invalid
		#endif
	}
	else if(pin == INT1_Signal)
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	51 f4       	brne	.+20     	; 0xbc2 <Interrupt_Initialization+0x44>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT1);
     bae:	8b b7       	in	r24, 0x3b	; 59
     bb0:	80 68       	ori	r24, 0x80	; 128
     bb2:	8b bf       	out	0x3b, r24	; 59
		#elif Interrupt_SENSE == HIGH_SIGNAL
		CLR_BIT(MCUCR, ISC11);SET_BIT(MCUCR, ISC10);
		#elif Interrupt_SENSE == Falling_SIGNAL
		SET_BIT(MCUCR, ISC11);CLR_BIT(MCUCR, ISC10);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCR, ISC11);SET_BIT(MCUCR, ISC10);
     bb4:	85 b7       	in	r24, 0x35	; 53
     bb6:	88 60       	ori	r24, 0x08	; 8
     bb8:	85 bf       	out	0x35, r24	; 53
     bba:	85 b7       	in	r24, 0x35	; 53
     bbc:	84 60       	ori	r24, 0x04	; 4
     bbe:	85 bf       	out	0x35, r24	; 53
     bc0:	08 95       	ret
		#else
		#warning This is invalid
		#endif
	}
	else if(pin == INT2_Signal)
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	31 f4       	brne	.+12     	; 0xbd2 <Interrupt_Initialization+0x54>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT2);
     bc6:	8b b7       	in	r24, 0x3b	; 59
     bc8:	80 62       	ori	r24, 0x20	; 32
     bca:	8b bf       	out	0x3b, r24	; 59
		#if Interrupt_SENSE == Falling_SIGNAL
		CLR_BIT(MCUCSR, ISC2);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCSR, ISC2);
     bcc:	84 b7       	in	r24, 0x34	; 52
     bce:	80 64       	ori	r24, 0x40	; 64
     bd0:	84 bf       	out	0x34, r24	; 52
     bd2:	08 95       	ret

00000bd4 <Timer0_Start>:
			while(GET_BIT(TIFR, OCF0) != 1);//Wait until raise flag
			SET_BIT(TIFR, OCF0);//Clear flag
			counter++;//Increment counter
		}
	}
}
     bd4:	83 30       	cpi	r24, 0x03	; 3
     bd6:	61 f1       	breq	.+88     	; 0xc30 <Timer0_Start+0x5c>
     bd8:	28 f4       	brcc	.+10     	; 0xbe4 <Timer0_Start+0x10>
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	49 f0       	breq	.+18     	; 0xbf0 <Timer0_Start+0x1c>
     bde:	82 30       	cpi	r24, 0x02	; 2
     be0:	b9 f0       	breq	.+46     	; 0xc10 <Timer0_Start+0x3c>
     be2:	08 95       	ret
     be4:	84 30       	cpi	r24, 0x04	; 4
     be6:	a1 f1       	breq	.+104    	; 0xc50 <Timer0_Start+0x7c>
     be8:	85 30       	cpi	r24, 0x05	; 5
     bea:	09 f4       	brne	.+2      	; 0xbee <Timer0_Start+0x1a>
     bec:	41 c0       	rjmp	.+130    	; 0xc70 <Timer0_Start+0x9c>
     bee:	08 95       	ret
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <_Prescaler+0x1>
     bf8:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <_Prescaler>
     bfc:	83 b7       	in	r24, 0x33	; 51
     bfe:	8b 7f       	andi	r24, 0xFB	; 251
     c00:	83 bf       	out	0x33, r24	; 51
     c02:	83 b7       	in	r24, 0x33	; 51
     c04:	8d 7f       	andi	r24, 0xFD	; 253
     c06:	83 bf       	out	0x33, r24	; 51
     c08:	83 b7       	in	r24, 0x33	; 51
     c0a:	81 60       	ori	r24, 0x01	; 1
     c0c:	83 bf       	out	0x33, r24	; 51
     c0e:	08 95       	ret
     c10:	88 e0       	ldi	r24, 0x08	; 8
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <_Prescaler+0x1>
     c18:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <_Prescaler>
     c1c:	83 b7       	in	r24, 0x33	; 51
     c1e:	8b 7f       	andi	r24, 0xFB	; 251
     c20:	83 bf       	out	0x33, r24	; 51
     c22:	83 b7       	in	r24, 0x33	; 51
     c24:	82 60       	ori	r24, 0x02	; 2
     c26:	83 bf       	out	0x33, r24	; 51
     c28:	83 b7       	in	r24, 0x33	; 51
     c2a:	8e 7f       	andi	r24, 0xFE	; 254
     c2c:	83 bf       	out	0x33, r24	; 51
     c2e:	08 95       	ret
     c30:	80 e4       	ldi	r24, 0x40	; 64
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <_Prescaler+0x1>
     c38:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <_Prescaler>
     c3c:	83 b7       	in	r24, 0x33	; 51
     c3e:	8b 7f       	andi	r24, 0xFB	; 251
     c40:	83 bf       	out	0x33, r24	; 51
     c42:	83 b7       	in	r24, 0x33	; 51
     c44:	82 60       	ori	r24, 0x02	; 2
     c46:	83 bf       	out	0x33, r24	; 51
     c48:	83 b7       	in	r24, 0x33	; 51
     c4a:	81 60       	ori	r24, 0x01	; 1
     c4c:	83 bf       	out	0x33, r24	; 51
     c4e:	08 95       	ret
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <_Prescaler+0x1>
     c58:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <_Prescaler>
     c5c:	83 b7       	in	r24, 0x33	; 51
     c5e:	84 60       	ori	r24, 0x04	; 4
     c60:	83 bf       	out	0x33, r24	; 51
     c62:	83 b7       	in	r24, 0x33	; 51
     c64:	8d 7f       	andi	r24, 0xFD	; 253
     c66:	83 bf       	out	0x33, r24	; 51
     c68:	83 b7       	in	r24, 0x33	; 51
     c6a:	8e 7f       	andi	r24, 0xFE	; 254
     c6c:	83 bf       	out	0x33, r24	; 51
     c6e:	08 95       	ret
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	94 e0       	ldi	r25, 0x04	; 4
     c74:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <_Prescaler+0x1>
     c78:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <_Prescaler>
     c7c:	83 b7       	in	r24, 0x33	; 51
     c7e:	84 60       	ori	r24, 0x04	; 4
     c80:	83 bf       	out	0x33, r24	; 51
     c82:	83 b7       	in	r24, 0x33	; 51
     c84:	8d 7f       	andi	r24, 0xFD	; 253
     c86:	83 bf       	out	0x33, r24	; 51
     c88:	83 b7       	in	r24, 0x33	; 51
     c8a:	81 60       	ori	r24, 0x01	; 1
     c8c:	83 bf       	out	0x33, r24	; 51
     c8e:	08 95       	ret

00000c90 <Timer0_Stop>:
     c90:	83 b7       	in	r24, 0x33	; 51
     c92:	8b 7f       	andi	r24, 0xFB	; 251
     c94:	83 bf       	out	0x33, r24	; 51
     c96:	83 b7       	in	r24, 0x33	; 51
     c98:	8d 7f       	andi	r24, 0xFD	; 253
     c9a:	83 bf       	out	0x33, r24	; 51
     c9c:	83 b7       	in	r24, 0x33	; 51
     c9e:	8e 7f       	andi	r24, 0xFE	; 254
     ca0:	83 bf       	out	0x33, r24	; 51
     ca2:	08 95       	ret

00000ca4 <Timer0_WithInterrupt_Initialization>:
uint32_t Number_CTC = 0;
uint32_t Init_Value = 0;

void Timer0_WithInterrupt_Initialization(Timer0_Mode mode, Timer0_Pin_Mode pin)
{
	cli();//Close global interrupt
     ca4:	f8 94       	cli
	switch(mode)//Chose Mode
     ca6:	88 23       	and	r24, r24
     ca8:	19 f0       	breq	.+6      	; 0xcb0 <Timer0_WithInterrupt_Initialization+0xc>
     caa:	82 30       	cpi	r24, 0x02	; 2
     cac:	59 f0       	breq	.+22     	; 0xcc4 <Timer0_WithInterrupt_Initialization+0x20>
     cae:	13 c0       	rjmp	.+38     	; 0xcd6 <Timer0_WithInterrupt_Initialization+0x32>
	{
		case Normal_Mode:
		CLR_BIT(TCCR0, WGM01);CLR_BIT(TCCR0, WGM00);
     cb0:	83 b7       	in	r24, 0x33	; 51
     cb2:	87 7f       	andi	r24, 0xF7	; 247
     cb4:	83 bf       	out	0x33, r24	; 51
     cb6:	83 b7       	in	r24, 0x33	; 51
     cb8:	8f 7b       	andi	r24, 0xBF	; 191
     cba:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TIMSK, TOIE0);//Open OVF interrupt
     cbc:	89 b7       	in	r24, 0x39	; 57
     cbe:	81 60       	ori	r24, 0x01	; 1
     cc0:	89 bf       	out	0x39, r24	; 57
		break;
     cc2:	09 c0       	rjmp	.+18     	; 0xcd6 <Timer0_WithInterrupt_Initialization+0x32>
		case CTC_Mode:
		SET_BIT(TCCR0, WGM01);CLR_BIT(TCCR0, WGM00);
     cc4:	83 b7       	in	r24, 0x33	; 51
     cc6:	88 60       	ori	r24, 0x08	; 8
     cc8:	83 bf       	out	0x33, r24	; 51
     cca:	83 b7       	in	r24, 0x33	; 51
     ccc:	8f 7b       	andi	r24, 0xBF	; 191
     cce:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TIMSK, OCIE0);//Open CTC Interrupt
     cd0:	89 b7       	in	r24, 0x39	; 57
     cd2:	82 60       	ori	r24, 0x02	; 2
     cd4:	89 bf       	out	0x39, r24	; 57
		case PWM_PhaseCorrect:
		break;
		case PWM_Fast:
		break;
	}
	switch(pin)//Output pin mode
     cd6:	61 30       	cpi	r22, 0x01	; 1
     cd8:	69 f0       	breq	.+26     	; 0xcf4 <Timer0_WithInterrupt_Initialization+0x50>
     cda:	28 f0       	brcs	.+10     	; 0xce6 <Timer0_WithInterrupt_Initialization+0x42>
     cdc:	62 30       	cpi	r22, 0x02	; 2
     cde:	89 f0       	breq	.+34     	; 0xd02 <Timer0_WithInterrupt_Initialization+0x5e>
     ce0:	63 30       	cpi	r22, 0x03	; 3
     ce2:	b1 f0       	breq	.+44     	; 0xd10 <Timer0_WithInterrupt_Initialization+0x6c>
     ce4:	1b c0       	rjmp	.+54     	; 0xd1c <Timer0_WithInterrupt_Initialization+0x78>
	{
		case Pin_disconnected:
		CLR_BIT(TCCR0, COM01);CLR_BIT(TCCR0, COM00);
     ce6:	83 b7       	in	r24, 0x33	; 51
     ce8:	8f 7d       	andi	r24, 0xDF	; 223
     cea:	83 bf       	out	0x33, r24	; 51
     cec:	83 b7       	in	r24, 0x33	; 51
     cee:	8f 7e       	andi	r24, 0xEF	; 239
     cf0:	83 bf       	out	0x33, r24	; 51
		break;
     cf2:	14 c0       	rjmp	.+40     	; 0xd1c <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Toggle:
		CLR_BIT(TCCR0, COM01);SET_BIT(TCCR0, COM00);
     cf4:	83 b7       	in	r24, 0x33	; 51
     cf6:	8f 7d       	andi	r24, 0xDF	; 223
     cf8:	83 bf       	out	0x33, r24	; 51
     cfa:	83 b7       	in	r24, 0x33	; 51
     cfc:	80 61       	ori	r24, 0x10	; 16
     cfe:	83 bf       	out	0x33, r24	; 51
		break;
     d00:	0d c0       	rjmp	.+26     	; 0xd1c <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Clear:
		SET_BIT(TCCR0, COM01);CLR_BIT(TCCR0, COM00);
     d02:	83 b7       	in	r24, 0x33	; 51
     d04:	80 62       	ori	r24, 0x20	; 32
     d06:	83 bf       	out	0x33, r24	; 51
     d08:	83 b7       	in	r24, 0x33	; 51
     d0a:	8f 7e       	andi	r24, 0xEF	; 239
     d0c:	83 bf       	out	0x33, r24	; 51
		break;
     d0e:	06 c0       	rjmp	.+12     	; 0xd1c <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Set:
		SET_BIT(TCCR0, COM01);SET_BIT(TCCR0, COM00);
     d10:	83 b7       	in	r24, 0x33	; 51
     d12:	80 62       	ori	r24, 0x20	; 32
     d14:	83 bf       	out	0x33, r24	; 51
     d16:	83 b7       	in	r24, 0x33	; 51
     d18:	80 61       	ori	r24, 0x10	; 16
     d1a:	83 bf       	out	0x33, r24	; 51
		break;
	}
	sei();//Enable global interrupt
     d1c:	78 94       	sei
     d1e:	08 95       	ret

00000d20 <Timer0_WithInterrupt_SetDelay>:
}
void Timer0_WithInterrupt_SetDelay(Timer0_Mode mode, uint32_t delay, uint8_t top)
{
     d20:	0f 93       	push	r16
	if(mode == Normal_Mode)
     d22:	81 11       	cpse	r24, r1
     d24:	37 c0       	rjmp	.+110    	; 0xd94 <Timer0_WithInterrupt_SetDelay+0x74>
	{
		uint8_t Tick = ( 1 * _Prescaler) / Frequency;
     d26:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <_Prescaler>
     d2a:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <_Prescaler+0x1>
     d2e:	f9 01       	movw	r30, r18
     d30:	f2 95       	swap	r31
     d32:	e2 95       	swap	r30
     d34:	ef 70       	andi	r30, 0x0F	; 15
     d36:	ef 27       	eor	r30, r31
     d38:	ff 70       	andi	r31, 0x0F	; 15
     d3a:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     d3c:	a8 ee       	ldi	r26, 0xE8	; 232
     d3e:	b3 e0       	ldi	r27, 0x03	; 3
     d40:	9a 01       	movw	r18, r20
     d42:	ab 01       	movw	r20, r22
     d44:	0e 94 00 0a 	call	0x1400	; 0x1400 <__muluhisi3>
     d48:	2e 2f       	mov	r18, r30
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__udivmodsi4>
		Number_OVF = count / Bits;
     d54:	bb 27       	eor	r27, r27
     d56:	a5 2f       	mov	r26, r21
     d58:	94 2f       	mov	r25, r20
     d5a:	83 2f       	mov	r24, r19
		Number_OVF ++;
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	a1 1d       	adc	r26, r1
     d60:	b1 1d       	adc	r27, r1
     d62:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <Number_OVF>
     d66:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <Number_OVF+0x1>
     d6a:	a0 93 93 00 	sts	0x0093, r26	; 0x800093 <Number_OVF+0x2>
     d6e:	b0 93 94 00 	sts	0x0094, r27	; 0x800094 <Number_OVF+0x3>
		Init_Value = Bits - (count % Bits);
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	a0 e0       	ldi	r26, 0x00	; 0
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	82 1b       	sub	r24, r18
     d7c:	91 09       	sbc	r25, r1
     d7e:	a1 09       	sbc	r26, r1
     d80:	b1 09       	sbc	r27, r1
     d82:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <Init_Value>
     d86:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <Init_Value+0x1>
     d8a:	a0 93 8b 00 	sts	0x008B, r26	; 0x80008b <Init_Value+0x2>
     d8e:	b0 93 8c 00 	sts	0x008C, r27	; 0x80008c <Init_Value+0x3>
		return;
     d92:	30 c0       	rjmp	.+96     	; 0xdf4 <Timer0_WithInterrupt_SetDelay+0xd4>
	}
	else if(mode == CTC_Mode)
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	71 f5       	brne	.+92     	; 0xdf4 <Timer0_WithInterrupt_SetDelay+0xd4>
	{
		OCR0 = top;
     d98:	2c bf       	out	0x3c, r18	; 60
		uint8_t Tick = ( 1 * _Prescaler) / Frequency;
     d9a:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <_Prescaler>
     d9e:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <_Prescaler+0x1>
     da2:	f9 01       	movw	r30, r18
     da4:	f2 95       	swap	r31
     da6:	e2 95       	swap	r30
     da8:	ef 70       	andi	r30, 0x0F	; 15
     daa:	ef 27       	eor	r30, r31
     dac:	ff 70       	andi	r31, 0x0F	; 15
     dae:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     db0:	a8 ee       	ldi	r26, 0xE8	; 232
     db2:	b3 e0       	ldi	r27, 0x03	; 3
     db4:	9a 01       	movw	r18, r20
     db6:	ab 01       	movw	r20, r22
     db8:	0e 94 00 0a 	call	0x1400	; 0x1400 <__muluhisi3>
     dbc:	2e 2f       	mov	r18, r30
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__udivmodsi4>
     dc8:	ca 01       	movw	r24, r20
     dca:	b9 01       	movw	r22, r18
		Number_CTC = count / OCR0;
     dcc:	0c b7       	in	r16, 0x3c	; 60
     dce:	20 2f       	mov	r18, r16
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__udivmodsi4>
		Number_CTC ++;
     dda:	da 01       	movw	r26, r20
     ddc:	c9 01       	movw	r24, r18
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	a1 1d       	adc	r26, r1
     de2:	b1 1d       	adc	r27, r1
     de4:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <Number_CTC>
     de8:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <Number_CTC+0x1>
     dec:	a0 93 8f 00 	sts	0x008F, r26	; 0x80008f <Number_CTC+0x2>
     df0:	b0 93 90 00 	sts	0x0090, r27	; 0x800090 <Number_CTC+0x3>
		return;
	}
}
     df4:	0f 91       	pop	r16
     df6:	08 95       	ret

00000df8 <Timer2_Start>:

uint16 _Prescaler_ = 0;

void Timer2_Start(Timer2_Prescaler prescaler)
{
	switch(prescaler)
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	61 f1       	breq	.+88     	; 0xe54 <Timer2_Start+0x5c>
     dfc:	28 f4       	brcc	.+10     	; 0xe08 <Timer2_Start+0x10>
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	49 f0       	breq	.+18     	; 0xe14 <Timer2_Start+0x1c>
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	b9 f0       	breq	.+46     	; 0xe34 <Timer2_Start+0x3c>
     e06:	08 95       	ret
     e08:	84 30       	cpi	r24, 0x04	; 4
     e0a:	a1 f1       	breq	.+104    	; 0xe74 <Timer2_Start+0x7c>
     e0c:	85 30       	cpi	r24, 0x05	; 5
     e0e:	09 f4       	brne	.+2      	; 0xe12 <Timer2_Start+0x1a>
     e10:	41 c0       	rjmp	.+130    	; 0xe94 <Timer2_Start+0x9c>
     e12:	08 95       	ret
	{
		case PreS_0_:
		break;
		case PreS_1_:
		_Prescaler_ = 1;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <_Prescaler_+0x1>
     e1c:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <_Prescaler_>
		CLR_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);SET_BIT(TCCR2, CS20);
     e20:	85 b5       	in	r24, 0x25	; 37
     e22:	8b 7f       	andi	r24, 0xFB	; 251
     e24:	85 bd       	out	0x25, r24	; 37
     e26:	85 b5       	in	r24, 0x25	; 37
     e28:	8d 7f       	andi	r24, 0xFD	; 253
     e2a:	85 bd       	out	0x25, r24	; 37
     e2c:	85 b5       	in	r24, 0x25	; 37
     e2e:	81 60       	ori	r24, 0x01	; 1
     e30:	85 bd       	out	0x25, r24	; 37
		break;
     e32:	08 95       	ret
		case PreS_8_:
		_Prescaler_ = 8;
     e34:	88 e0       	ldi	r24, 0x08	; 8
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <_Prescaler_+0x1>
     e3c:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <_Prescaler_>
		CLR_BIT(TCCR2, CS22);SET_BIT(TCCR2, CS21);CLR_BIT(TCCR2, CS20);
     e40:	85 b5       	in	r24, 0x25	; 37
     e42:	8b 7f       	andi	r24, 0xFB	; 251
     e44:	85 bd       	out	0x25, r24	; 37
     e46:	85 b5       	in	r24, 0x25	; 37
     e48:	82 60       	ori	r24, 0x02	; 2
     e4a:	85 bd       	out	0x25, r24	; 37
     e4c:	85 b5       	in	r24, 0x25	; 37
     e4e:	8e 7f       	andi	r24, 0xFE	; 254
     e50:	85 bd       	out	0x25, r24	; 37
		break;
     e52:	08 95       	ret
		case PreS_64_:
		_Prescaler_ = 64;
     e54:	80 e4       	ldi	r24, 0x40	; 64
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <_Prescaler_+0x1>
     e5c:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <_Prescaler_>
		CLR_BIT(TCCR2, CS22);SET_BIT(TCCR2, CS21);SET_BIT(TCCR2, CS20);
     e60:	85 b5       	in	r24, 0x25	; 37
     e62:	8b 7f       	andi	r24, 0xFB	; 251
     e64:	85 bd       	out	0x25, r24	; 37
     e66:	85 b5       	in	r24, 0x25	; 37
     e68:	82 60       	ori	r24, 0x02	; 2
     e6a:	85 bd       	out	0x25, r24	; 37
     e6c:	85 b5       	in	r24, 0x25	; 37
     e6e:	81 60       	ori	r24, 0x01	; 1
     e70:	85 bd       	out	0x25, r24	; 37
		break;
     e72:	08 95       	ret
		case PreS_256_:
		_Prescaler_ = 256;
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <_Prescaler_+0x1>
     e7c:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <_Prescaler_>
		SET_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);CLR_BIT(TCCR2, CS20);
     e80:	85 b5       	in	r24, 0x25	; 37
     e82:	84 60       	ori	r24, 0x04	; 4
     e84:	85 bd       	out	0x25, r24	; 37
     e86:	85 b5       	in	r24, 0x25	; 37
     e88:	8d 7f       	andi	r24, 0xFD	; 253
     e8a:	85 bd       	out	0x25, r24	; 37
     e8c:	85 b5       	in	r24, 0x25	; 37
     e8e:	8e 7f       	andi	r24, 0xFE	; 254
     e90:	85 bd       	out	0x25, r24	; 37
		break;
     e92:	08 95       	ret
		case PreS_1024_:
		_Prescaler_ = 1024;
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	94 e0       	ldi	r25, 0x04	; 4
     e98:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <_Prescaler_+0x1>
     e9c:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <_Prescaler_>
		SET_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);SET_BIT(TCCR2, CS20);
     ea0:	85 b5       	in	r24, 0x25	; 37
     ea2:	84 60       	ori	r24, 0x04	; 4
     ea4:	85 bd       	out	0x25, r24	; 37
     ea6:	85 b5       	in	r24, 0x25	; 37
     ea8:	8d 7f       	andi	r24, 0xFD	; 253
     eaa:	85 bd       	out	0x25, r24	; 37
     eac:	85 b5       	in	r24, 0x25	; 37
     eae:	81 60       	ori	r24, 0x01	; 1
     eb0:	85 bd       	out	0x25, r24	; 37
     eb2:	08 95       	ret

00000eb4 <Timer2_Stop>:
		
	}
}
void Timer2_Stop(void)
{
	CLR_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);CLR_BIT(TCCR2, CS20);
     eb4:	85 b5       	in	r24, 0x25	; 37
     eb6:	8b 7f       	andi	r24, 0xFB	; 251
     eb8:	85 bd       	out	0x25, r24	; 37
     eba:	85 b5       	in	r24, 0x25	; 37
     ebc:	8d 7f       	andi	r24, 0xFD	; 253
     ebe:	85 bd       	out	0x25, r24	; 37
     ec0:	85 b5       	in	r24, 0x25	; 37
     ec2:	8e 7f       	andi	r24, 0xFE	; 254
     ec4:	85 bd       	out	0x25, r24	; 37
     ec6:	08 95       	ret

00000ec8 <Timer2_WithInterrupt_Initialization>:
uint32_t Timer2_CTC = 0;
uint32_t Timer2_Init_Value = 0;

void Timer2_WithInterrupt_Initialization(Timer2_Mode mode, Timer2_Pin_Mode pin)
{
	cli();//Close global interrupt
     ec8:	f8 94       	cli
	switch(mode)//Chose Mode
     eca:	88 23       	and	r24, r24
     ecc:	19 f0       	breq	.+6      	; 0xed4 <Timer2_WithInterrupt_Initialization+0xc>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	59 f0       	breq	.+22     	; 0xee8 <Timer2_WithInterrupt_Initialization+0x20>
     ed2:	13 c0       	rjmp	.+38     	; 0xefa <Timer2_WithInterrupt_Initialization+0x32>
	{
		case Normal_Mode_:
		CLR_BIT(TCCR2, WGM21);CLR_BIT(TCCR2, WGM20);
     ed4:	85 b5       	in	r24, 0x25	; 37
     ed6:	87 7f       	andi	r24, 0xF7	; 247
     ed8:	85 bd       	out	0x25, r24	; 37
     eda:	85 b5       	in	r24, 0x25	; 37
     edc:	8f 7b       	andi	r24, 0xBF	; 191
     ede:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TIMSK, TOIE2);//Open OVF interrupt
     ee0:	89 b7       	in	r24, 0x39	; 57
     ee2:	80 64       	ori	r24, 0x40	; 64
     ee4:	89 bf       	out	0x39, r24	; 57
		break;
     ee6:	09 c0       	rjmp	.+18     	; 0xefa <Timer2_WithInterrupt_Initialization+0x32>
		case CTC_Mode_:
		SET_BIT(TCCR2, WGM21);CLR_BIT(TCCR2, WGM20);
     ee8:	85 b5       	in	r24, 0x25	; 37
     eea:	88 60       	ori	r24, 0x08	; 8
     eec:	85 bd       	out	0x25, r24	; 37
     eee:	85 b5       	in	r24, 0x25	; 37
     ef0:	8f 7b       	andi	r24, 0xBF	; 191
     ef2:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TIMSK, OCIE2);//Open CTC Interrupt
     ef4:	89 b7       	in	r24, 0x39	; 57
     ef6:	80 68       	ori	r24, 0x80	; 128
     ef8:	89 bf       	out	0x39, r24	; 57
		case PWM_PhaseCorrect_:
		break;
		case PWM_Fast_:
		break;
	}
	switch(pin)//Output pin mode
     efa:	61 30       	cpi	r22, 0x01	; 1
     efc:	69 f0       	breq	.+26     	; 0xf18 <Timer2_WithInterrupt_Initialization+0x50>
     efe:	28 f0       	brcs	.+10     	; 0xf0a <Timer2_WithInterrupt_Initialization+0x42>
     f00:	62 30       	cpi	r22, 0x02	; 2
     f02:	89 f0       	breq	.+34     	; 0xf26 <Timer2_WithInterrupt_Initialization+0x5e>
     f04:	63 30       	cpi	r22, 0x03	; 3
     f06:	b1 f0       	breq	.+44     	; 0xf34 <Timer2_WithInterrupt_Initialization+0x6c>
     f08:	1b c0       	rjmp	.+54     	; 0xf40 <Timer2_WithInterrupt_Initialization+0x78>
	{
		case Pin_disconnected_:
		CLR_BIT(TCCR2, COM21);CLR_BIT(TCCR2, COM20);
     f0a:	85 b5       	in	r24, 0x25	; 37
     f0c:	8f 7d       	andi	r24, 0xDF	; 223
     f0e:	85 bd       	out	0x25, r24	; 37
     f10:	85 b5       	in	r24, 0x25	; 37
     f12:	8f 7e       	andi	r24, 0xEF	; 239
     f14:	85 bd       	out	0x25, r24	; 37
		break;
     f16:	14 c0       	rjmp	.+40     	; 0xf40 <Timer2_WithInterrupt_Initialization+0x78>
		case Pin_Toggle_:
		CLR_BIT(TCCR2, COM21);SET_BIT(TCCR2, COM20);
     f18:	85 b5       	in	r24, 0x25	; 37
     f1a:	8f 7d       	andi	r24, 0xDF	; 223
     f1c:	85 bd       	out	0x25, r24	; 37
     f1e:	85 b5       	in	r24, 0x25	; 37
     f20:	80 61       	ori	r24, 0x10	; 16
     f22:	85 bd       	out	0x25, r24	; 37
		break;
     f24:	0d c0       	rjmp	.+26     	; 0xf40 <Timer2_WithInterrupt_Initialization+0x78>
		case Pin_Clear_:
		SET_BIT(TCCR2, COM21);CLR_BIT(TCCR2, COM20);
     f26:	85 b5       	in	r24, 0x25	; 37
     f28:	80 62       	ori	r24, 0x20	; 32
     f2a:	85 bd       	out	0x25, r24	; 37
     f2c:	85 b5       	in	r24, 0x25	; 37
     f2e:	8f 7e       	andi	r24, 0xEF	; 239
     f30:	85 bd       	out	0x25, r24	; 37
		break;
     f32:	06 c0       	rjmp	.+12     	; 0xf40 <Timer2_WithInterrupt_Initialization+0x78>
		case Pin_Set_:
		SET_BIT(TCCR2, COM21);SET_BIT(TCCR2, COM20);
     f34:	85 b5       	in	r24, 0x25	; 37
     f36:	80 62       	ori	r24, 0x20	; 32
     f38:	85 bd       	out	0x25, r24	; 37
     f3a:	85 b5       	in	r24, 0x25	; 37
     f3c:	80 61       	ori	r24, 0x10	; 16
     f3e:	85 bd       	out	0x25, r24	; 37
		break;
	}
	sei();//Enable global interrupt
     f40:	78 94       	sei
     f42:	08 95       	ret

00000f44 <Timer2_WithInterrupt_SetDelay>:
}
void Timer2_WithInterrupt_SetDelay(Timer2_Mode mode, uint32_t delay, uint8_t top)
{
     f44:	0f 93       	push	r16
	if(mode == Normal_Mode_)
     f46:	81 11       	cpse	r24, r1
     f48:	37 c0       	rjmp	.+110    	; 0xfb8 <Timer2_WithInterrupt_SetDelay+0x74>
	{
		uint8_t Tick = ( 1 * _Prescaler_) / Frequency;
     f4a:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <_Prescaler_>
     f4e:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <_Prescaler_+0x1>
     f52:	f9 01       	movw	r30, r18
     f54:	f2 95       	swap	r31
     f56:	e2 95       	swap	r30
     f58:	ef 70       	andi	r30, 0x0F	; 15
     f5a:	ef 27       	eor	r30, r31
     f5c:	ff 70       	andi	r31, 0x0F	; 15
     f5e:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     f60:	a8 ee       	ldi	r26, 0xE8	; 232
     f62:	b3 e0       	ldi	r27, 0x03	; 3
     f64:	9a 01       	movw	r18, r20
     f66:	ab 01       	movw	r20, r22
     f68:	0e 94 00 0a 	call	0x1400	; 0x1400 <__muluhisi3>
     f6c:	2e 2f       	mov	r18, r30
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__udivmodsi4>
		Timer2_OVF = count / Bits;
     f78:	bb 27       	eor	r27, r27
     f7a:	a5 2f       	mov	r26, r21
     f7c:	94 2f       	mov	r25, r20
     f7e:	83 2f       	mov	r24, r19
		Timer2_OVF ++;
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	a1 1d       	adc	r26, r1
     f84:	b1 1d       	adc	r27, r1
     f86:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <Timer2_OVF>
     f8a:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <Timer2_OVF+0x1>
     f8e:	a0 93 a1 00 	sts	0x00A1, r26	; 0x8000a1 <Timer2_OVF+0x2>
     f92:	b0 93 a2 00 	sts	0x00A2, r27	; 0x8000a2 <Timer2_OVF+0x3>
		Timer2_Init_Value = Bits - (count % Bits);
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	a0 e0       	ldi	r26, 0x00	; 0
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	82 1b       	sub	r24, r18
     fa0:	91 09       	sbc	r25, r1
     fa2:	a1 09       	sbc	r26, r1
     fa4:	b1 09       	sbc	r27, r1
     fa6:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <Timer2_Init_Value>
     faa:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <Timer2_Init_Value+0x1>
     fae:	a0 93 99 00 	sts	0x0099, r26	; 0x800099 <Timer2_Init_Value+0x2>
     fb2:	b0 93 9a 00 	sts	0x009A, r27	; 0x80009a <Timer2_Init_Value+0x3>
		return;
     fb6:	30 c0       	rjmp	.+96     	; 0x1018 <Timer2_WithInterrupt_SetDelay+0xd4>
	}
	else if(mode == CTC_Mode_)
     fb8:	82 30       	cpi	r24, 0x02	; 2
     fba:	71 f5       	brne	.+92     	; 0x1018 <Timer2_WithInterrupt_SetDelay+0xd4>
	{
		OCR2 = top;
     fbc:	23 bd       	out	0x23, r18	; 35
		uint8_t Tick = ( 1 * _Prescaler_) / Frequency;
     fbe:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <_Prescaler_>
     fc2:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <_Prescaler_+0x1>
     fc6:	f9 01       	movw	r30, r18
     fc8:	f2 95       	swap	r31
     fca:	e2 95       	swap	r30
     fcc:	ef 70       	andi	r30, 0x0F	; 15
     fce:	ef 27       	eor	r30, r31
     fd0:	ff 70       	andi	r31, 0x0F	; 15
     fd2:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     fd4:	a8 ee       	ldi	r26, 0xE8	; 232
     fd6:	b3 e0       	ldi	r27, 0x03	; 3
     fd8:	9a 01       	movw	r18, r20
     fda:	ab 01       	movw	r20, r22
     fdc:	0e 94 00 0a 	call	0x1400	; 0x1400 <__muluhisi3>
     fe0:	2e 2f       	mov	r18, r30
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	50 e0       	ldi	r21, 0x00	; 0
     fe8:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__udivmodsi4>
     fec:	ca 01       	movw	r24, r20
     fee:	b9 01       	movw	r22, r18
		Timer2_CTC = count / OCR0;
     ff0:	0c b7       	in	r16, 0x3c	; 60
     ff2:	20 2f       	mov	r18, r16
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e0       	ldi	r20, 0x00	; 0
     ff8:	50 e0       	ldi	r21, 0x00	; 0
     ffa:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__udivmodsi4>
		Timer2_CTC ++;
     ffe:	da 01       	movw	r26, r20
    1000:	c9 01       	movw	r24, r18
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	a1 1d       	adc	r26, r1
    1006:	b1 1d       	adc	r27, r1
    1008:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <Timer2_CTC>
    100c:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <Timer2_CTC+0x1>
    1010:	a0 93 9d 00 	sts	0x009D, r26	; 0x80009d <Timer2_CTC+0x2>
    1014:	b0 93 9e 00 	sts	0x009E, r27	; 0x80009e <Timer2_CTC+0x3>
		return;
	}
}
    1018:	0f 91       	pop	r16
    101a:	08 95       	ret

0000101c <__cmpsf2>:
    101c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__fp_cmp>
    1020:	08 f4       	brcc	.+2      	; 0x1024 <__cmpsf2+0x8>
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	08 95       	ret

00001026 <__divsf3>:
    1026:	0e 94 27 08 	call	0x104e	; 0x104e <__divsf3x>
    102a:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__fp_round>
    102e:	0e 94 25 09 	call	0x124a	; 0x124a <__fp_pscB>
    1032:	58 f0       	brcs	.+22     	; 0x104a <__divsf3+0x24>
    1034:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_pscA>
    1038:	40 f0       	brcs	.+16     	; 0x104a <__divsf3+0x24>
    103a:	29 f4       	brne	.+10     	; 0x1046 <__divsf3+0x20>
    103c:	5f 3f       	cpi	r21, 0xFF	; 255
    103e:	29 f0       	breq	.+10     	; 0x104a <__divsf3+0x24>
    1040:	0c 94 15 09 	jmp	0x122a	; 0x122a <__fp_inf>
    1044:	51 11       	cpse	r21, r1
    1046:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__fp_szero>
    104a:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__fp_nan>

0000104e <__divsf3x>:
    104e:	0e 94 3d 09 	call	0x127a	; 0x127a <__fp_split3>
    1052:	68 f3       	brcs	.-38     	; 0x102e <__divsf3+0x8>

00001054 <__divsf3_pse>:
    1054:	99 23       	and	r25, r25
    1056:	b1 f3       	breq	.-20     	; 0x1044 <__divsf3+0x1e>
    1058:	55 23       	and	r21, r21
    105a:	91 f3       	breq	.-28     	; 0x1040 <__divsf3+0x1a>
    105c:	95 1b       	sub	r25, r21
    105e:	55 0b       	sbc	r21, r21
    1060:	bb 27       	eor	r27, r27
    1062:	aa 27       	eor	r26, r26
    1064:	62 17       	cp	r22, r18
    1066:	73 07       	cpc	r23, r19
    1068:	84 07       	cpc	r24, r20
    106a:	38 f0       	brcs	.+14     	; 0x107a <__divsf3_pse+0x26>
    106c:	9f 5f       	subi	r25, 0xFF	; 255
    106e:	5f 4f       	sbci	r21, 0xFF	; 255
    1070:	22 0f       	add	r18, r18
    1072:	33 1f       	adc	r19, r19
    1074:	44 1f       	adc	r20, r20
    1076:	aa 1f       	adc	r26, r26
    1078:	a9 f3       	breq	.-22     	; 0x1064 <__divsf3_pse+0x10>
    107a:	35 d0       	rcall	.+106    	; 0x10e6 <__divsf3_pse+0x92>
    107c:	0e 2e       	mov	r0, r30
    107e:	3a f0       	brmi	.+14     	; 0x108e <__divsf3_pse+0x3a>
    1080:	e0 e8       	ldi	r30, 0x80	; 128
    1082:	32 d0       	rcall	.+100    	; 0x10e8 <__divsf3_pse+0x94>
    1084:	91 50       	subi	r25, 0x01	; 1
    1086:	50 40       	sbci	r21, 0x00	; 0
    1088:	e6 95       	lsr	r30
    108a:	00 1c       	adc	r0, r0
    108c:	ca f7       	brpl	.-14     	; 0x1080 <__divsf3_pse+0x2c>
    108e:	2b d0       	rcall	.+86     	; 0x10e6 <__divsf3_pse+0x92>
    1090:	fe 2f       	mov	r31, r30
    1092:	29 d0       	rcall	.+82     	; 0x10e6 <__divsf3_pse+0x92>
    1094:	66 0f       	add	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	88 1f       	adc	r24, r24
    109a:	bb 1f       	adc	r27, r27
    109c:	26 17       	cp	r18, r22
    109e:	37 07       	cpc	r19, r23
    10a0:	48 07       	cpc	r20, r24
    10a2:	ab 07       	cpc	r26, r27
    10a4:	b0 e8       	ldi	r27, 0x80	; 128
    10a6:	09 f0       	breq	.+2      	; 0x10aa <__divsf3_pse+0x56>
    10a8:	bb 0b       	sbc	r27, r27
    10aa:	80 2d       	mov	r24, r0
    10ac:	bf 01       	movw	r22, r30
    10ae:	ff 27       	eor	r31, r31
    10b0:	93 58       	subi	r25, 0x83	; 131
    10b2:	5f 4f       	sbci	r21, 0xFF	; 255
    10b4:	3a f0       	brmi	.+14     	; 0x10c4 <__divsf3_pse+0x70>
    10b6:	9e 3f       	cpi	r25, 0xFE	; 254
    10b8:	51 05       	cpc	r21, r1
    10ba:	78 f0       	brcs	.+30     	; 0x10da <__divsf3_pse+0x86>
    10bc:	0c 94 15 09 	jmp	0x122a	; 0x122a <__fp_inf>
    10c0:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__fp_szero>
    10c4:	5f 3f       	cpi	r21, 0xFF	; 255
    10c6:	e4 f3       	brlt	.-8      	; 0x10c0 <__divsf3_pse+0x6c>
    10c8:	98 3e       	cpi	r25, 0xE8	; 232
    10ca:	d4 f3       	brlt	.-12     	; 0x10c0 <__divsf3_pse+0x6c>
    10cc:	86 95       	lsr	r24
    10ce:	77 95       	ror	r23
    10d0:	67 95       	ror	r22
    10d2:	b7 95       	ror	r27
    10d4:	f7 95       	ror	r31
    10d6:	9f 5f       	subi	r25, 0xFF	; 255
    10d8:	c9 f7       	brne	.-14     	; 0x10cc <__divsf3_pse+0x78>
    10da:	88 0f       	add	r24, r24
    10dc:	91 1d       	adc	r25, r1
    10de:	96 95       	lsr	r25
    10e0:	87 95       	ror	r24
    10e2:	97 f9       	bld	r25, 7
    10e4:	08 95       	ret
    10e6:	e1 e0       	ldi	r30, 0x01	; 1
    10e8:	66 0f       	add	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	bb 1f       	adc	r27, r27
    10f0:	62 17       	cp	r22, r18
    10f2:	73 07       	cpc	r23, r19
    10f4:	84 07       	cpc	r24, r20
    10f6:	ba 07       	cpc	r27, r26
    10f8:	20 f0       	brcs	.+8      	; 0x1102 <__divsf3_pse+0xae>
    10fa:	62 1b       	sub	r22, r18
    10fc:	73 0b       	sbc	r23, r19
    10fe:	84 0b       	sbc	r24, r20
    1100:	ba 0b       	sbc	r27, r26
    1102:	ee 1f       	adc	r30, r30
    1104:	88 f7       	brcc	.-30     	; 0x10e8 <__divsf3_pse+0x94>
    1106:	e0 95       	com	r30
    1108:	08 95       	ret

0000110a <__fixunssfsi>:
    110a:	0e 94 45 09 	call	0x128a	; 0x128a <__fp_splitA>
    110e:	88 f0       	brcs	.+34     	; 0x1132 <__fixunssfsi+0x28>
    1110:	9f 57       	subi	r25, 0x7F	; 127
    1112:	98 f0       	brcs	.+38     	; 0x113a <__fixunssfsi+0x30>
    1114:	b9 2f       	mov	r27, r25
    1116:	99 27       	eor	r25, r25
    1118:	b7 51       	subi	r27, 0x17	; 23
    111a:	b0 f0       	brcs	.+44     	; 0x1148 <__fixunssfsi+0x3e>
    111c:	e1 f0       	breq	.+56     	; 0x1156 <__fixunssfsi+0x4c>
    111e:	66 0f       	add	r22, r22
    1120:	77 1f       	adc	r23, r23
    1122:	88 1f       	adc	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	1a f0       	brmi	.+6      	; 0x112e <__fixunssfsi+0x24>
    1128:	ba 95       	dec	r27
    112a:	c9 f7       	brne	.-14     	; 0x111e <__fixunssfsi+0x14>
    112c:	14 c0       	rjmp	.+40     	; 0x1156 <__fixunssfsi+0x4c>
    112e:	b1 30       	cpi	r27, 0x01	; 1
    1130:	91 f0       	breq	.+36     	; 0x1156 <__fixunssfsi+0x4c>
    1132:	0e 94 5f 09 	call	0x12be	; 0x12be <__fp_zero>
    1136:	b1 e0       	ldi	r27, 0x01	; 1
    1138:	08 95       	ret
    113a:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__fp_zero>
    113e:	67 2f       	mov	r22, r23
    1140:	78 2f       	mov	r23, r24
    1142:	88 27       	eor	r24, r24
    1144:	b8 5f       	subi	r27, 0xF8	; 248
    1146:	39 f0       	breq	.+14     	; 0x1156 <__fixunssfsi+0x4c>
    1148:	b9 3f       	cpi	r27, 0xF9	; 249
    114a:	cc f3       	brlt	.-14     	; 0x113e <__fixunssfsi+0x34>
    114c:	86 95       	lsr	r24
    114e:	77 95       	ror	r23
    1150:	67 95       	ror	r22
    1152:	b3 95       	inc	r27
    1154:	d9 f7       	brne	.-10     	; 0x114c <__fixunssfsi+0x42>
    1156:	3e f4       	brtc	.+14     	; 0x1166 <__fixunssfsi+0x5c>
    1158:	90 95       	com	r25
    115a:	80 95       	com	r24
    115c:	70 95       	com	r23
    115e:	61 95       	neg	r22
    1160:	7f 4f       	sbci	r23, 0xFF	; 255
    1162:	8f 4f       	sbci	r24, 0xFF	; 255
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	08 95       	ret

00001168 <__floatunsisf>:
    1168:	e8 94       	clt
    116a:	09 c0       	rjmp	.+18     	; 0x117e <__floatsisf+0x12>

0000116c <__floatsisf>:
    116c:	97 fb       	bst	r25, 7
    116e:	3e f4       	brtc	.+14     	; 0x117e <__floatsisf+0x12>
    1170:	90 95       	com	r25
    1172:	80 95       	com	r24
    1174:	70 95       	com	r23
    1176:	61 95       	neg	r22
    1178:	7f 4f       	sbci	r23, 0xFF	; 255
    117a:	8f 4f       	sbci	r24, 0xFF	; 255
    117c:	9f 4f       	sbci	r25, 0xFF	; 255
    117e:	99 23       	and	r25, r25
    1180:	a9 f0       	breq	.+42     	; 0x11ac <__floatsisf+0x40>
    1182:	f9 2f       	mov	r31, r25
    1184:	96 e9       	ldi	r25, 0x96	; 150
    1186:	bb 27       	eor	r27, r27
    1188:	93 95       	inc	r25
    118a:	f6 95       	lsr	r31
    118c:	87 95       	ror	r24
    118e:	77 95       	ror	r23
    1190:	67 95       	ror	r22
    1192:	b7 95       	ror	r27
    1194:	f1 11       	cpse	r31, r1
    1196:	f8 cf       	rjmp	.-16     	; 0x1188 <__floatsisf+0x1c>
    1198:	fa f4       	brpl	.+62     	; 0x11d8 <__floatsisf+0x6c>
    119a:	bb 0f       	add	r27, r27
    119c:	11 f4       	brne	.+4      	; 0x11a2 <__floatsisf+0x36>
    119e:	60 ff       	sbrs	r22, 0
    11a0:	1b c0       	rjmp	.+54     	; 0x11d8 <__floatsisf+0x6c>
    11a2:	6f 5f       	subi	r22, 0xFF	; 255
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	8f 4f       	sbci	r24, 0xFF	; 255
    11a8:	9f 4f       	sbci	r25, 0xFF	; 255
    11aa:	16 c0       	rjmp	.+44     	; 0x11d8 <__floatsisf+0x6c>
    11ac:	88 23       	and	r24, r24
    11ae:	11 f0       	breq	.+4      	; 0x11b4 <__floatsisf+0x48>
    11b0:	96 e9       	ldi	r25, 0x96	; 150
    11b2:	11 c0       	rjmp	.+34     	; 0x11d6 <__floatsisf+0x6a>
    11b4:	77 23       	and	r23, r23
    11b6:	21 f0       	breq	.+8      	; 0x11c0 <__floatsisf+0x54>
    11b8:	9e e8       	ldi	r25, 0x8E	; 142
    11ba:	87 2f       	mov	r24, r23
    11bc:	76 2f       	mov	r23, r22
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <__floatsisf+0x5e>
    11c0:	66 23       	and	r22, r22
    11c2:	71 f0       	breq	.+28     	; 0x11e0 <__floatsisf+0x74>
    11c4:	96 e8       	ldi	r25, 0x86	; 134
    11c6:	86 2f       	mov	r24, r22
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	2a f0       	brmi	.+10     	; 0x11d8 <__floatsisf+0x6c>
    11ce:	9a 95       	dec	r25
    11d0:	66 0f       	add	r22, r22
    11d2:	77 1f       	adc	r23, r23
    11d4:	88 1f       	adc	r24, r24
    11d6:	da f7       	brpl	.-10     	; 0x11ce <__floatsisf+0x62>
    11d8:	88 0f       	add	r24, r24
    11da:	96 95       	lsr	r25
    11dc:	87 95       	ror	r24
    11de:	97 f9       	bld	r25, 7
    11e0:	08 95       	ret

000011e2 <__fp_cmp>:
    11e2:	99 0f       	add	r25, r25
    11e4:	00 08       	sbc	r0, r0
    11e6:	55 0f       	add	r21, r21
    11e8:	aa 0b       	sbc	r26, r26
    11ea:	e0 e8       	ldi	r30, 0x80	; 128
    11ec:	fe ef       	ldi	r31, 0xFE	; 254
    11ee:	16 16       	cp	r1, r22
    11f0:	17 06       	cpc	r1, r23
    11f2:	e8 07       	cpc	r30, r24
    11f4:	f9 07       	cpc	r31, r25
    11f6:	c0 f0       	brcs	.+48     	; 0x1228 <__fp_cmp+0x46>
    11f8:	12 16       	cp	r1, r18
    11fa:	13 06       	cpc	r1, r19
    11fc:	e4 07       	cpc	r30, r20
    11fe:	f5 07       	cpc	r31, r21
    1200:	98 f0       	brcs	.+38     	; 0x1228 <__fp_cmp+0x46>
    1202:	62 1b       	sub	r22, r18
    1204:	73 0b       	sbc	r23, r19
    1206:	84 0b       	sbc	r24, r20
    1208:	95 0b       	sbc	r25, r21
    120a:	39 f4       	brne	.+14     	; 0x121a <__fp_cmp+0x38>
    120c:	0a 26       	eor	r0, r26
    120e:	61 f0       	breq	.+24     	; 0x1228 <__fp_cmp+0x46>
    1210:	23 2b       	or	r18, r19
    1212:	24 2b       	or	r18, r20
    1214:	25 2b       	or	r18, r21
    1216:	21 f4       	brne	.+8      	; 0x1220 <__fp_cmp+0x3e>
    1218:	08 95       	ret
    121a:	0a 26       	eor	r0, r26
    121c:	09 f4       	brne	.+2      	; 0x1220 <__fp_cmp+0x3e>
    121e:	a1 40       	sbci	r26, 0x01	; 1
    1220:	a6 95       	lsr	r26
    1222:	8f ef       	ldi	r24, 0xFF	; 255
    1224:	81 1d       	adc	r24, r1
    1226:	81 1d       	adc	r24, r1
    1228:	08 95       	ret

0000122a <__fp_inf>:
    122a:	97 f9       	bld	r25, 7
    122c:	9f 67       	ori	r25, 0x7F	; 127
    122e:	80 e8       	ldi	r24, 0x80	; 128
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	08 95       	ret

00001236 <__fp_nan>:
    1236:	9f ef       	ldi	r25, 0xFF	; 255
    1238:	80 ec       	ldi	r24, 0xC0	; 192
    123a:	08 95       	ret

0000123c <__fp_pscA>:
    123c:	00 24       	eor	r0, r0
    123e:	0a 94       	dec	r0
    1240:	16 16       	cp	r1, r22
    1242:	17 06       	cpc	r1, r23
    1244:	18 06       	cpc	r1, r24
    1246:	09 06       	cpc	r0, r25
    1248:	08 95       	ret

0000124a <__fp_pscB>:
    124a:	00 24       	eor	r0, r0
    124c:	0a 94       	dec	r0
    124e:	12 16       	cp	r1, r18
    1250:	13 06       	cpc	r1, r19
    1252:	14 06       	cpc	r1, r20
    1254:	05 06       	cpc	r0, r21
    1256:	08 95       	ret

00001258 <__fp_round>:
    1258:	09 2e       	mov	r0, r25
    125a:	03 94       	inc	r0
    125c:	00 0c       	add	r0, r0
    125e:	11 f4       	brne	.+4      	; 0x1264 <__fp_round+0xc>
    1260:	88 23       	and	r24, r24
    1262:	52 f0       	brmi	.+20     	; 0x1278 <__fp_round+0x20>
    1264:	bb 0f       	add	r27, r27
    1266:	40 f4       	brcc	.+16     	; 0x1278 <__fp_round+0x20>
    1268:	bf 2b       	or	r27, r31
    126a:	11 f4       	brne	.+4      	; 0x1270 <__fp_round+0x18>
    126c:	60 ff       	sbrs	r22, 0
    126e:	04 c0       	rjmp	.+8      	; 0x1278 <__fp_round+0x20>
    1270:	6f 5f       	subi	r22, 0xFF	; 255
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
    1274:	8f 4f       	sbci	r24, 0xFF	; 255
    1276:	9f 4f       	sbci	r25, 0xFF	; 255
    1278:	08 95       	ret

0000127a <__fp_split3>:
    127a:	57 fd       	sbrc	r21, 7
    127c:	90 58       	subi	r25, 0x80	; 128
    127e:	44 0f       	add	r20, r20
    1280:	55 1f       	adc	r21, r21
    1282:	59 f0       	breq	.+22     	; 0x129a <__fp_splitA+0x10>
    1284:	5f 3f       	cpi	r21, 0xFF	; 255
    1286:	71 f0       	breq	.+28     	; 0x12a4 <__fp_splitA+0x1a>
    1288:	47 95       	ror	r20

0000128a <__fp_splitA>:
    128a:	88 0f       	add	r24, r24
    128c:	97 fb       	bst	r25, 7
    128e:	99 1f       	adc	r25, r25
    1290:	61 f0       	breq	.+24     	; 0x12aa <__fp_splitA+0x20>
    1292:	9f 3f       	cpi	r25, 0xFF	; 255
    1294:	79 f0       	breq	.+30     	; 0x12b4 <__fp_splitA+0x2a>
    1296:	87 95       	ror	r24
    1298:	08 95       	ret
    129a:	12 16       	cp	r1, r18
    129c:	13 06       	cpc	r1, r19
    129e:	14 06       	cpc	r1, r20
    12a0:	55 1f       	adc	r21, r21
    12a2:	f2 cf       	rjmp	.-28     	; 0x1288 <__fp_split3+0xe>
    12a4:	46 95       	lsr	r20
    12a6:	f1 df       	rcall	.-30     	; 0x128a <__fp_splitA>
    12a8:	08 c0       	rjmp	.+16     	; 0x12ba <__fp_splitA+0x30>
    12aa:	16 16       	cp	r1, r22
    12ac:	17 06       	cpc	r1, r23
    12ae:	18 06       	cpc	r1, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	f1 cf       	rjmp	.-30     	; 0x1296 <__fp_splitA+0xc>
    12b4:	86 95       	lsr	r24
    12b6:	71 05       	cpc	r23, r1
    12b8:	61 05       	cpc	r22, r1
    12ba:	08 94       	sec
    12bc:	08 95       	ret

000012be <__fp_zero>:
    12be:	e8 94       	clt

000012c0 <__fp_szero>:
    12c0:	bb 27       	eor	r27, r27
    12c2:	66 27       	eor	r22, r22
    12c4:	77 27       	eor	r23, r23
    12c6:	cb 01       	movw	r24, r22
    12c8:	97 f9       	bld	r25, 7
    12ca:	08 95       	ret

000012cc <__gesf2>:
    12cc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__fp_cmp>
    12d0:	08 f4       	brcc	.+2      	; 0x12d4 <__gesf2+0x8>
    12d2:	8f ef       	ldi	r24, 0xFF	; 255
    12d4:	08 95       	ret

000012d6 <__mulsf3>:
    12d6:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__mulsf3x>
    12da:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__fp_round>
    12de:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_pscA>
    12e2:	38 f0       	brcs	.+14     	; 0x12f2 <__mulsf3+0x1c>
    12e4:	0e 94 25 09 	call	0x124a	; 0x124a <__fp_pscB>
    12e8:	20 f0       	brcs	.+8      	; 0x12f2 <__mulsf3+0x1c>
    12ea:	95 23       	and	r25, r21
    12ec:	11 f0       	breq	.+4      	; 0x12f2 <__mulsf3+0x1c>
    12ee:	0c 94 15 09 	jmp	0x122a	; 0x122a <__fp_inf>
    12f2:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__fp_nan>
    12f6:	11 24       	eor	r1, r1
    12f8:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__fp_szero>

000012fc <__mulsf3x>:
    12fc:	0e 94 3d 09 	call	0x127a	; 0x127a <__fp_split3>
    1300:	70 f3       	brcs	.-36     	; 0x12de <__mulsf3+0x8>

00001302 <__mulsf3_pse>:
    1302:	95 9f       	mul	r25, r21
    1304:	c1 f3       	breq	.-16     	; 0x12f6 <__mulsf3+0x20>
    1306:	95 0f       	add	r25, r21
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	55 1f       	adc	r21, r21
    130c:	62 9f       	mul	r22, r18
    130e:	f0 01       	movw	r30, r0
    1310:	72 9f       	mul	r23, r18
    1312:	bb 27       	eor	r27, r27
    1314:	f0 0d       	add	r31, r0
    1316:	b1 1d       	adc	r27, r1
    1318:	63 9f       	mul	r22, r19
    131a:	aa 27       	eor	r26, r26
    131c:	f0 0d       	add	r31, r0
    131e:	b1 1d       	adc	r27, r1
    1320:	aa 1f       	adc	r26, r26
    1322:	64 9f       	mul	r22, r20
    1324:	66 27       	eor	r22, r22
    1326:	b0 0d       	add	r27, r0
    1328:	a1 1d       	adc	r26, r1
    132a:	66 1f       	adc	r22, r22
    132c:	82 9f       	mul	r24, r18
    132e:	22 27       	eor	r18, r18
    1330:	b0 0d       	add	r27, r0
    1332:	a1 1d       	adc	r26, r1
    1334:	62 1f       	adc	r22, r18
    1336:	73 9f       	mul	r23, r19
    1338:	b0 0d       	add	r27, r0
    133a:	a1 1d       	adc	r26, r1
    133c:	62 1f       	adc	r22, r18
    133e:	83 9f       	mul	r24, r19
    1340:	a0 0d       	add	r26, r0
    1342:	61 1d       	adc	r22, r1
    1344:	22 1f       	adc	r18, r18
    1346:	74 9f       	mul	r23, r20
    1348:	33 27       	eor	r19, r19
    134a:	a0 0d       	add	r26, r0
    134c:	61 1d       	adc	r22, r1
    134e:	23 1f       	adc	r18, r19
    1350:	84 9f       	mul	r24, r20
    1352:	60 0d       	add	r22, r0
    1354:	21 1d       	adc	r18, r1
    1356:	82 2f       	mov	r24, r18
    1358:	76 2f       	mov	r23, r22
    135a:	6a 2f       	mov	r22, r26
    135c:	11 24       	eor	r1, r1
    135e:	9f 57       	subi	r25, 0x7F	; 127
    1360:	50 40       	sbci	r21, 0x00	; 0
    1362:	9a f0       	brmi	.+38     	; 0x138a <__mulsf3_pse+0x88>
    1364:	f1 f0       	breq	.+60     	; 0x13a2 <__mulsf3_pse+0xa0>
    1366:	88 23       	and	r24, r24
    1368:	4a f0       	brmi	.+18     	; 0x137c <__mulsf3_pse+0x7a>
    136a:	ee 0f       	add	r30, r30
    136c:	ff 1f       	adc	r31, r31
    136e:	bb 1f       	adc	r27, r27
    1370:	66 1f       	adc	r22, r22
    1372:	77 1f       	adc	r23, r23
    1374:	88 1f       	adc	r24, r24
    1376:	91 50       	subi	r25, 0x01	; 1
    1378:	50 40       	sbci	r21, 0x00	; 0
    137a:	a9 f7       	brne	.-22     	; 0x1366 <__mulsf3_pse+0x64>
    137c:	9e 3f       	cpi	r25, 0xFE	; 254
    137e:	51 05       	cpc	r21, r1
    1380:	80 f0       	brcs	.+32     	; 0x13a2 <__mulsf3_pse+0xa0>
    1382:	0c 94 15 09 	jmp	0x122a	; 0x122a <__fp_inf>
    1386:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__fp_szero>
    138a:	5f 3f       	cpi	r21, 0xFF	; 255
    138c:	e4 f3       	brlt	.-8      	; 0x1386 <__mulsf3_pse+0x84>
    138e:	98 3e       	cpi	r25, 0xE8	; 232
    1390:	d4 f3       	brlt	.-12     	; 0x1386 <__mulsf3_pse+0x84>
    1392:	86 95       	lsr	r24
    1394:	77 95       	ror	r23
    1396:	67 95       	ror	r22
    1398:	b7 95       	ror	r27
    139a:	f7 95       	ror	r31
    139c:	e7 95       	ror	r30
    139e:	9f 5f       	subi	r25, 0xFF	; 255
    13a0:	c1 f7       	brne	.-16     	; 0x1392 <__mulsf3_pse+0x90>
    13a2:	fe 2b       	or	r31, r30
    13a4:	88 0f       	add	r24, r24
    13a6:	91 1d       	adc	r25, r1
    13a8:	96 95       	lsr	r25
    13aa:	87 95       	ror	r24
    13ac:	97 f9       	bld	r25, 7
    13ae:	08 95       	ret

000013b0 <__udivmodsi4>:
    13b0:	a1 e2       	ldi	r26, 0x21	; 33
    13b2:	1a 2e       	mov	r1, r26
    13b4:	aa 1b       	sub	r26, r26
    13b6:	bb 1b       	sub	r27, r27
    13b8:	fd 01       	movw	r30, r26
    13ba:	0d c0       	rjmp	.+26     	; 0x13d6 <__udivmodsi4_ep>

000013bc <__udivmodsi4_loop>:
    13bc:	aa 1f       	adc	r26, r26
    13be:	bb 1f       	adc	r27, r27
    13c0:	ee 1f       	adc	r30, r30
    13c2:	ff 1f       	adc	r31, r31
    13c4:	a2 17       	cp	r26, r18
    13c6:	b3 07       	cpc	r27, r19
    13c8:	e4 07       	cpc	r30, r20
    13ca:	f5 07       	cpc	r31, r21
    13cc:	20 f0       	brcs	.+8      	; 0x13d6 <__udivmodsi4_ep>
    13ce:	a2 1b       	sub	r26, r18
    13d0:	b3 0b       	sbc	r27, r19
    13d2:	e4 0b       	sbc	r30, r20
    13d4:	f5 0b       	sbc	r31, r21

000013d6 <__udivmodsi4_ep>:
    13d6:	66 1f       	adc	r22, r22
    13d8:	77 1f       	adc	r23, r23
    13da:	88 1f       	adc	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	1a 94       	dec	r1
    13e0:	69 f7       	brne	.-38     	; 0x13bc <__udivmodsi4_loop>
    13e2:	60 95       	com	r22
    13e4:	70 95       	com	r23
    13e6:	80 95       	com	r24
    13e8:	90 95       	com	r25
    13ea:	9b 01       	movw	r18, r22
    13ec:	ac 01       	movw	r20, r24
    13ee:	bd 01       	movw	r22, r26
    13f0:	cf 01       	movw	r24, r30
    13f2:	08 95       	ret

000013f4 <__tablejump2__>:
    13f4:	ee 0f       	add	r30, r30
    13f6:	ff 1f       	adc	r31, r31
    13f8:	05 90       	lpm	r0, Z+
    13fa:	f4 91       	lpm	r31, Z
    13fc:	e0 2d       	mov	r30, r0
    13fe:	09 94       	ijmp

00001400 <__muluhisi3>:
    1400:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__umulhisi3>
    1404:	a5 9f       	mul	r26, r21
    1406:	90 0d       	add	r25, r0
    1408:	b4 9f       	mul	r27, r20
    140a:	90 0d       	add	r25, r0
    140c:	a4 9f       	mul	r26, r20
    140e:	80 0d       	add	r24, r0
    1410:	91 1d       	adc	r25, r1
    1412:	11 24       	eor	r1, r1
    1414:	08 95       	ret

00001416 <__umulhisi3>:
    1416:	a2 9f       	mul	r26, r18
    1418:	b0 01       	movw	r22, r0
    141a:	b3 9f       	mul	r27, r19
    141c:	c0 01       	movw	r24, r0
    141e:	a3 9f       	mul	r26, r19
    1420:	70 0d       	add	r23, r0
    1422:	81 1d       	adc	r24, r1
    1424:	11 24       	eor	r1, r1
    1426:	91 1d       	adc	r25, r1
    1428:	b2 9f       	mul	r27, r18
    142a:	70 0d       	add	r23, r0
    142c:	81 1d       	adc	r24, r1
    142e:	11 24       	eor	r1, r1
    1430:	91 1d       	adc	r25, r1
    1432:	08 95       	ret

00001434 <_exit>:
    1434:	f8 94       	cli

00001436 <__stop_program>:
    1436:	ff cf       	rjmp	.-2      	; 0x1436 <__stop_program>
