
Electric_Water_Heater_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001bcc  00001c60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  00800062  00800062  00001c62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c33  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001494  00000000  00000000  00005d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000262e  00000000  00000000  000071b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000888  00000000  00000000  000097e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001197  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002457  00000000  00000000  0000b207  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  0000d65e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_1>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_5>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_11>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	91 05       	cpc	r25, r1
      56:	95 05       	cpc	r25, r5
      58:	99 05       	cpc	r25, r9
      5a:	9d 05       	cpc	r25, r13
      5c:	a1 05       	cpc	r26, r1
      5e:	a5 05       	cpc	r26, r5
      60:	a9 05       	cpc	r26, r9
      62:	ad 05       	cpc	r26, r13
      64:	07 63       	ori	r16, 0x37	; 55
      66:	42 36       	cpi	r20, 0x62	; 98
      68:	b7 9b       	sbis	0x16, 7	; 22
      6a:	d8 a7       	std	Y+40, r29	; 0x28
      6c:	1a 39       	cpi	r17, 0x9A	; 154
      6e:	68 56       	subi	r22, 0x68	; 104
      70:	18 ae       	std	Y+56, r1	; 0x38
      72:	ba ab       	std	Y+50, r27	; 0x32
      74:	55 8c       	ldd	r5, Z+29	; 0x1d
      76:	1d 3c       	cpi	r17, 0xCD	; 205
      78:	b7 cc       	rjmp	.-1682   	; 0xfffff9e8 <__eeprom_end+0xff7ef9e8>
      7a:	57 63       	ori	r21, 0x37	; 55
      7c:	bd 6d       	ori	r27, 0xDD	; 221
      7e:	ed fd       	.word	0xfded	; ????
      80:	75 3e       	cpi	r23, 0xE5	; 229
      82:	f6 17       	cp	r31, r22
      84:	72 31       	cpi	r23, 0x12	; 18
      86:	bf 00       	.word	0x00bf	; ????
      88:	00 00       	nop
      8a:	80 3f       	cpi	r24, 0xF0	; 240
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <__stack+0x81>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
	...

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf e5       	ldi	r28, 0x5F	; 95
      ec:	d8 e0       	ldi	r29, 0x08	; 8
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	10 e0       	ldi	r17, 0x00	; 0
      f4:	a0 e6       	ldi	r26, 0x60	; 96
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	ec ec       	ldi	r30, 0xCC	; 204
      fa:	fb e1       	ldi	r31, 0x1B	; 27
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
      fe:	05 90       	lpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	a2 36       	cpi	r26, 0x62	; 98
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	a2 e6       	ldi	r26, 0x62	; 98
     10c:	b0 e0       	ldi	r27, 0x00	; 0
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a6 3a       	cpi	r26, 0xA6	; 166
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 33 01 	call	0x266	; 0x266 <main>
     11c:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <__vector_1>:
		
	}
	return 0;
}

ISR(INT0_vect){
     124:	1f 92       	push	r1
     126:	0f 92       	push	r0
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	0f 92       	push	r0
     12c:	11 24       	eor	r1, r1
     12e:	2f 93       	push	r18
     130:	3f 93       	push	r19
     132:	4f 93       	push	r20
     134:	5f 93       	push	r21
     136:	6f 93       	push	r22
     138:	7f 93       	push	r23
     13a:	8f 93       	push	r24
     13c:	9f 93       	push	r25
     13e:	af 93       	push	r26
     140:	bf 93       	push	r27
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
	power_flag^=1;
     146:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <power_flag>
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	89 27       	eor	r24, r25
     14e:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <power_flag>
	if(power_flag==0){
     152:	81 11       	cpse	r24, r1
     154:	13 c0       	rjmp	.+38     	; 0x17c <__vector_1+0x58>
		LED0_OFF();
     156:	0e 94 53 05 	call	0xaa6	; 0xaa6 <LED0_OFF>
		LED1_OFF();
     15a:	0e 94 61 05 	call	0xac2	; 0xac2 <LED1_OFF>
		LED2_OFF();
     15e:	0e 94 6d 05 	call	0xada	; 0xada <LED2_OFF>
		Timer0_Stop();
     162:	0e 94 9b 07 	call	0xf36	; 0xf36 <Timer0_Stop>
		Timer1_stop();
     166:	0e 94 4f 08 	call	0x109e	; 0x109e <Timer1_stop>
		first_push_flag=0;
     16a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <first_push_flag>
		SEVSEG_Disable1();
     16e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <SEVSEG_Disable1>
		SEVSEG_Disable2();
     172:	0e 94 7d 03 	call	0x6fa	; 0x6fa <SEVSEG_Disable2>
		SEVSEG_Dot_Disable();
     176:	0e 94 83 03 	call	0x706	; 0x706 <SEVSEG_Dot_Disable>
     17a:	07 c0       	rjmp	.+14     	; 0x18a <__vector_1+0x66>
		//LCD_disable();
	}
	else {
		LED0_ON();
     17c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <LED0_ON>
		SEVSEG_Initialization();
     180:	0e 94 47 03 	call	0x68e	; 0x68e <SEVSEG_Initialization>
		//LCD_Initialization();
		test=1;
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <test>
	}
}
     18a:	ff 91       	pop	r31
     18c:	ef 91       	pop	r30
     18e:	bf 91       	pop	r27
     190:	af 91       	pop	r26
     192:	9f 91       	pop	r25
     194:	8f 91       	pop	r24
     196:	7f 91       	pop	r23
     198:	6f 91       	pop	r22
     19a:	5f 91       	pop	r21
     19c:	4f 91       	pop	r20
     19e:	3f 91       	pop	r19
     1a0:	2f 91       	pop	r18
     1a2:	0f 90       	pop	r0
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	0f 90       	pop	r0
     1a8:	1f 90       	pop	r1
     1aa:	18 95       	reti

000001ac <sitting_temp>:
void sitting_temp(uint8_t btn0_read_,uint8_t btn1_read_){		//if user press the button make test = 1 to restart timer
	if(btn0_read_==PRESSED&&degree<75){
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	f1 f4       	brne	.+60     	; 0x1ec <sitting_temp+0x40>
     1b0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     1b4:	9b 34       	cpi	r25, 0x4B	; 75
     1b6:	d0 f4       	brcc	.+52     	; 0x1ec <sitting_temp+0x40>
		degree+=5;
     1b8:	65 e0       	ldi	r22, 0x05	; 5
     1ba:	69 0f       	add	r22, r25
     1bc:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <degree>
		EEPROM_Write(degree_addr , degree); // Saving desired temperature on EEPROM
     1c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 06 07 	call	0xe0c	; 0xe0c <EEPROM_Write>
		test=1;
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <test>
		Timer0_Stop();
     1d0:	0e 94 9b 07 	call	0xf36	; 0xf36 <Timer0_Stop>
		Timer0_Start(PreS_1024);
     1d4:	85 e0       	ldi	r24, 0x05	; 5
     1d6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     1da:	2f ef       	ldi	r18, 0xFF	; 255
     1dc:	48 e8       	ldi	r20, 0x88	; 136
     1de:	53 e1       	ldi	r21, 0x13	; 19
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <Timer0_WithInterrupt_SetDelay>
     1ea:	08 95       	ret
	}
	else if(btn1_read_==PRESSED&&degree>35) {
     1ec:	61 30       	cpi	r22, 0x01	; 1
     1ee:	f1 f4       	brne	.+60     	; 0x22c <sitting_temp+0x80>
     1f0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     1f4:	94 32       	cpi	r25, 0x24	; 36
     1f6:	d0 f0       	brcs	.+52     	; 0x22c <sitting_temp+0x80>
		degree-=5;
     1f8:	6b ef       	ldi	r22, 0xFB	; 251
     1fa:	69 0f       	add	r22, r25
     1fc:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <degree>
		EEPROM_Write(degree_addr , degree); // Saving desired temperature on EEPROM
     200:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 06 07 	call	0xe0c	; 0xe0c <EEPROM_Write>
		test=1;
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <test>
		Timer0_Stop();
     210:	0e 94 9b 07 	call	0xf36	; 0xf36 <Timer0_Stop>
		Timer0_Start(PreS_1024);
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	0e 94 3d 07 	call	0xe7a	; 0xe7a <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     21a:	2f ef       	ldi	r18, 0xFF	; 255
     21c:	48 e8       	ldi	r20, 0x88	; 136
     21e:	53 e1       	ldi	r21, 0x13	; 19
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <Timer0_WithInterrupt_SetDelay>
     22a:	08 95       	ret
	}
	else if((btn1_read_==PRESSED&&degree==35)||(btn0_read_==PRESSED&&degree==75)) {
     22c:	61 30       	cpi	r22, 0x01	; 1
     22e:	21 f4       	brne	.+8      	; 0x238 <sitting_temp+0x8c>
     230:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     234:	93 32       	cpi	r25, 0x23	; 35
     236:	31 f0       	breq	.+12     	; 0x244 <sitting_temp+0x98>
     238:	81 30       	cpi	r24, 0x01	; 1
     23a:	a1 f4       	brne	.+40     	; 0x264 <sitting_temp+0xb8>
     23c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <degree>
     240:	8b 34       	cpi	r24, 0x4B	; 75
     242:	81 f4       	brne	.+32     	; 0x264 <sitting_temp+0xb8>
		test=1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <test>
		Timer0_Stop();
     24a:	0e 94 9b 07 	call	0xf36	; 0xf36 <Timer0_Stop>
		Timer0_Start(PreS_1024);
     24e:	85 e0       	ldi	r24, 0x05	; 5
     250:	0e 94 3d 07 	call	0xe7a	; 0xe7a <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     254:	2f ef       	ldi	r18, 0xFF	; 255
     256:	48 e8       	ldi	r20, 0x88	; 136
     258:	53 e1       	ldi	r21, 0x13	; 19
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <Timer0_WithInterrupt_SetDelay>
     264:	08 95       	ret

00000266 <main>:
{

	
	

	Interrupt_Initialization(INT0_Signal);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 12 07 	call	0xe24	; 0xe24 <Interrupt_Initialization>
	DIO_SetPinPullUp(DIO_PORTD,DIO_PIN2);
     26c:	62 e0       	ldi	r22, 0x02	; 2
     26e:	83 e0       	ldi	r24, 0x03	; 3
     270:	0e 94 d2 06 	call	0xda4	; 0xda4 <DIO_SetPinPullUp>
	Timer0_WithInterrupt_Initialization(TIMER1_Normal,Pin_disconnected);
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	0e 94 a5 07 	call	0xf4a	; 0xf4a <Timer0_WithInterrupt_Initialization>
	Timer2_WithInterrupt_Initialization(Normal_Mode_ , Pin_disconnected_);
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	0e 94 bb 08 	call	0x1176	; 0x1176 <Timer2_WithInterrupt_Initialization>
	Timer2_Start(PreS_1024_);
     284:	85 e0       	ldi	r24, 0x05	; 5
     286:	0e 94 5d 08 	call	0x10ba	; 0x10ba <Timer2_Start>
	Timer2_WithInterrupt_SetDelay(Normal_Mode_ , 100 , 255);
     28a:	2f ef       	ldi	r18, 0xFF	; 255
     28c:	44 e6       	ldi	r20, 0x64	; 100
     28e:	50 e0       	ldi	r21, 0x00	; 0
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <Timer2_WithInterrupt_SetDelay>
	// Timer1_with_interrupt_initialization(TIMER1_Normal , TIMER1_PIN_Disconnected,TIMER1_Channel_A);
	// Timer1_start(TIMER1_Prescaler_1024);	//start timer1 to get the ADC read every 100 ms
	// Timer1_with_interrupt_setDelay(TIMER1_Normal , 100 , 255);
	ADC_Initialization(ADC1);
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	0e 94 88 05 	call	0xb10	; 0xb10 <ADC_Initialization>
	BTN0_Initialization();
     2a0:	0e 94 ba 03 	call	0x774	; 0x774 <BTN0_Initialization>
	BTN1_Initialization();
     2a4:	0e 94 cb 03 	call	0x796	; 0x796 <BTN1_Initialization>
	LED0_Initialization();
     2a8:	0e 94 47 05 	call	0xa8e	; 0xa8e <LED0_Initialization>
	LED1_Initialization();
     2ac:	0e 94 59 05 	call	0xab2	; 0xab2 <LED1_Initialization>
	LED2_Initialization();
     2b0:	0e 94 65 05 	call	0xaca	; 0xaca <LED2_Initialization>
	Relay_Initialization();
     2b4:	0e 94 76 05 	call	0xaec	; 0xaec <Relay_Initialization>

	
	/* Replace with your application code */
	while (1)
	{
		btn1_read_ = BTN1_Read();	//get button1 read
     2b8:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <BTN1_Read>
     2bc:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <btn1_read_>
		btn0_read_ =BTN0_Read();	//get button0 read
     2c0:	0e 94 c0 03 	call	0x780	; 0x780 <BTN0_Read>
     2c4:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <btn0_read_>
		
		//check if the device is on or off
		if (power_flag==0);	//if off do noting
     2c8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <power_flag>
     2cc:	99 23       	and	r25, r25
     2ce:	a1 f3       	breq	.-24     	; 0x2b8 <main+0x52>
		else{	//if on start operations
			

			
			if((first_push_flag==0&&btn0_read_==PRESSED)||(first_push_flag==0&&btn1_read_==PRESSED)){	//check if buttons are clicked for the first time to enter setting mode
     2d0:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <first_push_flag>
     2d4:	91 11       	cpse	r25, r1
     2d6:	19 c0       	rjmp	.+50     	; 0x30a <main+0xa4>
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	21 f0       	breq	.+8      	; 0x2e4 <main+0x7e>
     2dc:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <btn1_read_>
     2e0:	91 30       	cpi	r25, 0x01	; 1
     2e2:	99 f4       	brne	.+38     	; 0x30a <main+0xa4>
				first_push_flag=1;	//raise the flag
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <first_push_flag>
				Timer0_Start(PreS_1024);	//start timer0 so that if 5 seconds spend without using buttons ,exit setting mode
     2ea:	85 e0       	ldi	r24, 0x05	; 5
     2ec:	0e 94 3d 07 	call	0xe7a	; 0xe7a <Timer0_Start>
				Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     2f0:	2f ef       	ldi	r18, 0xFF	; 255
     2f2:	48 e8       	ldi	r20, 0x88	; 136
     2f4:	53 e1       	ldi	r21, 0x13	; 19
     2f6:	60 e0       	ldi	r22, 0x00	; 0
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <Timer0_WithInterrupt_SetDelay>
				//reset buttons read
				btn1_read_=0;
     300:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <btn1_read_>
				btn0_read_=0;
     304:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <btn0_read_>
     308:	04 c0       	rjmp	.+8      	; 0x312 <main+0xac>
			}
			else {	//if this isn't the first click call the function of setting mode
				sitting_temp(btn0_read_,btn1_read_);
     30a:	60 91 a5 00 	lds	r22, 0x00A5	; 0x8000a5 <btn1_read_>
     30e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <sitting_temp>
				
			}
			
			//compare the current temp with set_temp
			
			if(current_temp<degree-5){
     312:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <degree>
     316:	c6 2f       	mov	r28, r22
     318:	d0 e0       	ldi	r29, 0x00	; 0
     31a:	be 01       	movw	r22, r28
     31c:	65 50       	subi	r22, 0x05	; 5
     31e:	71 09       	sbc	r23, r1
     320:	07 2e       	mov	r0, r23
     322:	00 0c       	add	r0, r0
     324:	88 0b       	sbc	r24, r24
     326:	99 0b       	sbc	r25, r25
     328:	0e 94 81 0a 	call	0x1502	; 0x1502 <__floatsisf>
     32c:	c0 90 7f 00 	lds	r12, 0x007F	; 0x80007f <current_temp>
     330:	d0 90 80 00 	lds	r13, 0x0080	; 0x800080 <current_temp+0x1>
     334:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <current_temp+0x2>
     338:	f0 90 82 00 	lds	r15, 0x0082	; 0x800082 <current_temp+0x3>
     33c:	a7 01       	movw	r20, r14
     33e:	96 01       	movw	r18, r12
     340:	0e 94 31 0b 	call	0x1662	; 0x1662 <__gesf2>
     344:	18 16       	cp	r1, r24
     346:	2c f4       	brge	.+10     	; 0x352 <main+0xec>
				LED1_ON(); // Heating element on
     348:	0e 94 5d 05 	call	0xaba	; 0xaba <LED1_ON>
				LED2_OFF(); // Cooling element off
     34c:	0e 94 6d 05 	call	0xada	; 0xada <LED2_OFF>
     350:	32 c0       	rjmp	.+100    	; 0x3b6 <main+0x150>
			}
			else if (current_temp>degree+5)
     352:	be 01       	movw	r22, r28
     354:	6b 5f       	subi	r22, 0xFB	; 251
     356:	7f 4f       	sbci	r23, 0xFF	; 255
     358:	07 2e       	mov	r0, r23
     35a:	00 0c       	add	r0, r0
     35c:	88 0b       	sbc	r24, r24
     35e:	99 0b       	sbc	r25, r25
     360:	0e 94 81 0a 	call	0x1502	; 0x1502 <__floatsisf>
     364:	9b 01       	movw	r18, r22
     366:	ac 01       	movw	r20, r24
     368:	c7 01       	movw	r24, r14
     36a:	b6 01       	movw	r22, r12
     36c:	0e 94 31 0b 	call	0x1662	; 0x1662 <__gesf2>
     370:	18 16       	cp	r1, r24
     372:	2c f4       	brge	.+10     	; 0x37e <main+0x118>
			{
				LED1_OFF(); // Heating element off
     374:	0e 94 61 05 	call	0xac2	; 0xac2 <LED1_OFF>
				LED2_ON(); // Cooling element on
     378:	0e 94 69 05 	call	0xad2	; 0xad2 <LED2_ON>
     37c:	1c c0       	rjmp	.+56     	; 0x3b6 <main+0x150>
			}
			else if (current_temp==degree)
     37e:	be 01       	movw	r22, r28
     380:	dd 0f       	add	r29, r29
     382:	88 0b       	sbc	r24, r24
     384:	99 0b       	sbc	r25, r25
     386:	0e 94 81 0a 	call	0x1502	; 0x1502 <__floatsisf>
     38a:	9b 01       	movw	r18, r22
     38c:	ac 01       	movw	r20, r24
     38e:	c7 01       	movw	r24, r14
     390:	b6 01       	movw	r22, r12
     392:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__cmpsf2>
     396:	81 11       	cpse	r24, r1
     398:	0e c0       	rjmp	.+28     	; 0x3b6 <main+0x150>
			{
				LED1_OFF(); // Heating element off
     39a:	0e 94 61 05 	call	0xac2	; 0xac2 <LED1_OFF>
				LED2_OFF(); // Cooling element off
     39e:	0e 94 6d 05 	call	0xada	; 0xada <LED2_OFF>
				Relay_ON();
     3a2:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <Relay_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3a6:	8f e3       	ldi	r24, 0x3F	; 63
     3a8:	9c e9       	ldi	r25, 0x9C	; 156
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <main+0x144>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <main+0x14a>
     3b0:	00 00       	nop
				_delay_ms(10);
				Relay_OFF();
     3b2:	0e 94 82 05 	call	0xb04	; 0xb04 <Relay_OFF>
			}
			if (first_push_flag==0)
     3b6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <first_push_flag>
     3ba:	81 11       	cpse	r24, r1
     3bc:	7d cf       	rjmp	.-262    	; 0x2b8 <main+0x52>
			{
				//LCD_Clear();
				//LCD_Write_Number(current_temp);
				SEVSEG_Display(current_temp);
     3be:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <current_temp>
     3c2:	70 91 80 00 	lds	r23, 0x0080	; 0x800080 <current_temp+0x1>
     3c6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <current_temp+0x2>
     3ca:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <current_temp+0x3>
     3ce:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fixunssfsi>
     3d2:	86 2f       	mov	r24, r22
     3d4:	0e 94 89 03 	call	0x712	; 0x712 <SEVSEG_Display>
     3d8:	6f cf       	rjmp	.-290    	; 0x2b8 <main+0x52>

000003da <calcualate_avg_temp>:
	}

}

float calcualate_avg_temp(uint16_t* arr)
{
     3da:	ac 01       	movw	r20, r24
	uint16_t sum = 0;
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     3dc:	90 e0       	ldi	r25, 0x00	; 0

}

float calcualate_avg_temp(uint16_t* arr)
{
	uint16_t sum = 0;
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	70 e0       	ldi	r23, 0x00	; 0
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     3e2:	0b c0       	rjmp	.+22     	; 0x3fa <calcualate_avg_temp+0x20>
	{
		sum += arr[i];
     3e4:	e9 2f       	mov	r30, r25
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	ee 0f       	add	r30, r30
     3ea:	ff 1f       	adc	r31, r31
     3ec:	e4 0f       	add	r30, r20
     3ee:	f5 1f       	adc	r31, r21
     3f0:	20 81       	ld	r18, Z
     3f2:	31 81       	ldd	r19, Z+1	; 0x01
     3f4:	62 0f       	add	r22, r18
     3f6:	73 1f       	adc	r23, r19

float calcualate_avg_temp(uint16_t* arr)
{
	uint16_t sum = 0;
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     3f8:	9f 5f       	subi	r25, 0xFF	; 255
     3fa:	9a 30       	cpi	r25, 0x0A	; 10
     3fc:	98 f3       	brcs	.-26     	; 0x3e4 <calcualate_avg_temp+0xa>
	{
		sum += arr[i];
	}
	
	return (float ) sum / (float ) 10;
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__floatunsisf>
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	40 e2       	ldi	r20, 0x20	; 32
     40c:	51 e4       	ldi	r21, 0x41	; 65
     40e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__divsf3>
}
     412:	08 95       	ret

00000414 <__vector_11>:

ISR(TIMER0_OVF_vect){
     414:	1f 92       	push	r1
     416:	0f 92       	push	r0
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	0f 92       	push	r0
     41c:	11 24       	eor	r1, r1
     41e:	4f 92       	push	r4
     420:	5f 92       	push	r5
     422:	6f 92       	push	r6
     424:	7f 92       	push	r7
     426:	8f 92       	push	r8
     428:	9f 92       	push	r9
     42a:	af 92       	push	r10
     42c:	bf 92       	push	r11
     42e:	cf 92       	push	r12
     430:	df 92       	push	r13
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	2f 93       	push	r18
     43a:	3f 93       	push	r19
     43c:	4f 93       	push	r20
     43e:	5f 93       	push	r21
     440:	6f 93       	push	r22
     442:	7f 93       	push	r23
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	af 93       	push	r26
     44a:	bf 93       	push	r27
     44c:	ef 93       	push	r30
     44e:	ff 93       	push	r31
	
	static uint32_t cnt=0;
	if(test==1){	//restart count from 0 if user press the buttons
     450:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <test>
     454:	81 30       	cpi	r24, 0x01	; 1
     456:	51 f4       	brne	.+20     	; 0x46c <__vector_11+0x58>
		cnt=0;
     458:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
     45c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
     460:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
     464:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>
		test=0;
     468:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <test>
	}
	if(cnt==Number_OVF){		//if counter reach number of overflows
     46c:	40 90 62 00 	lds	r4, 0x0062	; 0x800062 <__data_end>
     470:	50 90 63 00 	lds	r5, 0x0063	; 0x800063 <__data_end+0x1>
     474:	60 90 64 00 	lds	r6, 0x0064	; 0x800064 <__data_end+0x2>
     478:	70 90 65 00 	lds	r7, 0x0065	; 0x800065 <__data_end+0x3>
     47c:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <Number_OVF>
     480:	70 91 8f 00 	lds	r23, 0x008F	; 0x80008f <Number_OVF+0x1>
     484:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <Number_OVF+0x2>
     488:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <Number_OVF+0x3>
     48c:	46 16       	cp	r4, r22
     48e:	57 06       	cpc	r5, r23
     490:	68 06       	cpc	r6, r24
     492:	79 06       	cpc	r7, r25
     494:	69 f4       	brne	.+26     	; 0x4b0 <__vector_11+0x9c>
		Timer0_Stop();			//stop the timer
     496:	0e 94 9b 07 	call	0xf36	; 0xf36 <Timer0_Stop>
		first_push_flag=0;
     49a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <first_push_flag>
		cnt=0;					//make  counter =0
     49e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
     4a2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
     4a6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
     4aa:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>
     4ae:	23 c0       	rjmp	.+70     	; 0x4f6 <__vector_11+0xe2>
	}
	else if(cnt%(Number_OVF/5)==0){
     4b0:	2d ec       	ldi	r18, 0xCD	; 205
     4b2:	3c ec       	ldi	r19, 0xCC	; 204
     4b4:	4c ec       	ldi	r20, 0xCC	; 204
     4b6:	5c ec       	ldi	r21, 0xCC	; 204
     4b8:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__umulsidi3>
     4bc:	00 e2       	ldi	r16, 0x20	; 32
     4be:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__lshrdi3>
     4c2:	82 2e       	mov	r8, r18
     4c4:	93 2e       	mov	r9, r19
     4c6:	a4 2e       	mov	r10, r20
     4c8:	b5 2e       	mov	r11, r21
     4ca:	a5 01       	movw	r20, r10
     4cc:	94 01       	movw	r18, r8
     4ce:	56 95       	lsr	r21
     4d0:	47 95       	ror	r20
     4d2:	37 95       	ror	r19
     4d4:	27 95       	ror	r18
     4d6:	56 95       	lsr	r21
     4d8:	47 95       	ror	r20
     4da:	37 95       	ror	r19
     4dc:	27 95       	ror	r18
     4de:	c3 01       	movw	r24, r6
     4e0:	b2 01       	movw	r22, r4
     4e2:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__udivmodsi4>
     4e6:	67 2b       	or	r22, r23
     4e8:	68 2b       	or	r22, r24
     4ea:	69 2b       	or	r22, r25
     4ec:	21 f4       	brne	.+8      	; 0x4f6 <__vector_11+0xe2>
		//LCD_Write_Number(degree);
		SEVSEG_Display(degree);
     4ee:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <degree>
     4f2:	0e 94 89 03 	call	0x712	; 0x712 <SEVSEG_Display>
	}
	cnt++;
     4f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     4fa:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
     4fe:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <__data_end+0x2>
     502:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <__data_end+0x3>
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	a1 1d       	adc	r26, r1
     50a:	b1 1d       	adc	r27, r1
     50c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
     510:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
     514:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <__data_end+0x2>
     518:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <__data_end+0x3>
}
     51c:	ff 91       	pop	r31
     51e:	ef 91       	pop	r30
     520:	bf 91       	pop	r27
     522:	af 91       	pop	r26
     524:	9f 91       	pop	r25
     526:	8f 91       	pop	r24
     528:	7f 91       	pop	r23
     52a:	6f 91       	pop	r22
     52c:	5f 91       	pop	r21
     52e:	4f 91       	pop	r20
     530:	3f 91       	pop	r19
     532:	2f 91       	pop	r18
     534:	0f 91       	pop	r16
     536:	ff 90       	pop	r15
     538:	ef 90       	pop	r14
     53a:	df 90       	pop	r13
     53c:	cf 90       	pop	r12
     53e:	bf 90       	pop	r11
     540:	af 90       	pop	r10
     542:	9f 90       	pop	r9
     544:	8f 90       	pop	r8
     546:	7f 90       	pop	r7
     548:	6f 90       	pop	r6
     54a:	5f 90       	pop	r5
     54c:	4f 90       	pop	r4
     54e:	0f 90       	pop	r0
     550:	0f be       	out	0x3f, r0	; 63
     552:	0f 90       	pop	r0
     554:	1f 90       	pop	r1
     556:	18 95       	reti

00000558 <__vector_5>:


ISR(TIMER2_OVF_vect)
{
     558:	1f 92       	push	r1
     55a:	0f 92       	push	r0
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	0f 92       	push	r0
     560:	11 24       	eor	r1, r1
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	2f 93       	push	r18
     568:	3f 93       	push	r19
     56a:	4f 93       	push	r20
     56c:	5f 93       	push	r21
     56e:	6f 93       	push	r22
     570:	7f 93       	push	r23
     572:	8f 93       	push	r24
     574:	9f 93       	push	r25
     576:	af 93       	push	r26
     578:	bf 93       	push	r27
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ef 93       	push	r30
     580:	ff 93       	push	r31
	if(timer2_count < Timer2_OVF)
     582:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <Timer2_OVF>
     586:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <Timer2_OVF+0x1>
     58a:	09 2e       	mov	r0, r25
     58c:	00 0c       	add	r0, r0
     58e:	aa 0b       	sbc	r26, r26
     590:	bb 0b       	sbc	r27, r27
     592:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <timer2_count>
     596:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <timer2_count+0x1>
     59a:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <timer2_count+0x2>
     59e:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <timer2_count+0x3>
     5a2:	48 17       	cp	r20, r24
     5a4:	59 07       	cpc	r21, r25
     5a6:	6a 07       	cpc	r22, r26
     5a8:	7b 07       	cpc	r23, r27
     5aa:	68 f4       	brcc	.+26     	; 0x5c6 <__vector_5+0x6e>
	{
		timer2_count++;
     5ac:	4f 5f       	subi	r20, 0xFF	; 255
     5ae:	5f 4f       	sbci	r21, 0xFF	; 255
     5b0:	6f 4f       	sbci	r22, 0xFF	; 255
     5b2:	7f 4f       	sbci	r23, 0xFF	; 255
     5b4:	40 93 66 00 	sts	0x0066, r20	; 0x800066 <timer2_count>
     5b8:	50 93 67 00 	sts	0x0067, r21	; 0x800067 <timer2_count+0x1>
     5bc:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <timer2_count+0x2>
     5c0:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <timer2_count+0x3>
     5c4:	4f c0       	rjmp	.+158    	; 0x664 <__vector_5+0x10c>
		
	}
	else
	{
		// ADC read
		LED2_TGL();
     5c6:	0e 94 71 05 	call	0xae2	; 0xae2 <LED2_TGL>
		last_10_temp[temp_index] = (5 * ADC_Read() * 100) / 1024 ; // degree
     5ca:	c0 91 6a 00 	lds	r28, 0x006A	; 0x80006a <temp_index>
     5ce:	d0 e0       	ldi	r29, 0x00	; 0
     5d0:	0e 94 b4 05 	call	0xb68	; 0xb68 <ADC_Read>
     5d4:	04 ef       	ldi	r16, 0xF4	; 244
     5d6:	11 e0       	ldi	r17, 0x01	; 1
     5d8:	9c 01       	movw	r18, r24
     5da:	20 9f       	mul	r18, r16
     5dc:	c0 01       	movw	r24, r0
     5de:	21 9f       	mul	r18, r17
     5e0:	90 0d       	add	r25, r0
     5e2:	30 9f       	mul	r19, r16
     5e4:	90 0d       	add	r25, r0
     5e6:	11 24       	eor	r1, r1
     5e8:	89 2f       	mov	r24, r25
     5ea:	86 95       	lsr	r24
     5ec:	86 95       	lsr	r24
     5ee:	fe 01       	movw	r30, r28
     5f0:	ee 0f       	add	r30, r30
     5f2:	ff 1f       	adc	r31, r31
     5f4:	e5 59       	subi	r30, 0x95	; 149
     5f6:	ff 4f       	sbci	r31, 0xFF	; 255
     5f8:	80 83       	st	Z, r24
     5fa:	11 82       	std	Z+1, r1	; 0x01
		LCD_Clear();
     5fc:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_Clear>
		LCD_Write_Float_Number((5 * ADC_Read() * 100) / 1024);
     600:	0e 94 b4 05 	call	0xb68	; 0xb68 <ADC_Read>
     604:	9c 01       	movw	r18, r24
     606:	20 9f       	mul	r18, r16
     608:	c0 01       	movw	r24, r0
     60a:	21 9f       	mul	r18, r17
     60c:	90 0d       	add	r25, r0
     60e:	30 9f       	mul	r19, r16
     610:	90 0d       	add	r25, r0
     612:	11 24       	eor	r1, r1
     614:	bc 01       	movw	r22, r24
     616:	67 2f       	mov	r22, r23
     618:	77 27       	eor	r23, r23
     61a:	66 95       	lsr	r22
     61c:	66 95       	lsr	r22
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__floatunsisf>
     626:	0e 94 29 05 	call	0xa52	; 0xa52 <LCD_Write_Float_Number>
		temp_index++;
     62a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <temp_index>
     62e:	8f 5f       	subi	r24, 0xFF	; 255
     630:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <temp_index>
		
		if(temp_index > 9)
     634:	8a 30       	cpi	r24, 0x0A	; 10
     636:	10 f0       	brcs	.+4      	; 0x63c <__vector_5+0xe4>
		{
			temp_index = 0;
     638:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <temp_index>
		}
		timer2_count = 0;
     63c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timer2_count>
     640:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <timer2_count+0x1>
     644:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <timer2_count+0x2>
     648:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <timer2_count+0x3>
		current_temp=calcualate_avg_temp(last_10_temp);
     64c:	8b e6       	ldi	r24, 0x6B	; 107
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	0e 94 ed 01 	call	0x3da	; 0x3da <calcualate_avg_temp>
     654:	60 93 7f 00 	sts	0x007F, r22	; 0x80007f <current_temp>
     658:	70 93 80 00 	sts	0x0080, r23	; 0x800080 <current_temp+0x1>
     65c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <current_temp+0x2>
     660:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <current_temp+0x3>
	}
     664:	ff 91       	pop	r31
     666:	ef 91       	pop	r30
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	bf 91       	pop	r27
     66e:	af 91       	pop	r26
     670:	9f 91       	pop	r25
     672:	8f 91       	pop	r24
     674:	7f 91       	pop	r23
     676:	6f 91       	pop	r22
     678:	5f 91       	pop	r21
     67a:	4f 91       	pop	r20
     67c:	3f 91       	pop	r19
     67e:	2f 91       	pop	r18
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	0f 90       	pop	r0
     686:	0f be       	out	0x3f, r0	; 63
     688:	0f 90       	pop	r0
     68a:	1f 90       	pop	r1
     68c:	18 95       	reti

0000068e <SEVSEG_Initialization>:
{
	DIO_SetPinValue(SEVSEG_CTRL_PORT, SEVSEG_PIN_EN2, SEVSEG_LOW);
}
void SEVSEG_Dot_Enable(void)//Enable dot
{
	DIO_SetPinValue(SEVSEG_CTRL_PORT, SEVSEG_PIN_DOT, SEVSEG_HIGH);
     68e:	41 e0       	ldi	r20, 0x01	; 1
     690:	61 e0       	ldi	r22, 0x01	; 1
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	0e 94 bc 05 	call	0xb78	; 0xb78 <DIO_SetPinDirection>
     698:	41 e0       	ldi	r20, 0x01	; 1
     69a:	62 e0       	ldi	r22, 0x02	; 2
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	0e 94 bc 05 	call	0xb78	; 0xb78 <DIO_SetPinDirection>
     6a2:	41 e0       	ldi	r20, 0x01	; 1
     6a4:	64 e0       	ldi	r22, 0x04	; 4
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 bc 05 	call	0xb78	; 0xb78 <DIO_SetPinDirection>
     6ac:	41 e0       	ldi	r20, 0x01	; 1
     6ae:	65 e0       	ldi	r22, 0x05	; 5
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	0e 94 bc 05 	call	0xb78	; 0xb78 <DIO_SetPinDirection>
     6b6:	41 e0       	ldi	r20, 0x01	; 1
     6b8:	66 e0       	ldi	r22, 0x06	; 6
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	0e 94 bc 05 	call	0xb78	; 0xb78 <DIO_SetPinDirection>
     6c0:	41 e0       	ldi	r20, 0x01	; 1
     6c2:	67 e0       	ldi	r22, 0x07	; 7
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	0e 94 bc 05 	call	0xb78	; 0xb78 <DIO_SetPinDirection>
     6ca:	41 e0       	ldi	r20, 0x01	; 1
     6cc:	63 e0       	ldi	r22, 0x03	; 3
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	0e 94 bc 05 	call	0xb78	; 0xb78 <DIO_SetPinDirection>
     6d4:	08 95       	ret

000006d6 <SEVSEG_Enable1>:
     6d6:	41 e0       	ldi	r20, 0x01	; 1
     6d8:	61 e0       	ldi	r22, 0x01	; 1
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     6e0:	08 95       	ret

000006e2 <SEVSEG_Disable1>:
     6e2:	40 e0       	ldi	r20, 0x00	; 0
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     6ec:	08 95       	ret

000006ee <SEVSEG_Enable2>:
     6ee:	41 e0       	ldi	r20, 0x01	; 1
     6f0:	62 e0       	ldi	r22, 0x02	; 2
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     6f8:	08 95       	ret

000006fa <SEVSEG_Disable2>:
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	62 e0       	ldi	r22, 0x02	; 2
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     704:	08 95       	ret

00000706 <SEVSEG_Dot_Disable>:
}
void SEVSEG_Dot_Disable(void)//Disable dot
{
	DIO_SetPinValue(SEVSEG_CTRL_PORT, SEVSEG_PIN_DOT, SEVSEG_LOW);
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	63 e0       	ldi	r22, 0x03	; 3
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     710:	08 95       	ret

00000712 <SEVSEG_Display>:
}
void SEVSEG_Display(uint8_t number)
{
     712:	cf 93       	push	r28
	uint8_t num1 = number%10;
     714:	9d ec       	ldi	r25, 0xCD	; 205
     716:	89 9f       	mul	r24, r25
     718:	91 2d       	mov	r25, r1
     71a:	11 24       	eor	r1, r1
     71c:	29 2f       	mov	r18, r25
     71e:	26 95       	lsr	r18
     720:	26 95       	lsr	r18
     722:	26 95       	lsr	r18
     724:	22 0f       	add	r18, r18
     726:	32 2f       	mov	r19, r18
     728:	33 0f       	add	r19, r19
     72a:	33 0f       	add	r19, r19
     72c:	23 0f       	add	r18, r19
     72e:	82 1b       	sub	r24, r18
     730:	28 2f       	mov	r18, r24
	uint8_t num2 = number/10;
     732:	c9 2f       	mov	r28, r25
     734:	c6 95       	lsr	r28
     736:	c6 95       	lsr	r28
     738:	c6 95       	lsr	r28
	PORTA = (num1 << 4);
     73a:	22 95       	swap	r18
     73c:	20 7f       	andi	r18, 0xF0	; 240
     73e:	2b bb       	out	0x1b, r18	; 27
	SEVSEG_Enable1();
     740:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <SEVSEG_Enable1>
	SEVSEG_Disable2();
     744:	0e 94 7d 03 	call	0x6fa	; 0x6fa <SEVSEG_Disable2>
     748:	8f e3       	ldi	r24, 0x3F	; 63
     74a:	9c e9       	ldi	r25, 0x9C	; 156
     74c:	01 97       	sbiw	r24, 0x01	; 1
     74e:	f1 f7       	brne	.-4      	; 0x74c <SEVSEG_Display+0x3a>
     750:	00 c0       	rjmp	.+0      	; 0x752 <SEVSEG_Display+0x40>
     752:	00 00       	nop
	_delay_ms(10);
	PORTA = (num2 << 4);
     754:	9c 2f       	mov	r25, r28
     756:	92 95       	swap	r25
     758:	90 7f       	andi	r25, 0xF0	; 240
     75a:	9b bb       	out	0x1b, r25	; 27
	SEVSEG_Disable1();
     75c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <SEVSEG_Disable1>
	SEVSEG_Enable2();
     760:	0e 94 77 03 	call	0x6ee	; 0x6ee <SEVSEG_Enable2>
     764:	8f e3       	ldi	r24, 0x3F	; 63
     766:	9c e9       	ldi	r25, 0x9C	; 156
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <SEVSEG_Display+0x56>
     76c:	00 c0       	rjmp	.+0      	; 0x76e <SEVSEG_Display+0x5c>
     76e:	00 00       	nop
	_delay_ms(10);
     770:	cf 91       	pop	r28
     772:	08 95       	ret

00000774 <BTN0_Initialization>:
#include "PushBTN0.h"


void BTN0_Initialization(void)
{
	DIO_SetPinDirection(BTN0_PORT, BTN0_PIN, BTN0_INP);
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	0e 94 bc 05 	call	0xb78	; 0xb78 <DIO_SetPinDirection>
     77e:	08 95       	ret

00000780 <BTN0_Read>:

uint8_t BTN0_Read(void)
{
	uint8_t Btn = NPRESSED;
	uint8_t val = 0;
	val = DIO_ReadPinValue(BTN0_PORT, BTN0_PIN);
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	0e 94 9e 06 	call	0xd3c	; 0xd3c <DIO_ReadPinValue>
     788:	ef e3       	ldi	r30, 0x3F	; 63
     78a:	fc e9       	ldi	r31, 0x9C	; 156
     78c:	31 97       	sbiw	r30, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <BTN0_Read+0xc>
     790:	00 c0       	rjmp	.+0      	; 0x792 <BTN0_Read+0x12>
     792:	00 00       	nop
	{
		Btn = DIO_ReadPinValue(BTN0_PORT, BTN0_PIN);
	}
	_delay_ms(10);
	return val;
}
     794:	08 95       	ret

00000796 <BTN1_Initialization>:
#include "PushBTN1.h"


void BTN1_Initialization(void)
{
	DIO_SetPinDirection(BTN1_PORT, BTN1_PIN, BTN1_INP);
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	66 e0       	ldi	r22, 0x06	; 6
     79a:	83 e0       	ldi	r24, 0x03	; 3
     79c:	0e 94 bc 05 	call	0xb78	; 0xb78 <DIO_SetPinDirection>
     7a0:	08 95       	ret

000007a2 <BTN1_Read>:

uint8_t BTN1_Read(void)
{
	uint8_t Btn = NPRESSED;
	uint8_t val = 0;
	val = DIO_ReadPinValue(BTN1_PORT, BTN1_PIN);
     7a2:	66 e0       	ldi	r22, 0x06	; 6
     7a4:	83 e0       	ldi	r24, 0x03	; 3
     7a6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <DIO_ReadPinValue>
     7aa:	ef e3       	ldi	r30, 0x3F	; 63
     7ac:	fc e9       	ldi	r31, 0x9C	; 156
     7ae:	31 97       	sbiw	r30, 0x01	; 1
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <BTN1_Read+0xc>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <BTN1_Read+0x12>
     7b4:	00 00       	nop
	{
		Btn = DIO_ReadPinValue(BTN1_PORT, BTN1_PIN);
	}
	_delay_ms(10);
	return val;
}
     7b6:	08 95       	ret

000007b8 <reverse>:
void LCD_Write_Number(uint32_t number)
{
	uint8_t num[10];
	ltoa(number, (uint8_t*)num, 10);//Long To ASCII
	LCD_Write_String(num);
}
     7b8:	61 50       	subi	r22, 0x01	; 1
     7ba:	71 09       	sbc	r23, r1
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <reverse+0x26>
     7c2:	dc 01       	movw	r26, r24
     7c4:	a2 0f       	add	r26, r18
     7c6:	b3 1f       	adc	r27, r19
     7c8:	4c 91       	ld	r20, X
     7ca:	fc 01       	movw	r30, r24
     7cc:	e6 0f       	add	r30, r22
     7ce:	f7 1f       	adc	r31, r23
     7d0:	50 81       	ld	r21, Z
     7d2:	5c 93       	st	X, r21
     7d4:	40 83       	st	Z, r20
     7d6:	2f 5f       	subi	r18, 0xFF	; 255
     7d8:	3f 4f       	sbci	r19, 0xFF	; 255
     7da:	61 50       	subi	r22, 0x01	; 1
     7dc:	71 09       	sbc	r23, r1
     7de:	26 17       	cp	r18, r22
     7e0:	37 07       	cpc	r19, r23
     7e2:	7c f3       	brlt	.-34     	; 0x7c2 <reverse+0xa>
     7e4:	08 95       	ret

000007e6 <intToStr>:
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	8b 01       	movw	r16, r22
     7f0:	9a 01       	movw	r18, r20
     7f2:	c0 e0       	ldi	r28, 0x00	; 0
     7f4:	d0 e0       	ldi	r29, 0x00	; 0
     7f6:	0c c0       	rjmp	.+24     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7f8:	f8 01       	movw	r30, r16
     7fa:	ec 0f       	add	r30, r28
     7fc:	fd 1f       	adc	r31, r29
     7fe:	6a e0       	ldi	r22, 0x0A	; 10
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__divmodhi4>
     806:	80 5d       	subi	r24, 0xD0	; 208
     808:	80 83       	st	Z, r24
     80a:	86 2f       	mov	r24, r22
     80c:	97 2f       	mov	r25, r23
     80e:	21 96       	adiw	r28, 0x01	; 1
     810:	00 97       	sbiw	r24, 0x00	; 0
     812:	91 f7       	brne	.-28     	; 0x7f8 <intToStr+0x12>
     814:	06 c0       	rjmp	.+12     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     816:	f8 01       	movw	r30, r16
     818:	ec 0f       	add	r30, r28
     81a:	fd 1f       	adc	r31, r29
     81c:	80 e3       	ldi	r24, 0x30	; 48
     81e:	80 83       	st	Z, r24
     820:	21 96       	adiw	r28, 0x01	; 1
     822:	c2 17       	cp	r28, r18
     824:	d3 07       	cpc	r29, r19
     826:	bc f3       	brlt	.-18     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     828:	be 01       	movw	r22, r28
     82a:	c8 01       	movw	r24, r16
     82c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <reverse>
     830:	f8 01       	movw	r30, r16
     832:	ec 0f       	add	r30, r28
     834:	fd 1f       	adc	r31, r29
     836:	10 82       	st	Z, r1
     838:	ce 01       	movw	r24, r28
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	08 95       	ret

00000844 <ftoa>:
     844:	4f 92       	push	r4
     846:	5f 92       	push	r5
     848:	6f 92       	push	r6
     84a:	7f 92       	push	r7
     84c:	8f 92       	push	r8
     84e:	9f 92       	push	r9
     850:	af 92       	push	r10
     852:	bf 92       	push	r11
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	2b 01       	movw	r4, r22
     862:	3c 01       	movw	r6, r24
     864:	7a 01       	movw	r14, r20
     866:	89 01       	movw	r16, r18
     868:	0e 94 49 0a 	call	0x1492	; 0x1492 <__fixsfsi>
     86c:	4b 01       	movw	r8, r22
     86e:	5c 01       	movw	r10, r24
     870:	07 2e       	mov	r0, r23
     872:	00 0c       	add	r0, r0
     874:	88 0b       	sbc	r24, r24
     876:	99 0b       	sbc	r25, r25
     878:	0e 94 81 0a 	call	0x1502	; 0x1502 <__floatsisf>
     87c:	9b 01       	movw	r18, r22
     87e:	ac 01       	movw	r20, r24
     880:	c3 01       	movw	r24, r6
     882:	b2 01       	movw	r22, r4
     884:	0e 94 65 09 	call	0x12ca	; 0x12ca <__subsf3>
     888:	2b 01       	movw	r4, r22
     88a:	3c 01       	movw	r6, r24
     88c:	40 e0       	ldi	r20, 0x00	; 0
     88e:	50 e0       	ldi	r21, 0x00	; 0
     890:	b7 01       	movw	r22, r14
     892:	c4 01       	movw	r24, r8
     894:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <intToStr>
     898:	ec 01       	movw	r28, r24
     89a:	01 15       	cp	r16, r1
     89c:	11 05       	cpc	r17, r1
     89e:	29 f1       	breq	.+74     	; 0x8ea <__stack+0x8b>
     8a0:	f7 01       	movw	r30, r14
     8a2:	e8 0f       	add	r30, r24
     8a4:	f9 1f       	adc	r31, r25
     8a6:	8e e2       	ldi	r24, 0x2E	; 46
     8a8:	80 83       	st	Z, r24
     8aa:	b8 01       	movw	r22, r16
     8ac:	01 2e       	mov	r0, r17
     8ae:	00 0c       	add	r0, r0
     8b0:	88 0b       	sbc	r24, r24
     8b2:	99 0b       	sbc	r25, r25
     8b4:	0e 94 81 0a 	call	0x1502	; 0x1502 <__floatsisf>
     8b8:	9b 01       	movw	r18, r22
     8ba:	ac 01       	movw	r20, r24
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	80 e2       	ldi	r24, 0x20	; 32
     8c2:	91 e4       	ldi	r25, 0x41	; 65
     8c4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <pow>
     8c8:	9b 01       	movw	r18, r22
     8ca:	ac 01       	movw	r20, r24
     8cc:	c3 01       	movw	r24, r6
     8ce:	b2 01       	movw	r22, r4
     8d0:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     8d4:	21 96       	adiw	r28, 0x01	; 1
     8d6:	ce 0d       	add	r28, r14
     8d8:	df 1d       	adc	r29, r15
     8da:	0e 94 49 0a 	call	0x1492	; 0x1492 <__fixsfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	a8 01       	movw	r20, r16
     8e4:	be 01       	movw	r22, r28
     8e6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <intToStr>
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	ff 90       	pop	r15
     8f4:	ef 90       	pop	r14
     8f6:	bf 90       	pop	r11
     8f8:	af 90       	pop	r10
     8fa:	9f 90       	pop	r9
     8fc:	8f 90       	pop	r8
     8fe:	7f 90       	pop	r7
     900:	6f 90       	pop	r6
     902:	5f 90       	pop	r5
     904:	4f 90       	pop	r4
     906:	08 95       	ret

00000908 <LCD_Write_Command>:
     908:	cf 93       	push	r28
     90a:	c8 2f       	mov	r28, r24
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	62 e0       	ldi	r22, 0x02	; 2
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     920:	40 e0       	ldi	r20, 0x00	; 0
     922:	63 e0       	ldi	r22, 0x03	; 3
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     92a:	8b b3       	in	r24, 0x1b	; 27
     92c:	9c 2f       	mov	r25, r28
     92e:	90 7f       	andi	r25, 0xF0	; 240
     930:	8f 70       	andi	r24, 0x0F	; 15
     932:	89 2b       	or	r24, r25
     934:	8b bb       	out	0x1b, r24	; 27
     936:	41 e0       	ldi	r20, 0x01	; 1
     938:	63 e0       	ldi	r22, 0x03	; 3
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     940:	8f e9       	ldi	r24, 0x9F	; 159
     942:	9f e0       	ldi	r25, 0x0F	; 15
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	f1 f7       	brne	.-4      	; 0x944 <LCD_Write_Command+0x3c>
     948:	00 c0       	rjmp	.+0      	; 0x94a <LCD_Write_Command+0x42>
     94a:	00 00       	nop
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	63 e0       	ldi	r22, 0x03	; 3
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     956:	20 e1       	ldi	r18, 0x10	; 16
     958:	c2 9f       	mul	r28, r18
     95a:	c0 01       	movw	r24, r0
     95c:	11 24       	eor	r1, r1
     95e:	9b b3       	in	r25, 0x1b	; 27
     960:	9f 70       	andi	r25, 0x0F	; 15
     962:	89 2b       	or	r24, r25
     964:	8b bb       	out	0x1b, r24	; 27
     966:	41 e0       	ldi	r20, 0x01	; 1
     968:	63 e0       	ldi	r22, 0x03	; 3
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     970:	8f e9       	ldi	r24, 0x9F	; 159
     972:	9f e0       	ldi	r25, 0x0F	; 15
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <LCD_Write_Command+0x6c>
     978:	00 c0       	rjmp	.+0      	; 0x97a <LCD_Write_Command+0x72>
     97a:	00 00       	nop
     97c:	40 e0       	ldi	r20, 0x00	; 0
     97e:	63 e0       	ldi	r22, 0x03	; 3
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     986:	8f e1       	ldi	r24, 0x1F	; 31
     988:	9e e4       	ldi	r25, 0x4E	; 78
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <LCD_Write_Command+0x82>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <LCD_Write_Command+0x88>
     990:	00 00       	nop
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <LCD_Clear>:
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	0e 94 84 04 	call	0x908	; 0x908 <LCD_Write_Command>
     99c:	08 95       	ret

0000099e <LCD_Write_Character>:
     99e:	cf 93       	push	r28
     9a0:	c8 2f       	mov	r28, r24
     9a2:	41 e0       	ldi	r20, 0x01	; 1
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	62 e0       	ldi	r22, 0x02	; 2
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	63 e0       	ldi	r22, 0x03	; 3
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     9c0:	8b b3       	in	r24, 0x1b	; 27
     9c2:	9c 2f       	mov	r25, r28
     9c4:	90 7f       	andi	r25, 0xF0	; 240
     9c6:	8f 70       	andi	r24, 0x0F	; 15
     9c8:	89 2b       	or	r24, r25
     9ca:	8b bb       	out	0x1b, r24	; 27
     9cc:	41 e0       	ldi	r20, 0x01	; 1
     9ce:	63 e0       	ldi	r22, 0x03	; 3
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     9d6:	8f e9       	ldi	r24, 0x9F	; 159
     9d8:	9f e0       	ldi	r25, 0x0F	; 15
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	f1 f7       	brne	.-4      	; 0x9da <LCD_Write_Character+0x3c>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <LCD_Write_Character+0x42>
     9e0:	00 00       	nop
     9e2:	40 e0       	ldi	r20, 0x00	; 0
     9e4:	63 e0       	ldi	r22, 0x03	; 3
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     9ec:	20 e1       	ldi	r18, 0x10	; 16
     9ee:	c2 9f       	mul	r28, r18
     9f0:	c0 01       	movw	r24, r0
     9f2:	11 24       	eor	r1, r1
     9f4:	9b b3       	in	r25, 0x1b	; 27
     9f6:	9f 70       	andi	r25, 0x0F	; 15
     9f8:	89 2b       	or	r24, r25
     9fa:	8b bb       	out	0x1b, r24	; 27
     9fc:	41 e0       	ldi	r20, 0x01	; 1
     9fe:	63 e0       	ldi	r22, 0x03	; 3
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     a06:	8f e9       	ldi	r24, 0x9F	; 159
     a08:	9f e0       	ldi	r25, 0x0F	; 15
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	f1 f7       	brne	.-4      	; 0xa0a <LCD_Write_Character+0x6c>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <LCD_Write_Character+0x72>
     a10:	00 00       	nop
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	63 e0       	ldi	r22, 0x03	; 3
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     a1c:	8f e1       	ldi	r24, 0x1F	; 31
     a1e:	9e e4       	ldi	r25, 0x4E	; 78
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	f1 f7       	brne	.-4      	; 0xa20 <LCD_Write_Character+0x82>
     a24:	00 c0       	rjmp	.+0      	; 0xa26 <LCD_Write_Character+0x88>
     a26:	00 00       	nop
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <LCD_Write_String>:
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	ec 01       	movw	r28, r24
     a32:	09 c0       	rjmp	.+18     	; 0xa46 <LCD_Write_String+0x1a>
     a34:	0e 94 cf 04 	call	0x99e	; 0x99e <LCD_Write_Character>
     a38:	8f e3       	ldi	r24, 0x3F	; 63
     a3a:	9c e9       	ldi	r25, 0x9C	; 156
     a3c:	01 97       	sbiw	r24, 0x01	; 1
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <LCD_Write_String+0x10>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <LCD_Write_String+0x16>
     a42:	00 00       	nop
     a44:	21 96       	adiw	r28, 0x01	; 1
     a46:	88 81       	ld	r24, Y
     a48:	81 11       	cpse	r24, r1
     a4a:	f4 cf       	rjmp	.-24     	; 0xa34 <LCD_Write_String+0x8>
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <LCD_Write_Float_Number>:
void LCD_Write_Float_Number(fint32_t Fnumber)
{
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	2a 97       	sbiw	r28, 0x0a	; 10
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	cd bf       	out	0x3d, r28	; 61
	char num[10];
	ftoa(Fnumber, num, 3);//Float to ASCII
     a66:	23 e0       	ldi	r18, 0x03	; 3
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	ae 01       	movw	r20, r28
     a6c:	4f 5f       	subi	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	0e 94 22 04 	call	0x844	; 0x844 <ftoa>
	LCD_Write_String((uint8_t*)num);
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_Write_String>
}
     a7c:	2a 96       	adiw	r28, 0x0a	; 10
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <LED0_Initialization>:
#include "LED0.h"

void LED0_Initialization(void)
{
	//SET_BIT(LED0_DDR, LED0);
	DIO_SetPinDirection(LED0_PORT, LED0, LED0_OUT);
     a8e:	41 e0       	ldi	r20, 0x01	; 1
     a90:	62 e0       	ldi	r22, 0x02	; 2
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	0e 94 bc 05 	call	0xb78	; 0xb78 <DIO_SetPinDirection>
     a98:	08 95       	ret

00000a9a <LED0_ON>:
}
void LED0_ON(void)
{
	//SET_BIT(LED0_PORT, LED0);
	DIO_SetPinValue(LED0_PORT, LED0, LED0_ONN);
     a9a:	41 e0       	ldi	r20, 0x01	; 1
     a9c:	62 e0       	ldi	r22, 0x02	; 2
     a9e:	82 e0       	ldi	r24, 0x02	; 2
     aa0:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     aa4:	08 95       	ret

00000aa6 <LED0_OFF>:
}
void LED0_OFF(void)
{
	//CLR_BIT(LED0_PORT, LED0);
	DIO_SetPinValue(LED0_PORT, LED0, LED0_OFFF);
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	62 e0       	ldi	r22, 0x02	; 2
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     ab0:	08 95       	ret

00000ab2 <LED1_Initialization>:
 */ 
#include "LED1.h"

void LED1_Initialization(void)
{
	SET_BIT(LED1_DDR, LED1);
     ab2:	84 b3       	in	r24, 0x14	; 20
     ab4:	80 68       	ori	r24, 0x80	; 128
     ab6:	84 bb       	out	0x14, r24	; 20
     ab8:	08 95       	ret

00000aba <LED1_ON>:
}
void LED1_ON(void)
{
	SET_BIT(LED1_PORT, LED1);
     aba:	85 b3       	in	r24, 0x15	; 21
     abc:	80 68       	ori	r24, 0x80	; 128
     abe:	85 bb       	out	0x15, r24	; 21
     ac0:	08 95       	ret

00000ac2 <LED1_OFF>:
}
void LED1_OFF(void)
{
	CLR_BIT(LED1_PORT, LED1);
     ac2:	85 b3       	in	r24, 0x15	; 21
     ac4:	8f 77       	andi	r24, 0x7F	; 127
     ac6:	85 bb       	out	0x15, r24	; 21
     ac8:	08 95       	ret

00000aca <LED2_Initialization>:
 */ 
#include "LED2.h"

void LED2_Initialization(void)
{
	SET_BIT(LED2_DDR, LED2);
     aca:	81 b3       	in	r24, 0x11	; 17
     acc:	88 60       	ori	r24, 0x08	; 8
     ace:	81 bb       	out	0x11, r24	; 17
     ad0:	08 95       	ret

00000ad2 <LED2_ON>:
}
void LED2_ON(void)
{
	SET_BIT(LED2_PORT, LED2);
     ad2:	82 b3       	in	r24, 0x12	; 18
     ad4:	88 60       	ori	r24, 0x08	; 8
     ad6:	82 bb       	out	0x12, r24	; 18
     ad8:	08 95       	ret

00000ada <LED2_OFF>:
}
void LED2_OFF(void)
{
	CLR_BIT(LED2_PORT, LED2);
     ada:	82 b3       	in	r24, 0x12	; 18
     adc:	87 7f       	andi	r24, 0xF7	; 247
     ade:	82 bb       	out	0x12, r24	; 18
     ae0:	08 95       	ret

00000ae2 <LED2_TGL>:
}
void LED2_TGL(void)
{
	TGL_BIT(LED2_PORT, LED2);
     ae2:	92 b3       	in	r25, 0x12	; 18
     ae4:	88 e0       	ldi	r24, 0x08	; 8
     ae6:	89 27       	eor	r24, r25
     ae8:	82 bb       	out	0x12, r24	; 18
     aea:	08 95       	ret

00000aec <Relay_Initialization>:
#include "Relay.h"


void Relay_Initialization(void)
{
	DIO_SetPinDirection(RELAY_PORT, RELAY_PIN, RELAY_OUT);
     aec:	41 e0       	ldi	r20, 0x01	; 1
     aee:	62 e0       	ldi	r22, 0x02	; 2
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	0e 94 bc 05 	call	0xb78	; 0xb78 <DIO_SetPinDirection>
     af6:	08 95       	ret

00000af8 <Relay_ON>:
}
void Relay_ON(void)
{
	DIO_SetPinValue(RELAY_PORT, RELAY_PIN, RELAY_HIGH);
     af8:	41 e0       	ldi	r20, 0x01	; 1
     afa:	62 e0       	ldi	r22, 0x02	; 2
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     b02:	08 95       	ret

00000b04 <Relay_OFF>:
}
void Relay_OFF(void)
{
	DIO_SetPinValue(RELAY_PORT, RELAY_PIN, RELAY_LOW);
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	62 e0       	ldi	r22, 0x02	; 2
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DIO_SetPinValue>
     b0e:	08 95       	ret

00000b10 <ADC_Initialization>:
	/*
	1- Select voltage refernce
	2- Select left or right adjust
	3- Select chanel (1)
	*/
	switch(chanel)
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	88 30       	cpi	r24, 0x08	; 8
     b14:	91 05       	cpc	r25, r1
     b16:	20 f5       	brcc	.+72     	; 0xb60 <ADC_Initialization+0x50>
     b18:	fc 01       	movw	r30, r24
     b1a:	e6 5d       	subi	r30, 0xD6	; 214
     b1c:	ff 4f       	sbci	r31, 0xFF	; 255
     b1e:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__tablejump2__>
	{
		case ADC0:
		ADMUX |= 0b01000000;//0x40
     b22:	87 b1       	in	r24, 0x07	; 7
     b24:	80 64       	ori	r24, 0x40	; 64
     b26:	87 b9       	out	0x07, r24	; 7
		break;
     b28:	1b c0       	rjmp	.+54     	; 0xb60 <ADC_Initialization+0x50>
		case ADC1:
		ADMUX |= 0b01000001;//0x41
     b2a:	87 b1       	in	r24, 0x07	; 7
     b2c:	81 64       	ori	r24, 0x41	; 65
     b2e:	87 b9       	out	0x07, r24	; 7
		break;
     b30:	17 c0       	rjmp	.+46     	; 0xb60 <ADC_Initialization+0x50>
		case ADC2:
		ADMUX |= 0b01000010;//0x42
     b32:	87 b1       	in	r24, 0x07	; 7
     b34:	82 64       	ori	r24, 0x42	; 66
     b36:	87 b9       	out	0x07, r24	; 7
		break;
     b38:	13 c0       	rjmp	.+38     	; 0xb60 <ADC_Initialization+0x50>
		case ADC3:
		ADMUX |= 0b01000011;//0x43
     b3a:	87 b1       	in	r24, 0x07	; 7
     b3c:	83 64       	ori	r24, 0x43	; 67
     b3e:	87 b9       	out	0x07, r24	; 7
		break;
     b40:	0f c0       	rjmp	.+30     	; 0xb60 <ADC_Initialization+0x50>
		case ADC4:
		ADMUX |= 0b01000100;//0x44
     b42:	87 b1       	in	r24, 0x07	; 7
     b44:	84 64       	ori	r24, 0x44	; 68
     b46:	87 b9       	out	0x07, r24	; 7
		break;
     b48:	0b c0       	rjmp	.+22     	; 0xb60 <ADC_Initialization+0x50>
		case ADC5:
		ADMUX |= 0b01000101;//0x45
     b4a:	87 b1       	in	r24, 0x07	; 7
     b4c:	85 64       	ori	r24, 0x45	; 69
     b4e:	87 b9       	out	0x07, r24	; 7
		break;
     b50:	07 c0       	rjmp	.+14     	; 0xb60 <ADC_Initialization+0x50>
		case ADC6:
		ADMUX |= 0b01000110;//0x46
     b52:	87 b1       	in	r24, 0x07	; 7
     b54:	86 64       	ori	r24, 0x46	; 70
     b56:	87 b9       	out	0x07, r24	; 7
		break;
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <ADC_Initialization+0x50>
		case ADC7:
		ADMUX |= 0b01000111;//0x47
     b5a:	87 b1       	in	r24, 0x07	; 7
     b5c:	87 64       	ori	r24, 0x47	; 71
     b5e:	87 b9       	out	0x07, r24	; 7
	/*
	1- Auto trigger mode
	2- Select prescaler
	3- enable ADC
	*/
	ADCSRA |= 0b10100111;//0xA7
     b60:	86 b1       	in	r24, 0x06	; 6
     b62:	87 6a       	ori	r24, 0xA7	; 167
     b64:	86 b9       	out	0x06, r24	; 6
     b66:	08 95       	ret

00000b68 <ADC_Read>:
}

uint16_t ADC_Read(void)
{
	uint16_t data = 0;
	SET_BIT(ADCSRA, ADSC);
     b68:	86 b1       	in	r24, 0x06	; 6
     b6a:	80 64       	ori	r24, 0x40	; 64
     b6c:	86 b9       	out	0x06, r24	; 6
	while(GET_BIT(ADCSRA, ADIF) != 1);//wait until conversion finished
     b6e:	34 9b       	sbis	0x06, 4	; 6
     b70:	fe cf       	rjmp	.-4      	; 0xb6e <ADC_Read+0x6>
	data = ADC_DATA;
     b72:	84 b1       	in	r24, 0x04	; 4
     b74:	95 b1       	in	r25, 0x05	; 5
	return data;
     b76:	08 95       	ret

00000b78 <DIO_SetPinDirection>:
		break;
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
		break;
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
     b78:	44 23       	and	r20, r20
     b7a:	19 f0       	breq	.+6      	; 0xb82 <DIO_SetPinDirection+0xa>
     b7c:	41 30       	cpi	r20, 0x01	; 1
     b7e:	c9 f1       	breq	.+114    	; 0xbf2 <DIO_SetPinDirection+0x7a>
     b80:	08 95       	ret
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	91 f0       	breq	.+36     	; 0xbaa <DIO_SetPinDirection+0x32>
     b86:	28 f0       	brcs	.+10     	; 0xb92 <DIO_SetPinDirection+0x1a>
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	d9 f0       	breq	.+54     	; 0xbc2 <DIO_SetPinDirection+0x4a>
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	29 f1       	breq	.+74     	; 0xbda <DIO_SetPinDirection+0x62>
     b90:	08 95       	ret
     b92:	2a b3       	in	r18, 0x1a	; 26
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <DIO_SetPinDirection+0x26>
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	6a 95       	dec	r22
     ba0:	e2 f7       	brpl	.-8      	; 0xb9a <DIO_SetPinDirection+0x22>
     ba2:	80 95       	com	r24
     ba4:	82 23       	and	r24, r18
     ba6:	8a bb       	out	0x1a, r24	; 26
     ba8:	08 95       	ret
     baa:	27 b3       	in	r18, 0x17	; 23
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <DIO_SetPinDirection+0x3e>
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	6a 95       	dec	r22
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <DIO_SetPinDirection+0x3a>
     bba:	80 95       	com	r24
     bbc:	82 23       	and	r24, r18
     bbe:	87 bb       	out	0x17, r24	; 23
     bc0:	08 95       	ret
     bc2:	24 b3       	in	r18, 0x14	; 20
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <DIO_SetPinDirection+0x56>
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	6a 95       	dec	r22
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <DIO_SetPinDirection+0x52>
     bd2:	80 95       	com	r24
     bd4:	82 23       	and	r24, r18
     bd6:	84 bb       	out	0x14, r24	; 20
     bd8:	08 95       	ret
     bda:	21 b3       	in	r18, 0x11	; 17
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <DIO_SetPinDirection+0x6e>
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	6a 95       	dec	r22
     be8:	e2 f7       	brpl	.-8      	; 0xbe2 <DIO_SetPinDirection+0x6a>
     bea:	80 95       	com	r24
     bec:	82 23       	and	r24, r18
     bee:	81 bb       	out	0x11, r24	; 17
     bf0:	08 95       	ret
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	89 f0       	breq	.+34     	; 0xc18 <DIO_SetPinDirection+0xa0>
     bf6:	28 f0       	brcs	.+10     	; 0xc02 <DIO_SetPinDirection+0x8a>
     bf8:	82 30       	cpi	r24, 0x02	; 2
     bfa:	c9 f0       	breq	.+50     	; 0xc2e <DIO_SetPinDirection+0xb6>
     bfc:	83 30       	cpi	r24, 0x03	; 3
     bfe:	11 f1       	breq	.+68     	; 0xc44 <DIO_SetPinDirection+0xcc>
     c00:	08 95       	ret
     c02:	2a b3       	in	r18, 0x1a	; 26
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <DIO_SetPinDirection+0x96>
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	6a 95       	dec	r22
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <DIO_SetPinDirection+0x92>
     c12:	82 2b       	or	r24, r18
     c14:	8a bb       	out	0x1a, r24	; 26
     c16:	08 95       	ret
     c18:	27 b3       	in	r18, 0x17	; 23
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <DIO_SetPinDirection+0xac>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	6a 95       	dec	r22
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <DIO_SetPinDirection+0xa8>
     c28:	82 2b       	or	r24, r18
     c2a:	87 bb       	out	0x17, r24	; 23
     c2c:	08 95       	ret
     c2e:	24 b3       	in	r18, 0x14	; 20
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <DIO_SetPinDirection+0xc2>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	6a 95       	dec	r22
     c3c:	e2 f7       	brpl	.-8      	; 0xc36 <DIO_SetPinDirection+0xbe>
     c3e:	82 2b       	or	r24, r18
     c40:	84 bb       	out	0x14, r24	; 20
     c42:	08 95       	ret
     c44:	21 b3       	in	r18, 0x11	; 17
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_SetPinDirection+0xd8>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	6a 95       	dec	r22
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_SetPinDirection+0xd4>
     c54:	82 2b       	or	r24, r18
     c56:	81 bb       	out	0x11, r24	; 17
     c58:	08 95       	ret

00000c5a <DIO_SetPinValue>:
     c5a:	44 23       	and	r20, r20
     c5c:	19 f0       	breq	.+6      	; 0xc64 <DIO_SetPinValue+0xa>
     c5e:	41 30       	cpi	r20, 0x01	; 1
     c60:	c9 f1       	breq	.+114    	; 0xcd4 <DIO_SetPinValue+0x7a>
     c62:	08 95       	ret
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	91 f0       	breq	.+36     	; 0xc8c <DIO_SetPinValue+0x32>
     c68:	28 f0       	brcs	.+10     	; 0xc74 <DIO_SetPinValue+0x1a>
     c6a:	82 30       	cpi	r24, 0x02	; 2
     c6c:	d9 f0       	breq	.+54     	; 0xca4 <DIO_SetPinValue+0x4a>
     c6e:	83 30       	cpi	r24, 0x03	; 3
     c70:	29 f1       	breq	.+74     	; 0xcbc <DIO_SetPinValue+0x62>
     c72:	08 95       	ret
     c74:	2b b3       	in	r18, 0x1b	; 27
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <DIO_SetPinValue+0x26>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	6a 95       	dec	r22
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <DIO_SetPinValue+0x22>
     c84:	80 95       	com	r24
     c86:	82 23       	and	r24, r18
     c88:	8b bb       	out	0x1b, r24	; 27
     c8a:	08 95       	ret
     c8c:	28 b3       	in	r18, 0x18	; 24
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <DIO_SetPinValue+0x3e>
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	6a 95       	dec	r22
     c9a:	e2 f7       	brpl	.-8      	; 0xc94 <DIO_SetPinValue+0x3a>
     c9c:	80 95       	com	r24
     c9e:	82 23       	and	r24, r18
     ca0:	88 bb       	out	0x18, r24	; 24
     ca2:	08 95       	ret
     ca4:	25 b3       	in	r18, 0x15	; 21
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <DIO_SetPinValue+0x56>
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	6a 95       	dec	r22
     cb2:	e2 f7       	brpl	.-8      	; 0xcac <DIO_SetPinValue+0x52>
     cb4:	80 95       	com	r24
     cb6:	82 23       	and	r24, r18
     cb8:	85 bb       	out	0x15, r24	; 21
     cba:	08 95       	ret
     cbc:	22 b3       	in	r18, 0x12	; 18
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <DIO_SetPinValue+0x6e>
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	6a 95       	dec	r22
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <DIO_SetPinValue+0x6a>
     ccc:	80 95       	com	r24
     cce:	82 23       	and	r24, r18
     cd0:	82 bb       	out	0x12, r24	; 18
     cd2:	08 95       	ret
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	89 f0       	breq	.+34     	; 0xcfa <DIO_SetPinValue+0xa0>
     cd8:	28 f0       	brcs	.+10     	; 0xce4 <DIO_SetPinValue+0x8a>
     cda:	82 30       	cpi	r24, 0x02	; 2
     cdc:	c9 f0       	breq	.+50     	; 0xd10 <DIO_SetPinValue+0xb6>
     cde:	83 30       	cpi	r24, 0x03	; 3
     ce0:	11 f1       	breq	.+68     	; 0xd26 <DIO_SetPinValue+0xcc>
     ce2:	08 95       	ret
     ce4:	2b b3       	in	r18, 0x1b	; 27
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <DIO_SetPinValue+0x96>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	6a 95       	dec	r22
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <DIO_SetPinValue+0x92>
     cf4:	82 2b       	or	r24, r18
     cf6:	8b bb       	out	0x1b, r24	; 27
     cf8:	08 95       	ret
     cfa:	28 b3       	in	r18, 0x18	; 24
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <DIO_SetPinValue+0xac>
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	6a 95       	dec	r22
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <DIO_SetPinValue+0xa8>
     d0a:	82 2b       	or	r24, r18
     d0c:	88 bb       	out	0x18, r24	; 24
     d0e:	08 95       	ret
     d10:	25 b3       	in	r18, 0x15	; 21
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_SetPinValue+0xc2>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	6a 95       	dec	r22
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_SetPinValue+0xbe>
     d20:	82 2b       	or	r24, r18
     d22:	85 bb       	out	0x15, r24	; 21
     d24:	08 95       	ret
     d26:	22 b3       	in	r18, 0x12	; 18
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <DIO_SetPinValue+0xd8>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	6a 95       	dec	r22
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <DIO_SetPinValue+0xd4>
     d36:	82 2b       	or	r24, r18
     d38:	82 bb       	out	0x12, r24	; 18
     d3a:	08 95       	ret

00000d3c <DIO_ReadPinValue>:
     d3c:	ef e3       	ldi	r30, 0x3F	; 63
     d3e:	fc e9       	ldi	r31, 0x9C	; 156
     d40:	31 97       	sbiw	r30, 0x01	; 1
     d42:	f1 f7       	brne	.-4      	; 0xd40 <DIO_ReadPinValue+0x4>
     d44:	00 c0       	rjmp	.+0      	; 0xd46 <DIO_ReadPinValue+0xa>
     d46:	00 00       	nop
//If pin is defined as input
uint8_t DIO_ReadPinValue (Port port, Pin pin)
{
	uint8_t reading = 0;
	_delay_ms(10);
	switch (port)
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	79 f0       	breq	.+30     	; 0xd6a <DIO_ReadPinValue+0x2e>
     d4c:	28 f0       	brcs	.+10     	; 0xd58 <DIO_ReadPinValue+0x1c>
     d4e:	82 30       	cpi	r24, 0x02	; 2
     d50:	a9 f0       	breq	.+42     	; 0xd7c <DIO_ReadPinValue+0x40>
     d52:	83 30       	cpi	r24, 0x03	; 3
     d54:	e1 f0       	breq	.+56     	; 0xd8e <DIO_ReadPinValue+0x52>
     d56:	24 c0       	rjmp	.+72     	; 0xda0 <DIO_ReadPinValue+0x64>
	{
		case DIO_PORTA:
		reading = GET_BIT(PINA, pin);
     d58:	89 b3       	in	r24, 0x19	; 25
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <DIO_ReadPinValue+0x26>
     d5e:	95 95       	asr	r25
     d60:	87 95       	ror	r24
     d62:	6a 95       	dec	r22
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <DIO_ReadPinValue+0x22>
     d66:	81 70       	andi	r24, 0x01	; 1
		break;
     d68:	08 95       	ret
		case DIO_PORTB:
		reading = GET_BIT(PINB, pin);
     d6a:	86 b3       	in	r24, 0x16	; 22
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_ReadPinValue+0x38>
     d70:	95 95       	asr	r25
     d72:	87 95       	ror	r24
     d74:	6a 95       	dec	r22
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_ReadPinValue+0x34>
     d78:	81 70       	andi	r24, 0x01	; 1
		break;
     d7a:	08 95       	ret
		case DIO_PORTC:
		reading = GET_BIT(PINC, pin);
     d7c:	83 b3       	in	r24, 0x13	; 19
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <DIO_ReadPinValue+0x4a>
     d82:	95 95       	asr	r25
     d84:	87 95       	ror	r24
     d86:	6a 95       	dec	r22
     d88:	e2 f7       	brpl	.-8      	; 0xd82 <DIO_ReadPinValue+0x46>
     d8a:	81 70       	andi	r24, 0x01	; 1
		break;
     d8c:	08 95       	ret
		case DIO_PORTD:
		reading = GET_BIT(PIND, pin);
     d8e:	80 b3       	in	r24, 0x10	; 16
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <DIO_ReadPinValue+0x5c>
     d94:	95 95       	asr	r25
     d96:	87 95       	ror	r24
     d98:	6a 95       	dec	r22
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <DIO_ReadPinValue+0x58>
     d9c:	81 70       	andi	r24, 0x01	; 1
		break;
     d9e:	08 95       	ret
	}
}
//If pin is defined as input
uint8_t DIO_ReadPinValue (Port port, Pin pin)
{
	uint8_t reading = 0;
     da0:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTD:
		reading = GET_BIT(PIND, pin);
		break;
	}
	return reading;
}
     da2:	08 95       	ret

00000da4 <DIO_SetPinPullUp>:
void DIO_SetPinPullUp (Port port, Pin pin)
{
	switch (port)
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	89 f0       	breq	.+34     	; 0xdca <DIO_SetPinPullUp+0x26>
     da8:	28 f0       	brcs	.+10     	; 0xdb4 <DIO_SetPinPullUp+0x10>
     daa:	82 30       	cpi	r24, 0x02	; 2
     dac:	c9 f0       	breq	.+50     	; 0xde0 <DIO_SetPinPullUp+0x3c>
     dae:	83 30       	cpi	r24, 0x03	; 3
     db0:	11 f1       	breq	.+68     	; 0xdf6 <DIO_SetPinPullUp+0x52>
     db2:	08 95       	ret
	{
		case DIO_PORTA:
		SET_BIT(PORTA, pin);
     db4:	2b b3       	in	r18, 0x1b	; 27
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_SetPinPullUp+0x1c>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	6a 95       	dec	r22
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_SetPinPullUp+0x18>
     dc4:	82 2b       	or	r24, r18
     dc6:	8b bb       	out	0x1b, r24	; 27
		break;
     dc8:	08 95       	ret
		case DIO_PORTB:
		SET_BIT(PORTB, pin);
     dca:	28 b3       	in	r18, 0x18	; 24
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <DIO_SetPinPullUp+0x32>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	6a 95       	dec	r22
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <DIO_SetPinPullUp+0x2e>
     dda:	82 2b       	or	r24, r18
     ddc:	88 bb       	out	0x18, r24	; 24
		break;
     dde:	08 95       	ret
		case DIO_PORTC:
		SET_BIT(PORTC, pin);
     de0:	25 b3       	in	r18, 0x15	; 21
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_SetPinPullUp+0x48>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	6a 95       	dec	r22
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_SetPinPullUp+0x44>
     df0:	82 2b       	or	r24, r18
     df2:	85 bb       	out	0x15, r24	; 21
		break;
     df4:	08 95       	ret
		case DIO_PORTD:
		SET_BIT(PORTD, pin);
     df6:	22 b3       	in	r18, 0x12	; 18
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <DIO_SetPinPullUp+0x5e>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	6a 95       	dec	r22
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <DIO_SetPinPullUp+0x5a>
     e06:	82 2b       	or	r24, r18
     e08:	82 bb       	out	0x12, r24	; 18
     e0a:	08 95       	ret

00000e0c <EEPROM_Write>:
#include "EEPROM.h"

void EEPROM_Write(uint16_t address , uint8_t data)
{
	// Wait for completion of previous write 
	while(EECR & (1<<EEWE));
     e0c:	e1 99       	sbic	0x1c, 1	; 28
     e0e:	fe cf       	rjmp	.-4      	; 0xe0c <EEPROM_Write>
	/* Set up address and data registers */
	EEAR = address;
     e10:	9f bb       	out	0x1f, r25	; 31
     e12:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
     e14:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     e16:	8c b3       	in	r24, 0x1c	; 28
     e18:	84 60       	ori	r24, 0x04	; 4
     e1a:	8c bb       	out	0x1c, r24	; 28
	/* Start EEPROM write by setting EEWE */
	EECR |= (1<<EEWE);
     e1c:	8c b3       	in	r24, 0x1c	; 28
     e1e:	82 60       	ori	r24, 0x02	; 2
     e20:	8c bb       	out	0x1c, r24	; 28
     e22:	08 95       	ret

00000e24 <Interrupt_Initialization>:
*/

void Interrupt_Initialization(Interrupt_Signal_Pin pin)
{
	//Define Direction as input
	CLR_BIT(DDRD, PD2);
     e24:	91 b3       	in	r25, 0x11	; 17
     e26:	9b 7f       	andi	r25, 0xFB	; 251
     e28:	91 bb       	out	0x11, r25	; 17
	CLR_BIT(DDRD, PD3);
     e2a:	91 b3       	in	r25, 0x11	; 17
     e2c:	97 7f       	andi	r25, 0xF7	; 247
     e2e:	91 bb       	out	0x11, r25	; 17
	CLR_BIT(DDRD, PB2);
     e30:	91 b3       	in	r25, 0x11	; 17
     e32:	9b 7f       	andi	r25, 0xFB	; 251
     e34:	91 bb       	out	0x11, r25	; 17
	//Enable Global interrupt (Apartment Door)
	//===============================================================
	#if Global_INTERRUPT_STATUS == GLOBAL_EN
	sei();
     e36:	78 94       	sei
	//CLR_BIT(SREG, 7);
	#else
	#warning This is invalid choice
	#endif
	//==============================================================
	if(pin == INT0_Signal)
     e38:	81 11       	cpse	r24, r1
     e3a:	0a c0       	rjmp	.+20     	; 0xe50 <Interrupt_Initialization+0x2c>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT0);
     e3c:	8b b7       	in	r24, 0x3b	; 59
     e3e:	80 64       	ori	r24, 0x40	; 64
     e40:	8b bf       	out	0x3b, r24	; 59
		#elif Interrupt_SENSE == HIGH_SIGNAL
		CLR_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);
		#elif Interrupt_SENSE == Falling_SIGNAL
		SET_BIT(MCUCR, ISC01);CLR_BIT(MCUCR, ISC00);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);
     e42:	85 b7       	in	r24, 0x35	; 53
     e44:	82 60       	ori	r24, 0x02	; 2
     e46:	85 bf       	out	0x35, r24	; 53
     e48:	85 b7       	in	r24, 0x35	; 53
     e4a:	81 60       	ori	r24, 0x01	; 1
     e4c:	85 bf       	out	0x35, r24	; 53
     e4e:	08 95       	ret
		#else
		#warning This is invalid
		#endif
	}
	else if(pin == INT1_Signal)
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	51 f4       	brne	.+20     	; 0xe68 <Interrupt_Initialization+0x44>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT1);
     e54:	8b b7       	in	r24, 0x3b	; 59
     e56:	80 68       	ori	r24, 0x80	; 128
     e58:	8b bf       	out	0x3b, r24	; 59
		#elif Interrupt_SENSE == HIGH_SIGNAL
		CLR_BIT(MCUCR, ISC11);SET_BIT(MCUCR, ISC10);
		#elif Interrupt_SENSE == Falling_SIGNAL
		SET_BIT(MCUCR, ISC11);CLR_BIT(MCUCR, ISC10);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCR, ISC11);SET_BIT(MCUCR, ISC10);
     e5a:	85 b7       	in	r24, 0x35	; 53
     e5c:	88 60       	ori	r24, 0x08	; 8
     e5e:	85 bf       	out	0x35, r24	; 53
     e60:	85 b7       	in	r24, 0x35	; 53
     e62:	84 60       	ori	r24, 0x04	; 4
     e64:	85 bf       	out	0x35, r24	; 53
     e66:	08 95       	ret
		#else
		#warning This is invalid
		#endif
	}
	else if(pin == INT2_Signal)
     e68:	82 30       	cpi	r24, 0x02	; 2
     e6a:	31 f4       	brne	.+12     	; 0xe78 <Interrupt_Initialization+0x54>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT2);
     e6c:	8b b7       	in	r24, 0x3b	; 59
     e6e:	80 62       	ori	r24, 0x20	; 32
     e70:	8b bf       	out	0x3b, r24	; 59
		#if Interrupt_SENSE == Falling_SIGNAL
		CLR_BIT(MCUCSR, ISC2);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCSR, ISC2);
     e72:	84 b7       	in	r24, 0x34	; 52
     e74:	80 64       	ori	r24, 0x40	; 64
     e76:	84 bf       	out	0x34, r24	; 52
     e78:	08 95       	ret

00000e7a <Timer0_Start>:
			while(GET_BIT(TIFR, OCF0) != 1);//Wait until raise flag
			SET_BIT(TIFR, OCF0);//Clear flag
			counter++;//Increment counter
		}
	}
}
     e7a:	83 30       	cpi	r24, 0x03	; 3
     e7c:	61 f1       	breq	.+88     	; 0xed6 <Timer0_Start+0x5c>
     e7e:	28 f4       	brcc	.+10     	; 0xe8a <Timer0_Start+0x10>
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	49 f0       	breq	.+18     	; 0xe96 <Timer0_Start+0x1c>
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	b9 f0       	breq	.+46     	; 0xeb6 <Timer0_Start+0x3c>
     e88:	08 95       	ret
     e8a:	84 30       	cpi	r24, 0x04	; 4
     e8c:	a1 f1       	breq	.+104    	; 0xef6 <Timer0_Start+0x7c>
     e8e:	85 30       	cpi	r24, 0x05	; 5
     e90:	09 f4       	brne	.+2      	; 0xe94 <Timer0_Start+0x1a>
     e92:	41 c0       	rjmp	.+130    	; 0xf16 <Timer0_Start+0x9c>
     e94:	08 95       	ret
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <_Prescaler+0x1>
     e9e:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <_Prescaler>
     ea2:	83 b7       	in	r24, 0x33	; 51
     ea4:	8b 7f       	andi	r24, 0xFB	; 251
     ea6:	83 bf       	out	0x33, r24	; 51
     ea8:	83 b7       	in	r24, 0x33	; 51
     eaa:	8d 7f       	andi	r24, 0xFD	; 253
     eac:	83 bf       	out	0x33, r24	; 51
     eae:	83 b7       	in	r24, 0x33	; 51
     eb0:	81 60       	ori	r24, 0x01	; 1
     eb2:	83 bf       	out	0x33, r24	; 51
     eb4:	08 95       	ret
     eb6:	88 e0       	ldi	r24, 0x08	; 8
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <_Prescaler+0x1>
     ebe:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <_Prescaler>
     ec2:	83 b7       	in	r24, 0x33	; 51
     ec4:	8b 7f       	andi	r24, 0xFB	; 251
     ec6:	83 bf       	out	0x33, r24	; 51
     ec8:	83 b7       	in	r24, 0x33	; 51
     eca:	82 60       	ori	r24, 0x02	; 2
     ecc:	83 bf       	out	0x33, r24	; 51
     ece:	83 b7       	in	r24, 0x33	; 51
     ed0:	8e 7f       	andi	r24, 0xFE	; 254
     ed2:	83 bf       	out	0x33, r24	; 51
     ed4:	08 95       	ret
     ed6:	80 e4       	ldi	r24, 0x40	; 64
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <_Prescaler+0x1>
     ede:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <_Prescaler>
     ee2:	83 b7       	in	r24, 0x33	; 51
     ee4:	8b 7f       	andi	r24, 0xFB	; 251
     ee6:	83 bf       	out	0x33, r24	; 51
     ee8:	83 b7       	in	r24, 0x33	; 51
     eea:	82 60       	ori	r24, 0x02	; 2
     eec:	83 bf       	out	0x33, r24	; 51
     eee:	83 b7       	in	r24, 0x33	; 51
     ef0:	81 60       	ori	r24, 0x01	; 1
     ef2:	83 bf       	out	0x33, r24	; 51
     ef4:	08 95       	ret
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <_Prescaler+0x1>
     efe:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <_Prescaler>
     f02:	83 b7       	in	r24, 0x33	; 51
     f04:	84 60       	ori	r24, 0x04	; 4
     f06:	83 bf       	out	0x33, r24	; 51
     f08:	83 b7       	in	r24, 0x33	; 51
     f0a:	8d 7f       	andi	r24, 0xFD	; 253
     f0c:	83 bf       	out	0x33, r24	; 51
     f0e:	83 b7       	in	r24, 0x33	; 51
     f10:	8e 7f       	andi	r24, 0xFE	; 254
     f12:	83 bf       	out	0x33, r24	; 51
     f14:	08 95       	ret
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	94 e0       	ldi	r25, 0x04	; 4
     f1a:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <_Prescaler+0x1>
     f1e:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <_Prescaler>
     f22:	83 b7       	in	r24, 0x33	; 51
     f24:	84 60       	ori	r24, 0x04	; 4
     f26:	83 bf       	out	0x33, r24	; 51
     f28:	83 b7       	in	r24, 0x33	; 51
     f2a:	8d 7f       	andi	r24, 0xFD	; 253
     f2c:	83 bf       	out	0x33, r24	; 51
     f2e:	83 b7       	in	r24, 0x33	; 51
     f30:	81 60       	ori	r24, 0x01	; 1
     f32:	83 bf       	out	0x33, r24	; 51
     f34:	08 95       	ret

00000f36 <Timer0_Stop>:
     f36:	83 b7       	in	r24, 0x33	; 51
     f38:	8b 7f       	andi	r24, 0xFB	; 251
     f3a:	83 bf       	out	0x33, r24	; 51
     f3c:	83 b7       	in	r24, 0x33	; 51
     f3e:	8d 7f       	andi	r24, 0xFD	; 253
     f40:	83 bf       	out	0x33, r24	; 51
     f42:	83 b7       	in	r24, 0x33	; 51
     f44:	8e 7f       	andi	r24, 0xFE	; 254
     f46:	83 bf       	out	0x33, r24	; 51
     f48:	08 95       	ret

00000f4a <Timer0_WithInterrupt_Initialization>:
uint32_t Number_CTC = 0;
uint32_t Init_Value = 0;

void Timer0_WithInterrupt_Initialization(Timer0_Mode mode, Timer0_Pin_Mode pin)
{
	cli();//Close global interrupt
     f4a:	f8 94       	cli
	switch(mode)//Chose Mode
     f4c:	88 23       	and	r24, r24
     f4e:	19 f0       	breq	.+6      	; 0xf56 <Timer0_WithInterrupt_Initialization+0xc>
     f50:	82 30       	cpi	r24, 0x02	; 2
     f52:	59 f0       	breq	.+22     	; 0xf6a <Timer0_WithInterrupt_Initialization+0x20>
     f54:	13 c0       	rjmp	.+38     	; 0xf7c <Timer0_WithInterrupt_Initialization+0x32>
	{
		case Normal_Mode:
		CLR_BIT(TCCR0, WGM01);CLR_BIT(TCCR0, WGM00);
     f56:	83 b7       	in	r24, 0x33	; 51
     f58:	87 7f       	andi	r24, 0xF7	; 247
     f5a:	83 bf       	out	0x33, r24	; 51
     f5c:	83 b7       	in	r24, 0x33	; 51
     f5e:	8f 7b       	andi	r24, 0xBF	; 191
     f60:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TIMSK, TOIE0);//Open OVF interrupt
     f62:	89 b7       	in	r24, 0x39	; 57
     f64:	81 60       	ori	r24, 0x01	; 1
     f66:	89 bf       	out	0x39, r24	; 57
		break;
     f68:	09 c0       	rjmp	.+18     	; 0xf7c <Timer0_WithInterrupt_Initialization+0x32>
		case CTC_Mode:
		SET_BIT(TCCR0, WGM01);CLR_BIT(TCCR0, WGM00);
     f6a:	83 b7       	in	r24, 0x33	; 51
     f6c:	88 60       	ori	r24, 0x08	; 8
     f6e:	83 bf       	out	0x33, r24	; 51
     f70:	83 b7       	in	r24, 0x33	; 51
     f72:	8f 7b       	andi	r24, 0xBF	; 191
     f74:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TIMSK, OCIE0);//Open CTC Interrupt
     f76:	89 b7       	in	r24, 0x39	; 57
     f78:	82 60       	ori	r24, 0x02	; 2
     f7a:	89 bf       	out	0x39, r24	; 57
		case PWM_PhaseCorrect:
		break;
		case PWM_Fast:
		break;
	}
	switch(pin)//Output pin mode
     f7c:	61 30       	cpi	r22, 0x01	; 1
     f7e:	69 f0       	breq	.+26     	; 0xf9a <Timer0_WithInterrupt_Initialization+0x50>
     f80:	28 f0       	brcs	.+10     	; 0xf8c <Timer0_WithInterrupt_Initialization+0x42>
     f82:	62 30       	cpi	r22, 0x02	; 2
     f84:	89 f0       	breq	.+34     	; 0xfa8 <Timer0_WithInterrupt_Initialization+0x5e>
     f86:	63 30       	cpi	r22, 0x03	; 3
     f88:	b1 f0       	breq	.+44     	; 0xfb6 <Timer0_WithInterrupt_Initialization+0x6c>
     f8a:	1b c0       	rjmp	.+54     	; 0xfc2 <Timer0_WithInterrupt_Initialization+0x78>
	{
		case Pin_disconnected:
		CLR_BIT(TCCR0, COM01);CLR_BIT(TCCR0, COM00);
     f8c:	83 b7       	in	r24, 0x33	; 51
     f8e:	8f 7d       	andi	r24, 0xDF	; 223
     f90:	83 bf       	out	0x33, r24	; 51
     f92:	83 b7       	in	r24, 0x33	; 51
     f94:	8f 7e       	andi	r24, 0xEF	; 239
     f96:	83 bf       	out	0x33, r24	; 51
		break;
     f98:	14 c0       	rjmp	.+40     	; 0xfc2 <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Toggle:
		CLR_BIT(TCCR0, COM01);SET_BIT(TCCR0, COM00);
     f9a:	83 b7       	in	r24, 0x33	; 51
     f9c:	8f 7d       	andi	r24, 0xDF	; 223
     f9e:	83 bf       	out	0x33, r24	; 51
     fa0:	83 b7       	in	r24, 0x33	; 51
     fa2:	80 61       	ori	r24, 0x10	; 16
     fa4:	83 bf       	out	0x33, r24	; 51
		break;
     fa6:	0d c0       	rjmp	.+26     	; 0xfc2 <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Clear:
		SET_BIT(TCCR0, COM01);CLR_BIT(TCCR0, COM00);
     fa8:	83 b7       	in	r24, 0x33	; 51
     faa:	80 62       	ori	r24, 0x20	; 32
     fac:	83 bf       	out	0x33, r24	; 51
     fae:	83 b7       	in	r24, 0x33	; 51
     fb0:	8f 7e       	andi	r24, 0xEF	; 239
     fb2:	83 bf       	out	0x33, r24	; 51
		break;
     fb4:	06 c0       	rjmp	.+12     	; 0xfc2 <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Set:
		SET_BIT(TCCR0, COM01);SET_BIT(TCCR0, COM00);
     fb6:	83 b7       	in	r24, 0x33	; 51
     fb8:	80 62       	ori	r24, 0x20	; 32
     fba:	83 bf       	out	0x33, r24	; 51
     fbc:	83 b7       	in	r24, 0x33	; 51
     fbe:	80 61       	ori	r24, 0x10	; 16
     fc0:	83 bf       	out	0x33, r24	; 51
		break;
	}
	sei();//Enable global interrupt
     fc2:	78 94       	sei
     fc4:	08 95       	ret

00000fc6 <Timer0_WithInterrupt_SetDelay>:
}
void Timer0_WithInterrupt_SetDelay(Timer0_Mode mode, uint32_t delay, uint8_t top)
{
     fc6:	0f 93       	push	r16
	if(mode == Normal_Mode)
     fc8:	81 11       	cpse	r24, r1
     fca:	37 c0       	rjmp	.+110    	; 0x103a <Timer0_WithInterrupt_SetDelay+0x74>
	{
		uint8_t Tick = ( 1 * _Prescaler) / Frequency;
     fcc:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <_Prescaler>
     fd0:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <_Prescaler+0x1>
     fd4:	f9 01       	movw	r30, r18
     fd6:	f2 95       	swap	r31
     fd8:	e2 95       	swap	r30
     fda:	ef 70       	andi	r30, 0x0F	; 15
     fdc:	ef 27       	eor	r30, r31
     fde:	ff 70       	andi	r31, 0x0F	; 15
     fe0:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     fe2:	a8 ee       	ldi	r26, 0xE8	; 232
     fe4:	b3 e0       	ldi	r27, 0x03	; 3
     fe6:	9a 01       	movw	r18, r20
     fe8:	ab 01       	movw	r20, r22
     fea:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__muluhisi3>
     fee:	2e 2f       	mov	r18, r30
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__udivmodsi4>
		Number_OVF = count / Bits;
     ffa:	bb 27       	eor	r27, r27
     ffc:	a5 2f       	mov	r26, r21
     ffe:	94 2f       	mov	r25, r20
    1000:	83 2f       	mov	r24, r19
		Number_OVF ++;
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	a1 1d       	adc	r26, r1
    1006:	b1 1d       	adc	r27, r1
    1008:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <Number_OVF>
    100c:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <Number_OVF+0x1>
    1010:	a0 93 90 00 	sts	0x0090, r26	; 0x800090 <Number_OVF+0x2>
    1014:	b0 93 91 00 	sts	0x0091, r27	; 0x800091 <Number_OVF+0x3>
		Init_Value = Bits - (count % Bits);
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	82 1b       	sub	r24, r18
    1022:	91 09       	sbc	r25, r1
    1024:	a1 09       	sbc	r26, r1
    1026:	b1 09       	sbc	r27, r1
    1028:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <Init_Value>
    102c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <Init_Value+0x1>
    1030:	a0 93 88 00 	sts	0x0088, r26	; 0x800088 <Init_Value+0x2>
    1034:	b0 93 89 00 	sts	0x0089, r27	; 0x800089 <Init_Value+0x3>
		return;
    1038:	30 c0       	rjmp	.+96     	; 0x109a <Timer0_WithInterrupt_SetDelay+0xd4>
	}
	else if(mode == CTC_Mode)
    103a:	82 30       	cpi	r24, 0x02	; 2
    103c:	71 f5       	brne	.+92     	; 0x109a <Timer0_WithInterrupt_SetDelay+0xd4>
	{
		OCR0 = top;
    103e:	2c bf       	out	0x3c, r18	; 60
		uint8_t Tick = ( 1 * _Prescaler) / Frequency;
    1040:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <_Prescaler>
    1044:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <_Prescaler+0x1>
    1048:	f9 01       	movw	r30, r18
    104a:	f2 95       	swap	r31
    104c:	e2 95       	swap	r30
    104e:	ef 70       	andi	r30, 0x0F	; 15
    1050:	ef 27       	eor	r30, r31
    1052:	ff 70       	andi	r31, 0x0F	; 15
    1054:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
    1056:	a8 ee       	ldi	r26, 0xE8	; 232
    1058:	b3 e0       	ldi	r27, 0x03	; 3
    105a:	9a 01       	movw	r18, r20
    105c:	ab 01       	movw	r20, r22
    105e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__muluhisi3>
    1062:	2e 2f       	mov	r18, r30
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__udivmodsi4>
    106e:	ca 01       	movw	r24, r20
    1070:	b9 01       	movw	r22, r18
		Number_CTC = count / OCR0;
    1072:	0c b7       	in	r16, 0x3c	; 60
    1074:	20 2f       	mov	r18, r16
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e0       	ldi	r20, 0x00	; 0
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__udivmodsi4>
		Number_CTC ++;
    1080:	da 01       	movw	r26, r20
    1082:	c9 01       	movw	r24, r18
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	a1 1d       	adc	r26, r1
    1088:	b1 1d       	adc	r27, r1
    108a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <Number_CTC>
    108e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <Number_CTC+0x1>
    1092:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <Number_CTC+0x2>
    1096:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <Number_CTC+0x3>
		return;
	}
}
    109a:	0f 91       	pop	r16
    109c:	08 95       	ret

0000109e <Timer1_stop>:
	
	}
}
void Timer1_stop(void)
{
	CLR_BIT(TCCR1B , CS12); CLR_BIT(TCCR1B , CS11); CLR_BIT(TCCR1B , CS10);
    109e:	8e b5       	in	r24, 0x2e	; 46
    10a0:	8b 7f       	andi	r24, 0xFB	; 251
    10a2:	8e bd       	out	0x2e, r24	; 46
    10a4:	8e b5       	in	r24, 0x2e	; 46
    10a6:	8d 7f       	andi	r24, 0xFD	; 253
    10a8:	8e bd       	out	0x2e, r24	; 46
    10aa:	8e b5       	in	r24, 0x2e	; 46
    10ac:	8e 7f       	andi	r24, 0xFE	; 254
    10ae:	8e bd       	out	0x2e, r24	; 46
	Timer1_global_prescaler = 0;
    10b0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <Timer1_global_prescaler+0x1>
    10b4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <Timer1_global_prescaler>
    10b8:	08 95       	ret

000010ba <Timer2_Start>:
		
	}
}
void Timer2_Stop(void)
{
	CLR_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);CLR_BIT(TCCR2, CS20);
    10ba:	83 30       	cpi	r24, 0x03	; 3
    10bc:	61 f1       	breq	.+88     	; 0x1116 <Timer2_Start+0x5c>
    10be:	28 f4       	brcc	.+10     	; 0x10ca <Timer2_Start+0x10>
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	49 f0       	breq	.+18     	; 0x10d6 <Timer2_Start+0x1c>
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	b9 f0       	breq	.+46     	; 0x10f6 <Timer2_Start+0x3c>
    10c8:	08 95       	ret
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	a1 f1       	breq	.+104    	; 0x1136 <Timer2_Start+0x7c>
    10ce:	85 30       	cpi	r24, 0x05	; 5
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <Timer2_Start+0x1a>
    10d2:	41 c0       	rjmp	.+130    	; 0x1156 <Timer2_Start+0x9c>
    10d4:	08 95       	ret
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <_Prescaler_+0x1>
    10de:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <_Prescaler_>
    10e2:	85 b5       	in	r24, 0x25	; 37
    10e4:	8b 7f       	andi	r24, 0xFB	; 251
    10e6:	85 bd       	out	0x25, r24	; 37
    10e8:	85 b5       	in	r24, 0x25	; 37
    10ea:	8d 7f       	andi	r24, 0xFD	; 253
    10ec:	85 bd       	out	0x25, r24	; 37
    10ee:	85 b5       	in	r24, 0x25	; 37
    10f0:	81 60       	ori	r24, 0x01	; 1
    10f2:	85 bd       	out	0x25, r24	; 37
    10f4:	08 95       	ret
    10f6:	88 e0       	ldi	r24, 0x08	; 8
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <_Prescaler_+0x1>
    10fe:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <_Prescaler_>
    1102:	85 b5       	in	r24, 0x25	; 37
    1104:	8b 7f       	andi	r24, 0xFB	; 251
    1106:	85 bd       	out	0x25, r24	; 37
    1108:	85 b5       	in	r24, 0x25	; 37
    110a:	82 60       	ori	r24, 0x02	; 2
    110c:	85 bd       	out	0x25, r24	; 37
    110e:	85 b5       	in	r24, 0x25	; 37
    1110:	8e 7f       	andi	r24, 0xFE	; 254
    1112:	85 bd       	out	0x25, r24	; 37
    1114:	08 95       	ret
    1116:	80 e4       	ldi	r24, 0x40	; 64
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <_Prescaler_+0x1>
    111e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <_Prescaler_>
    1122:	85 b5       	in	r24, 0x25	; 37
    1124:	8b 7f       	andi	r24, 0xFB	; 251
    1126:	85 bd       	out	0x25, r24	; 37
    1128:	85 b5       	in	r24, 0x25	; 37
    112a:	82 60       	ori	r24, 0x02	; 2
    112c:	85 bd       	out	0x25, r24	; 37
    112e:	85 b5       	in	r24, 0x25	; 37
    1130:	81 60       	ori	r24, 0x01	; 1
    1132:	85 bd       	out	0x25, r24	; 37
    1134:	08 95       	ret
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <_Prescaler_+0x1>
    113e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <_Prescaler_>
    1142:	85 b5       	in	r24, 0x25	; 37
    1144:	84 60       	ori	r24, 0x04	; 4
    1146:	85 bd       	out	0x25, r24	; 37
    1148:	85 b5       	in	r24, 0x25	; 37
    114a:	8d 7f       	andi	r24, 0xFD	; 253
    114c:	85 bd       	out	0x25, r24	; 37
    114e:	85 b5       	in	r24, 0x25	; 37
    1150:	8e 7f       	andi	r24, 0xFE	; 254
    1152:	85 bd       	out	0x25, r24	; 37
    1154:	08 95       	ret
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	94 e0       	ldi	r25, 0x04	; 4
    115a:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <_Prescaler_+0x1>
    115e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <_Prescaler_>
    1162:	85 b5       	in	r24, 0x25	; 37
    1164:	84 60       	ori	r24, 0x04	; 4
    1166:	85 bd       	out	0x25, r24	; 37
    1168:	85 b5       	in	r24, 0x25	; 37
    116a:	8d 7f       	andi	r24, 0xFD	; 253
    116c:	85 bd       	out	0x25, r24	; 37
    116e:	85 b5       	in	r24, 0x25	; 37
    1170:	81 60       	ori	r24, 0x01	; 1
    1172:	85 bd       	out	0x25, r24	; 37
    1174:	08 95       	ret

00001176 <Timer2_WithInterrupt_Initialization>:
uint32_t Timer2_CTC = 0;
uint32_t Timer2_Init_Value = 0;

void Timer2_WithInterrupt_Initialization(Timer2_Mode mode, Timer2_Pin_Mode pin)
{
	cli();//Close global interrupt
    1176:	f8 94       	cli
	switch(mode)//Chose Mode
    1178:	88 23       	and	r24, r24
    117a:	19 f0       	breq	.+6      	; 0x1182 <Timer2_WithInterrupt_Initialization+0xc>
    117c:	82 30       	cpi	r24, 0x02	; 2
    117e:	59 f0       	breq	.+22     	; 0x1196 <Timer2_WithInterrupt_Initialization+0x20>
    1180:	13 c0       	rjmp	.+38     	; 0x11a8 <Timer2_WithInterrupt_Initialization+0x32>
	{
		case Normal_Mode_:
		CLR_BIT(TCCR2, WGM21);CLR_BIT(TCCR2, WGM20);
    1182:	85 b5       	in	r24, 0x25	; 37
    1184:	87 7f       	andi	r24, 0xF7	; 247
    1186:	85 bd       	out	0x25, r24	; 37
    1188:	85 b5       	in	r24, 0x25	; 37
    118a:	8f 7b       	andi	r24, 0xBF	; 191
    118c:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TIMSK, TOIE2);//Open OVF interrupt
    118e:	89 b7       	in	r24, 0x39	; 57
    1190:	80 64       	ori	r24, 0x40	; 64
    1192:	89 bf       	out	0x39, r24	; 57
		break;
    1194:	09 c0       	rjmp	.+18     	; 0x11a8 <Timer2_WithInterrupt_Initialization+0x32>
		case CTC_Mode_:
		SET_BIT(TCCR2, WGM21);CLR_BIT(TCCR2, WGM20);
    1196:	85 b5       	in	r24, 0x25	; 37
    1198:	88 60       	ori	r24, 0x08	; 8
    119a:	85 bd       	out	0x25, r24	; 37
    119c:	85 b5       	in	r24, 0x25	; 37
    119e:	8f 7b       	andi	r24, 0xBF	; 191
    11a0:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TIMSK, OCIE2);//Open CTC Interrupt
    11a2:	89 b7       	in	r24, 0x39	; 57
    11a4:	80 68       	ori	r24, 0x80	; 128
    11a6:	89 bf       	out	0x39, r24	; 57
		case PWM_PhaseCorrect_:
		break;
		case PWM_Fast_:
		break;
	}
	switch(pin)//Output pin mode
    11a8:	61 30       	cpi	r22, 0x01	; 1
    11aa:	69 f0       	breq	.+26     	; 0x11c6 <Timer2_WithInterrupt_Initialization+0x50>
    11ac:	28 f0       	brcs	.+10     	; 0x11b8 <Timer2_WithInterrupt_Initialization+0x42>
    11ae:	62 30       	cpi	r22, 0x02	; 2
    11b0:	89 f0       	breq	.+34     	; 0x11d4 <Timer2_WithInterrupt_Initialization+0x5e>
    11b2:	63 30       	cpi	r22, 0x03	; 3
    11b4:	b1 f0       	breq	.+44     	; 0x11e2 <Timer2_WithInterrupt_Initialization+0x6c>
    11b6:	1b c0       	rjmp	.+54     	; 0x11ee <Timer2_WithInterrupt_Initialization+0x78>
	{
		case Pin_disconnected_:
		CLR_BIT(TCCR2, COM21);CLR_BIT(TCCR2, COM20);
    11b8:	85 b5       	in	r24, 0x25	; 37
    11ba:	8f 7d       	andi	r24, 0xDF	; 223
    11bc:	85 bd       	out	0x25, r24	; 37
    11be:	85 b5       	in	r24, 0x25	; 37
    11c0:	8f 7e       	andi	r24, 0xEF	; 239
    11c2:	85 bd       	out	0x25, r24	; 37
		break;
    11c4:	14 c0       	rjmp	.+40     	; 0x11ee <Timer2_WithInterrupt_Initialization+0x78>
		case Pin_Toggle_:
		CLR_BIT(TCCR2, COM21);SET_BIT(TCCR2, COM20);
    11c6:	85 b5       	in	r24, 0x25	; 37
    11c8:	8f 7d       	andi	r24, 0xDF	; 223
    11ca:	85 bd       	out	0x25, r24	; 37
    11cc:	85 b5       	in	r24, 0x25	; 37
    11ce:	80 61       	ori	r24, 0x10	; 16
    11d0:	85 bd       	out	0x25, r24	; 37
		break;
    11d2:	0d c0       	rjmp	.+26     	; 0x11ee <Timer2_WithInterrupt_Initialization+0x78>
		case Pin_Clear_:
		SET_BIT(TCCR2, COM21);CLR_BIT(TCCR2, COM20);
    11d4:	85 b5       	in	r24, 0x25	; 37
    11d6:	80 62       	ori	r24, 0x20	; 32
    11d8:	85 bd       	out	0x25, r24	; 37
    11da:	85 b5       	in	r24, 0x25	; 37
    11dc:	8f 7e       	andi	r24, 0xEF	; 239
    11de:	85 bd       	out	0x25, r24	; 37
		break;
    11e0:	06 c0       	rjmp	.+12     	; 0x11ee <Timer2_WithInterrupt_Initialization+0x78>
		case Pin_Set_:
		SET_BIT(TCCR2, COM21);SET_BIT(TCCR2, COM20);
    11e2:	85 b5       	in	r24, 0x25	; 37
    11e4:	80 62       	ori	r24, 0x20	; 32
    11e6:	85 bd       	out	0x25, r24	; 37
    11e8:	85 b5       	in	r24, 0x25	; 37
    11ea:	80 61       	ori	r24, 0x10	; 16
    11ec:	85 bd       	out	0x25, r24	; 37
		break;
	}
	sei();//Enable global interrupt
    11ee:	78 94       	sei
    11f0:	08 95       	ret

000011f2 <Timer2_WithInterrupt_SetDelay>:
}
void Timer2_WithInterrupt_SetDelay(Timer2_Mode mode, uint32_t delay, uint8_t top)
{
    11f2:	0f 93       	push	r16
	if(mode == Normal_Mode_)
    11f4:	81 11       	cpse	r24, r1
    11f6:	37 c0       	rjmp	.+110    	; 0x1266 <Timer2_WithInterrupt_SetDelay+0x74>
	{
		uint8_t Tick = ( 1 * _Prescaler_) / Frequency;
    11f8:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <_Prescaler_>
    11fc:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <_Prescaler_+0x1>
    1200:	f9 01       	movw	r30, r18
    1202:	f2 95       	swap	r31
    1204:	e2 95       	swap	r30
    1206:	ef 70       	andi	r30, 0x0F	; 15
    1208:	ef 27       	eor	r30, r31
    120a:	ff 70       	andi	r31, 0x0F	; 15
    120c:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
    120e:	a8 ee       	ldi	r26, 0xE8	; 232
    1210:	b3 e0       	ldi	r27, 0x03	; 3
    1212:	9a 01       	movw	r18, r20
    1214:	ab 01       	movw	r20, r22
    1216:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__muluhisi3>
    121a:	2e 2f       	mov	r18, r30
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__udivmodsi4>
		Timer2_OVF = count / Bits;
    1226:	bb 27       	eor	r27, r27
    1228:	a5 2f       	mov	r26, r21
    122a:	94 2f       	mov	r25, r20
    122c:	83 2f       	mov	r24, r19
		Timer2_OVF ++;
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	a1 1d       	adc	r26, r1
    1232:	b1 1d       	adc	r27, r1
    1234:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <Timer2_OVF>
    1238:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <Timer2_OVF+0x1>
    123c:	a0 93 a0 00 	sts	0x00A0, r26	; 0x8000a0 <Timer2_OVF+0x2>
    1240:	b0 93 a1 00 	sts	0x00A1, r27	; 0x8000a1 <Timer2_OVF+0x3>
		Timer2_Init_Value = Bits - (count % Bits);
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	a0 e0       	ldi	r26, 0x00	; 0
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	82 1b       	sub	r24, r18
    124e:	91 09       	sbc	r25, r1
    1250:	a1 09       	sbc	r26, r1
    1252:	b1 09       	sbc	r27, r1
    1254:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <Timer2_Init_Value>
    1258:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <Timer2_Init_Value+0x1>
    125c:	a0 93 98 00 	sts	0x0098, r26	; 0x800098 <Timer2_Init_Value+0x2>
    1260:	b0 93 99 00 	sts	0x0099, r27	; 0x800099 <Timer2_Init_Value+0x3>
		return;
    1264:	30 c0       	rjmp	.+96     	; 0x12c6 <Timer2_WithInterrupt_SetDelay+0xd4>
	}
	else if(mode == CTC_Mode_)
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	71 f5       	brne	.+92     	; 0x12c6 <Timer2_WithInterrupt_SetDelay+0xd4>
	{
		OCR2 = top;
    126a:	23 bd       	out	0x23, r18	; 35
		uint8_t Tick = ( 1 * _Prescaler_) / Frequency;
    126c:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <_Prescaler_>
    1270:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <_Prescaler_+0x1>
    1274:	f9 01       	movw	r30, r18
    1276:	f2 95       	swap	r31
    1278:	e2 95       	swap	r30
    127a:	ef 70       	andi	r30, 0x0F	; 15
    127c:	ef 27       	eor	r30, r31
    127e:	ff 70       	andi	r31, 0x0F	; 15
    1280:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
    1282:	a8 ee       	ldi	r26, 0xE8	; 232
    1284:	b3 e0       	ldi	r27, 0x03	; 3
    1286:	9a 01       	movw	r18, r20
    1288:	ab 01       	movw	r20, r22
    128a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__muluhisi3>
    128e:	2e 2f       	mov	r18, r30
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e0       	ldi	r20, 0x00	; 0
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__udivmodsi4>
    129a:	ca 01       	movw	r24, r20
    129c:	b9 01       	movw	r22, r18
		Timer2_CTC = count / OCR0;
    129e:	0c b7       	in	r16, 0x3c	; 60
    12a0:	20 2f       	mov	r18, r16
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 e0       	ldi	r20, 0x00	; 0
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__udivmodsi4>
		Timer2_CTC ++;
    12ac:	da 01       	movw	r26, r20
    12ae:	c9 01       	movw	r24, r18
    12b0:	01 96       	adiw	r24, 0x01	; 1
    12b2:	a1 1d       	adc	r26, r1
    12b4:	b1 1d       	adc	r27, r1
    12b6:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Timer2_CTC>
    12ba:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <Timer2_CTC+0x1>
    12be:	a0 93 9c 00 	sts	0x009C, r26	; 0x80009c <Timer2_CTC+0x2>
    12c2:	b0 93 9d 00 	sts	0x009D, r27	; 0x80009d <Timer2_CTC+0x3>
		return;
	}
}
    12c6:	0f 91       	pop	r16
    12c8:	08 95       	ret

000012ca <__subsf3>:
    12ca:	50 58       	subi	r21, 0x80	; 128

000012cc <__addsf3>:
    12cc:	bb 27       	eor	r27, r27
    12ce:	aa 27       	eor	r26, r26
    12d0:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__addsf3x>
    12d4:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_round>
    12d8:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__fp_pscA>
    12dc:	38 f0       	brcs	.+14     	; 0x12ec <__addsf3+0x20>
    12de:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__fp_pscB>
    12e2:	20 f0       	brcs	.+8      	; 0x12ec <__addsf3+0x20>
    12e4:	39 f4       	brne	.+14     	; 0x12f4 <__addsf3+0x28>
    12e6:	9f 3f       	cpi	r25, 0xFF	; 255
    12e8:	19 f4       	brne	.+6      	; 0x12f0 <__addsf3+0x24>
    12ea:	26 f4       	brtc	.+8      	; 0x12f4 <__addsf3+0x28>
    12ec:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__fp_nan>
    12f0:	0e f4       	brtc	.+2      	; 0x12f4 <__addsf3+0x28>
    12f2:	e0 95       	com	r30
    12f4:	e7 fb       	bst	r30, 7
    12f6:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_inf>

000012fa <__addsf3x>:
    12fa:	e9 2f       	mov	r30, r25
    12fc:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_split3>
    1300:	58 f3       	brcs	.-42     	; 0x12d8 <__addsf3+0xc>
    1302:	ba 17       	cp	r27, r26
    1304:	62 07       	cpc	r22, r18
    1306:	73 07       	cpc	r23, r19
    1308:	84 07       	cpc	r24, r20
    130a:	95 07       	cpc	r25, r21
    130c:	20 f0       	brcs	.+8      	; 0x1316 <__addsf3x+0x1c>
    130e:	79 f4       	brne	.+30     	; 0x132e <__addsf3x+0x34>
    1310:	a6 f5       	brtc	.+104    	; 0x137a <__addsf3x+0x80>
    1312:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_zero>
    1316:	0e f4       	brtc	.+2      	; 0x131a <__addsf3x+0x20>
    1318:	e0 95       	com	r30
    131a:	0b 2e       	mov	r0, r27
    131c:	ba 2f       	mov	r27, r26
    131e:	a0 2d       	mov	r26, r0
    1320:	0b 01       	movw	r0, r22
    1322:	b9 01       	movw	r22, r18
    1324:	90 01       	movw	r18, r0
    1326:	0c 01       	movw	r0, r24
    1328:	ca 01       	movw	r24, r20
    132a:	a0 01       	movw	r20, r0
    132c:	11 24       	eor	r1, r1
    132e:	ff 27       	eor	r31, r31
    1330:	59 1b       	sub	r21, r25
    1332:	99 f0       	breq	.+38     	; 0x135a <__addsf3x+0x60>
    1334:	59 3f       	cpi	r21, 0xF9	; 249
    1336:	50 f4       	brcc	.+20     	; 0x134c <__addsf3x+0x52>
    1338:	50 3e       	cpi	r21, 0xE0	; 224
    133a:	68 f1       	brcs	.+90     	; 0x1396 <__addsf3x+0x9c>
    133c:	1a 16       	cp	r1, r26
    133e:	f0 40       	sbci	r31, 0x00	; 0
    1340:	a2 2f       	mov	r26, r18
    1342:	23 2f       	mov	r18, r19
    1344:	34 2f       	mov	r19, r20
    1346:	44 27       	eor	r20, r20
    1348:	58 5f       	subi	r21, 0xF8	; 248
    134a:	f3 cf       	rjmp	.-26     	; 0x1332 <__addsf3x+0x38>
    134c:	46 95       	lsr	r20
    134e:	37 95       	ror	r19
    1350:	27 95       	ror	r18
    1352:	a7 95       	ror	r26
    1354:	f0 40       	sbci	r31, 0x00	; 0
    1356:	53 95       	inc	r21
    1358:	c9 f7       	brne	.-14     	; 0x134c <__addsf3x+0x52>
    135a:	7e f4       	brtc	.+30     	; 0x137a <__addsf3x+0x80>
    135c:	1f 16       	cp	r1, r31
    135e:	ba 0b       	sbc	r27, r26
    1360:	62 0b       	sbc	r22, r18
    1362:	73 0b       	sbc	r23, r19
    1364:	84 0b       	sbc	r24, r20
    1366:	ba f0       	brmi	.+46     	; 0x1396 <__addsf3x+0x9c>
    1368:	91 50       	subi	r25, 0x01	; 1
    136a:	a1 f0       	breq	.+40     	; 0x1394 <__addsf3x+0x9a>
    136c:	ff 0f       	add	r31, r31
    136e:	bb 1f       	adc	r27, r27
    1370:	66 1f       	adc	r22, r22
    1372:	77 1f       	adc	r23, r23
    1374:	88 1f       	adc	r24, r24
    1376:	c2 f7       	brpl	.-16     	; 0x1368 <__addsf3x+0x6e>
    1378:	0e c0       	rjmp	.+28     	; 0x1396 <__addsf3x+0x9c>
    137a:	ba 0f       	add	r27, r26
    137c:	62 1f       	adc	r22, r18
    137e:	73 1f       	adc	r23, r19
    1380:	84 1f       	adc	r24, r20
    1382:	48 f4       	brcc	.+18     	; 0x1396 <__addsf3x+0x9c>
    1384:	87 95       	ror	r24
    1386:	77 95       	ror	r23
    1388:	67 95       	ror	r22
    138a:	b7 95       	ror	r27
    138c:	f7 95       	ror	r31
    138e:	9e 3f       	cpi	r25, 0xFE	; 254
    1390:	08 f0       	brcs	.+2      	; 0x1394 <__addsf3x+0x9a>
    1392:	b0 cf       	rjmp	.-160    	; 0x12f4 <__addsf3+0x28>
    1394:	93 95       	inc	r25
    1396:	88 0f       	add	r24, r24
    1398:	08 f0       	brcs	.+2      	; 0x139c <__addsf3x+0xa2>
    139a:	99 27       	eor	r25, r25
    139c:	ee 0f       	add	r30, r30
    139e:	97 95       	ror	r25
    13a0:	87 95       	ror	r24
    13a2:	08 95       	ret

000013a4 <__cmpsf2>:
    13a4:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__fp_cmp>
    13a8:	08 f4       	brcc	.+2      	; 0x13ac <__cmpsf2+0x8>
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	08 95       	ret

000013ae <__divsf3>:
    13ae:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__divsf3x>
    13b2:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_round>
    13b6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__fp_pscB>
    13ba:	58 f0       	brcs	.+22     	; 0x13d2 <__divsf3+0x24>
    13bc:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__fp_pscA>
    13c0:	40 f0       	brcs	.+16     	; 0x13d2 <__divsf3+0x24>
    13c2:	29 f4       	brne	.+10     	; 0x13ce <__divsf3+0x20>
    13c4:	5f 3f       	cpi	r21, 0xFF	; 255
    13c6:	29 f0       	breq	.+10     	; 0x13d2 <__divsf3+0x24>
    13c8:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_inf>
    13cc:	51 11       	cpse	r21, r1
    13ce:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_szero>
    13d2:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__fp_nan>

000013d6 <__divsf3x>:
    13d6:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_split3>
    13da:	68 f3       	brcs	.-38     	; 0x13b6 <__divsf3+0x8>

000013dc <__divsf3_pse>:
    13dc:	99 23       	and	r25, r25
    13de:	b1 f3       	breq	.-20     	; 0x13cc <__divsf3+0x1e>
    13e0:	55 23       	and	r21, r21
    13e2:	91 f3       	breq	.-28     	; 0x13c8 <__divsf3+0x1a>
    13e4:	95 1b       	sub	r25, r21
    13e6:	55 0b       	sbc	r21, r21
    13e8:	bb 27       	eor	r27, r27
    13ea:	aa 27       	eor	r26, r26
    13ec:	62 17       	cp	r22, r18
    13ee:	73 07       	cpc	r23, r19
    13f0:	84 07       	cpc	r24, r20
    13f2:	38 f0       	brcs	.+14     	; 0x1402 <__divsf3_pse+0x26>
    13f4:	9f 5f       	subi	r25, 0xFF	; 255
    13f6:	5f 4f       	sbci	r21, 0xFF	; 255
    13f8:	22 0f       	add	r18, r18
    13fa:	33 1f       	adc	r19, r19
    13fc:	44 1f       	adc	r20, r20
    13fe:	aa 1f       	adc	r26, r26
    1400:	a9 f3       	breq	.-22     	; 0x13ec <__divsf3_pse+0x10>
    1402:	35 d0       	rcall	.+106    	; 0x146e <__divsf3_pse+0x92>
    1404:	0e 2e       	mov	r0, r30
    1406:	3a f0       	brmi	.+14     	; 0x1416 <__divsf3_pse+0x3a>
    1408:	e0 e8       	ldi	r30, 0x80	; 128
    140a:	32 d0       	rcall	.+100    	; 0x1470 <__divsf3_pse+0x94>
    140c:	91 50       	subi	r25, 0x01	; 1
    140e:	50 40       	sbci	r21, 0x00	; 0
    1410:	e6 95       	lsr	r30
    1412:	00 1c       	adc	r0, r0
    1414:	ca f7       	brpl	.-14     	; 0x1408 <__divsf3_pse+0x2c>
    1416:	2b d0       	rcall	.+86     	; 0x146e <__divsf3_pse+0x92>
    1418:	fe 2f       	mov	r31, r30
    141a:	29 d0       	rcall	.+82     	; 0x146e <__divsf3_pse+0x92>
    141c:	66 0f       	add	r22, r22
    141e:	77 1f       	adc	r23, r23
    1420:	88 1f       	adc	r24, r24
    1422:	bb 1f       	adc	r27, r27
    1424:	26 17       	cp	r18, r22
    1426:	37 07       	cpc	r19, r23
    1428:	48 07       	cpc	r20, r24
    142a:	ab 07       	cpc	r26, r27
    142c:	b0 e8       	ldi	r27, 0x80	; 128
    142e:	09 f0       	breq	.+2      	; 0x1432 <__divsf3_pse+0x56>
    1430:	bb 0b       	sbc	r27, r27
    1432:	80 2d       	mov	r24, r0
    1434:	bf 01       	movw	r22, r30
    1436:	ff 27       	eor	r31, r31
    1438:	93 58       	subi	r25, 0x83	; 131
    143a:	5f 4f       	sbci	r21, 0xFF	; 255
    143c:	3a f0       	brmi	.+14     	; 0x144c <__divsf3_pse+0x70>
    143e:	9e 3f       	cpi	r25, 0xFE	; 254
    1440:	51 05       	cpc	r21, r1
    1442:	78 f0       	brcs	.+30     	; 0x1462 <__divsf3_pse+0x86>
    1444:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_inf>
    1448:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_szero>
    144c:	5f 3f       	cpi	r21, 0xFF	; 255
    144e:	e4 f3       	brlt	.-8      	; 0x1448 <__divsf3_pse+0x6c>
    1450:	98 3e       	cpi	r25, 0xE8	; 232
    1452:	d4 f3       	brlt	.-12     	; 0x1448 <__divsf3_pse+0x6c>
    1454:	86 95       	lsr	r24
    1456:	77 95       	ror	r23
    1458:	67 95       	ror	r22
    145a:	b7 95       	ror	r27
    145c:	f7 95       	ror	r31
    145e:	9f 5f       	subi	r25, 0xFF	; 255
    1460:	c9 f7       	brne	.-14     	; 0x1454 <__divsf3_pse+0x78>
    1462:	88 0f       	add	r24, r24
    1464:	91 1d       	adc	r25, r1
    1466:	96 95       	lsr	r25
    1468:	87 95       	ror	r24
    146a:	97 f9       	bld	r25, 7
    146c:	08 95       	ret
    146e:	e1 e0       	ldi	r30, 0x01	; 1
    1470:	66 0f       	add	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	88 1f       	adc	r24, r24
    1476:	bb 1f       	adc	r27, r27
    1478:	62 17       	cp	r22, r18
    147a:	73 07       	cpc	r23, r19
    147c:	84 07       	cpc	r24, r20
    147e:	ba 07       	cpc	r27, r26
    1480:	20 f0       	brcs	.+8      	; 0x148a <__divsf3_pse+0xae>
    1482:	62 1b       	sub	r22, r18
    1484:	73 0b       	sbc	r23, r19
    1486:	84 0b       	sbc	r24, r20
    1488:	ba 0b       	sbc	r27, r26
    148a:	ee 1f       	adc	r30, r30
    148c:	88 f7       	brcc	.-30     	; 0x1470 <__divsf3_pse+0x94>
    148e:	e0 95       	com	r30
    1490:	08 95       	ret

00001492 <__fixsfsi>:
    1492:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fixunssfsi>
    1496:	68 94       	set
    1498:	b1 11       	cpse	r27, r1
    149a:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_szero>
    149e:	08 95       	ret

000014a0 <__fixunssfsi>:
    14a0:	0e 94 10 0b 	call	0x1620	; 0x1620 <__fp_splitA>
    14a4:	88 f0       	brcs	.+34     	; 0x14c8 <__fixunssfsi+0x28>
    14a6:	9f 57       	subi	r25, 0x7F	; 127
    14a8:	98 f0       	brcs	.+38     	; 0x14d0 <__fixunssfsi+0x30>
    14aa:	b9 2f       	mov	r27, r25
    14ac:	99 27       	eor	r25, r25
    14ae:	b7 51       	subi	r27, 0x17	; 23
    14b0:	b0 f0       	brcs	.+44     	; 0x14de <__fixunssfsi+0x3e>
    14b2:	e1 f0       	breq	.+56     	; 0x14ec <__fixunssfsi+0x4c>
    14b4:	66 0f       	add	r22, r22
    14b6:	77 1f       	adc	r23, r23
    14b8:	88 1f       	adc	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	1a f0       	brmi	.+6      	; 0x14c4 <__fixunssfsi+0x24>
    14be:	ba 95       	dec	r27
    14c0:	c9 f7       	brne	.-14     	; 0x14b4 <__fixunssfsi+0x14>
    14c2:	14 c0       	rjmp	.+40     	; 0x14ec <__fixunssfsi+0x4c>
    14c4:	b1 30       	cpi	r27, 0x01	; 1
    14c6:	91 f0       	breq	.+36     	; 0x14ec <__fixunssfsi+0x4c>
    14c8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__fp_zero>
    14cc:	b1 e0       	ldi	r27, 0x01	; 1
    14ce:	08 95       	ret
    14d0:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_zero>
    14d4:	67 2f       	mov	r22, r23
    14d6:	78 2f       	mov	r23, r24
    14d8:	88 27       	eor	r24, r24
    14da:	b8 5f       	subi	r27, 0xF8	; 248
    14dc:	39 f0       	breq	.+14     	; 0x14ec <__fixunssfsi+0x4c>
    14de:	b9 3f       	cpi	r27, 0xF9	; 249
    14e0:	cc f3       	brlt	.-14     	; 0x14d4 <__fixunssfsi+0x34>
    14e2:	86 95       	lsr	r24
    14e4:	77 95       	ror	r23
    14e6:	67 95       	ror	r22
    14e8:	b3 95       	inc	r27
    14ea:	d9 f7       	brne	.-10     	; 0x14e2 <__fixunssfsi+0x42>
    14ec:	3e f4       	brtc	.+14     	; 0x14fc <__fixunssfsi+0x5c>
    14ee:	90 95       	com	r25
    14f0:	80 95       	com	r24
    14f2:	70 95       	com	r23
    14f4:	61 95       	neg	r22
    14f6:	7f 4f       	sbci	r23, 0xFF	; 255
    14f8:	8f 4f       	sbci	r24, 0xFF	; 255
    14fa:	9f 4f       	sbci	r25, 0xFF	; 255
    14fc:	08 95       	ret

000014fe <__floatunsisf>:
    14fe:	e8 94       	clt
    1500:	09 c0       	rjmp	.+18     	; 0x1514 <__floatsisf+0x12>

00001502 <__floatsisf>:
    1502:	97 fb       	bst	r25, 7
    1504:	3e f4       	brtc	.+14     	; 0x1514 <__floatsisf+0x12>
    1506:	90 95       	com	r25
    1508:	80 95       	com	r24
    150a:	70 95       	com	r23
    150c:	61 95       	neg	r22
    150e:	7f 4f       	sbci	r23, 0xFF	; 255
    1510:	8f 4f       	sbci	r24, 0xFF	; 255
    1512:	9f 4f       	sbci	r25, 0xFF	; 255
    1514:	99 23       	and	r25, r25
    1516:	a9 f0       	breq	.+42     	; 0x1542 <__floatsisf+0x40>
    1518:	f9 2f       	mov	r31, r25
    151a:	96 e9       	ldi	r25, 0x96	; 150
    151c:	bb 27       	eor	r27, r27
    151e:	93 95       	inc	r25
    1520:	f6 95       	lsr	r31
    1522:	87 95       	ror	r24
    1524:	77 95       	ror	r23
    1526:	67 95       	ror	r22
    1528:	b7 95       	ror	r27
    152a:	f1 11       	cpse	r31, r1
    152c:	f8 cf       	rjmp	.-16     	; 0x151e <__floatsisf+0x1c>
    152e:	fa f4       	brpl	.+62     	; 0x156e <__floatsisf+0x6c>
    1530:	bb 0f       	add	r27, r27
    1532:	11 f4       	brne	.+4      	; 0x1538 <__floatsisf+0x36>
    1534:	60 ff       	sbrs	r22, 0
    1536:	1b c0       	rjmp	.+54     	; 0x156e <__floatsisf+0x6c>
    1538:	6f 5f       	subi	r22, 0xFF	; 255
    153a:	7f 4f       	sbci	r23, 0xFF	; 255
    153c:	8f 4f       	sbci	r24, 0xFF	; 255
    153e:	9f 4f       	sbci	r25, 0xFF	; 255
    1540:	16 c0       	rjmp	.+44     	; 0x156e <__floatsisf+0x6c>
    1542:	88 23       	and	r24, r24
    1544:	11 f0       	breq	.+4      	; 0x154a <__floatsisf+0x48>
    1546:	96 e9       	ldi	r25, 0x96	; 150
    1548:	11 c0       	rjmp	.+34     	; 0x156c <__floatsisf+0x6a>
    154a:	77 23       	and	r23, r23
    154c:	21 f0       	breq	.+8      	; 0x1556 <__floatsisf+0x54>
    154e:	9e e8       	ldi	r25, 0x8E	; 142
    1550:	87 2f       	mov	r24, r23
    1552:	76 2f       	mov	r23, r22
    1554:	05 c0       	rjmp	.+10     	; 0x1560 <__floatsisf+0x5e>
    1556:	66 23       	and	r22, r22
    1558:	71 f0       	breq	.+28     	; 0x1576 <__floatsisf+0x74>
    155a:	96 e8       	ldi	r25, 0x86	; 134
    155c:	86 2f       	mov	r24, r22
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	2a f0       	brmi	.+10     	; 0x156e <__floatsisf+0x6c>
    1564:	9a 95       	dec	r25
    1566:	66 0f       	add	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	88 1f       	adc	r24, r24
    156c:	da f7       	brpl	.-10     	; 0x1564 <__floatsisf+0x62>
    156e:	88 0f       	add	r24, r24
    1570:	96 95       	lsr	r25
    1572:	87 95       	ror	r24
    1574:	97 f9       	bld	r25, 7
    1576:	08 95       	ret

00001578 <__fp_cmp>:
    1578:	99 0f       	add	r25, r25
    157a:	00 08       	sbc	r0, r0
    157c:	55 0f       	add	r21, r21
    157e:	aa 0b       	sbc	r26, r26
    1580:	e0 e8       	ldi	r30, 0x80	; 128
    1582:	fe ef       	ldi	r31, 0xFE	; 254
    1584:	16 16       	cp	r1, r22
    1586:	17 06       	cpc	r1, r23
    1588:	e8 07       	cpc	r30, r24
    158a:	f9 07       	cpc	r31, r25
    158c:	c0 f0       	brcs	.+48     	; 0x15be <__fp_cmp+0x46>
    158e:	12 16       	cp	r1, r18
    1590:	13 06       	cpc	r1, r19
    1592:	e4 07       	cpc	r30, r20
    1594:	f5 07       	cpc	r31, r21
    1596:	98 f0       	brcs	.+38     	; 0x15be <__fp_cmp+0x46>
    1598:	62 1b       	sub	r22, r18
    159a:	73 0b       	sbc	r23, r19
    159c:	84 0b       	sbc	r24, r20
    159e:	95 0b       	sbc	r25, r21
    15a0:	39 f4       	brne	.+14     	; 0x15b0 <__fp_cmp+0x38>
    15a2:	0a 26       	eor	r0, r26
    15a4:	61 f0       	breq	.+24     	; 0x15be <__fp_cmp+0x46>
    15a6:	23 2b       	or	r18, r19
    15a8:	24 2b       	or	r18, r20
    15aa:	25 2b       	or	r18, r21
    15ac:	21 f4       	brne	.+8      	; 0x15b6 <__fp_cmp+0x3e>
    15ae:	08 95       	ret
    15b0:	0a 26       	eor	r0, r26
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <__fp_cmp+0x3e>
    15b4:	a1 40       	sbci	r26, 0x01	; 1
    15b6:	a6 95       	lsr	r26
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	81 1d       	adc	r24, r1
    15bc:	81 1d       	adc	r24, r1
    15be:	08 95       	ret

000015c0 <__fp_inf>:
    15c0:	97 f9       	bld	r25, 7
    15c2:	9f 67       	ori	r25, 0x7F	; 127
    15c4:	80 e8       	ldi	r24, 0x80	; 128
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	08 95       	ret

000015cc <__fp_nan>:
    15cc:	9f ef       	ldi	r25, 0xFF	; 255
    15ce:	80 ec       	ldi	r24, 0xC0	; 192
    15d0:	08 95       	ret

000015d2 <__fp_pscA>:
    15d2:	00 24       	eor	r0, r0
    15d4:	0a 94       	dec	r0
    15d6:	16 16       	cp	r1, r22
    15d8:	17 06       	cpc	r1, r23
    15da:	18 06       	cpc	r1, r24
    15dc:	09 06       	cpc	r0, r25
    15de:	08 95       	ret

000015e0 <__fp_pscB>:
    15e0:	00 24       	eor	r0, r0
    15e2:	0a 94       	dec	r0
    15e4:	12 16       	cp	r1, r18
    15e6:	13 06       	cpc	r1, r19
    15e8:	14 06       	cpc	r1, r20
    15ea:	05 06       	cpc	r0, r21
    15ec:	08 95       	ret

000015ee <__fp_round>:
    15ee:	09 2e       	mov	r0, r25
    15f0:	03 94       	inc	r0
    15f2:	00 0c       	add	r0, r0
    15f4:	11 f4       	brne	.+4      	; 0x15fa <__fp_round+0xc>
    15f6:	88 23       	and	r24, r24
    15f8:	52 f0       	brmi	.+20     	; 0x160e <__fp_round+0x20>
    15fa:	bb 0f       	add	r27, r27
    15fc:	40 f4       	brcc	.+16     	; 0x160e <__fp_round+0x20>
    15fe:	bf 2b       	or	r27, r31
    1600:	11 f4       	brne	.+4      	; 0x1606 <__fp_round+0x18>
    1602:	60 ff       	sbrs	r22, 0
    1604:	04 c0       	rjmp	.+8      	; 0x160e <__fp_round+0x20>
    1606:	6f 5f       	subi	r22, 0xFF	; 255
    1608:	7f 4f       	sbci	r23, 0xFF	; 255
    160a:	8f 4f       	sbci	r24, 0xFF	; 255
    160c:	9f 4f       	sbci	r25, 0xFF	; 255
    160e:	08 95       	ret

00001610 <__fp_split3>:
    1610:	57 fd       	sbrc	r21, 7
    1612:	90 58       	subi	r25, 0x80	; 128
    1614:	44 0f       	add	r20, r20
    1616:	55 1f       	adc	r21, r21
    1618:	59 f0       	breq	.+22     	; 0x1630 <__fp_splitA+0x10>
    161a:	5f 3f       	cpi	r21, 0xFF	; 255
    161c:	71 f0       	breq	.+28     	; 0x163a <__fp_splitA+0x1a>
    161e:	47 95       	ror	r20

00001620 <__fp_splitA>:
    1620:	88 0f       	add	r24, r24
    1622:	97 fb       	bst	r25, 7
    1624:	99 1f       	adc	r25, r25
    1626:	61 f0       	breq	.+24     	; 0x1640 <__fp_splitA+0x20>
    1628:	9f 3f       	cpi	r25, 0xFF	; 255
    162a:	79 f0       	breq	.+30     	; 0x164a <__fp_splitA+0x2a>
    162c:	87 95       	ror	r24
    162e:	08 95       	ret
    1630:	12 16       	cp	r1, r18
    1632:	13 06       	cpc	r1, r19
    1634:	14 06       	cpc	r1, r20
    1636:	55 1f       	adc	r21, r21
    1638:	f2 cf       	rjmp	.-28     	; 0x161e <__fp_split3+0xe>
    163a:	46 95       	lsr	r20
    163c:	f1 df       	rcall	.-30     	; 0x1620 <__fp_splitA>
    163e:	08 c0       	rjmp	.+16     	; 0x1650 <__fp_splitA+0x30>
    1640:	16 16       	cp	r1, r22
    1642:	17 06       	cpc	r1, r23
    1644:	18 06       	cpc	r1, r24
    1646:	99 1f       	adc	r25, r25
    1648:	f1 cf       	rjmp	.-30     	; 0x162c <__fp_splitA+0xc>
    164a:	86 95       	lsr	r24
    164c:	71 05       	cpc	r23, r1
    164e:	61 05       	cpc	r22, r1
    1650:	08 94       	sec
    1652:	08 95       	ret

00001654 <__fp_zero>:
    1654:	e8 94       	clt

00001656 <__fp_szero>:
    1656:	bb 27       	eor	r27, r27
    1658:	66 27       	eor	r22, r22
    165a:	77 27       	eor	r23, r23
    165c:	cb 01       	movw	r24, r22
    165e:	97 f9       	bld	r25, 7
    1660:	08 95       	ret

00001662 <__gesf2>:
    1662:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__fp_cmp>
    1666:	08 f4       	brcc	.+2      	; 0x166a <__gesf2+0x8>
    1668:	8f ef       	ldi	r24, 0xFF	; 255
    166a:	08 95       	ret

0000166c <__mulsf3>:
    166c:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3x>
    1670:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_round>
    1674:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__fp_pscA>
    1678:	38 f0       	brcs	.+14     	; 0x1688 <__mulsf3+0x1c>
    167a:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__fp_pscB>
    167e:	20 f0       	brcs	.+8      	; 0x1688 <__mulsf3+0x1c>
    1680:	95 23       	and	r25, r21
    1682:	11 f0       	breq	.+4      	; 0x1688 <__mulsf3+0x1c>
    1684:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_inf>
    1688:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__fp_nan>
    168c:	11 24       	eor	r1, r1
    168e:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_szero>

00001692 <__mulsf3x>:
    1692:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_split3>
    1696:	70 f3       	brcs	.-36     	; 0x1674 <__mulsf3+0x8>

00001698 <__mulsf3_pse>:
    1698:	95 9f       	mul	r25, r21
    169a:	c1 f3       	breq	.-16     	; 0x168c <__mulsf3+0x20>
    169c:	95 0f       	add	r25, r21
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	55 1f       	adc	r21, r21
    16a2:	62 9f       	mul	r22, r18
    16a4:	f0 01       	movw	r30, r0
    16a6:	72 9f       	mul	r23, r18
    16a8:	bb 27       	eor	r27, r27
    16aa:	f0 0d       	add	r31, r0
    16ac:	b1 1d       	adc	r27, r1
    16ae:	63 9f       	mul	r22, r19
    16b0:	aa 27       	eor	r26, r26
    16b2:	f0 0d       	add	r31, r0
    16b4:	b1 1d       	adc	r27, r1
    16b6:	aa 1f       	adc	r26, r26
    16b8:	64 9f       	mul	r22, r20
    16ba:	66 27       	eor	r22, r22
    16bc:	b0 0d       	add	r27, r0
    16be:	a1 1d       	adc	r26, r1
    16c0:	66 1f       	adc	r22, r22
    16c2:	82 9f       	mul	r24, r18
    16c4:	22 27       	eor	r18, r18
    16c6:	b0 0d       	add	r27, r0
    16c8:	a1 1d       	adc	r26, r1
    16ca:	62 1f       	adc	r22, r18
    16cc:	73 9f       	mul	r23, r19
    16ce:	b0 0d       	add	r27, r0
    16d0:	a1 1d       	adc	r26, r1
    16d2:	62 1f       	adc	r22, r18
    16d4:	83 9f       	mul	r24, r19
    16d6:	a0 0d       	add	r26, r0
    16d8:	61 1d       	adc	r22, r1
    16da:	22 1f       	adc	r18, r18
    16dc:	74 9f       	mul	r23, r20
    16de:	33 27       	eor	r19, r19
    16e0:	a0 0d       	add	r26, r0
    16e2:	61 1d       	adc	r22, r1
    16e4:	23 1f       	adc	r18, r19
    16e6:	84 9f       	mul	r24, r20
    16e8:	60 0d       	add	r22, r0
    16ea:	21 1d       	adc	r18, r1
    16ec:	82 2f       	mov	r24, r18
    16ee:	76 2f       	mov	r23, r22
    16f0:	6a 2f       	mov	r22, r26
    16f2:	11 24       	eor	r1, r1
    16f4:	9f 57       	subi	r25, 0x7F	; 127
    16f6:	50 40       	sbci	r21, 0x00	; 0
    16f8:	9a f0       	brmi	.+38     	; 0x1720 <__mulsf3_pse+0x88>
    16fa:	f1 f0       	breq	.+60     	; 0x1738 <__mulsf3_pse+0xa0>
    16fc:	88 23       	and	r24, r24
    16fe:	4a f0       	brmi	.+18     	; 0x1712 <__mulsf3_pse+0x7a>
    1700:	ee 0f       	add	r30, r30
    1702:	ff 1f       	adc	r31, r31
    1704:	bb 1f       	adc	r27, r27
    1706:	66 1f       	adc	r22, r22
    1708:	77 1f       	adc	r23, r23
    170a:	88 1f       	adc	r24, r24
    170c:	91 50       	subi	r25, 0x01	; 1
    170e:	50 40       	sbci	r21, 0x00	; 0
    1710:	a9 f7       	brne	.-22     	; 0x16fc <__mulsf3_pse+0x64>
    1712:	9e 3f       	cpi	r25, 0xFE	; 254
    1714:	51 05       	cpc	r21, r1
    1716:	80 f0       	brcs	.+32     	; 0x1738 <__mulsf3_pse+0xa0>
    1718:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_inf>
    171c:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_szero>
    1720:	5f 3f       	cpi	r21, 0xFF	; 255
    1722:	e4 f3       	brlt	.-8      	; 0x171c <__mulsf3_pse+0x84>
    1724:	98 3e       	cpi	r25, 0xE8	; 232
    1726:	d4 f3       	brlt	.-12     	; 0x171c <__mulsf3_pse+0x84>
    1728:	86 95       	lsr	r24
    172a:	77 95       	ror	r23
    172c:	67 95       	ror	r22
    172e:	b7 95       	ror	r27
    1730:	f7 95       	ror	r31
    1732:	e7 95       	ror	r30
    1734:	9f 5f       	subi	r25, 0xFF	; 255
    1736:	c1 f7       	brne	.-16     	; 0x1728 <__mulsf3_pse+0x90>
    1738:	fe 2b       	or	r31, r30
    173a:	88 0f       	add	r24, r24
    173c:	91 1d       	adc	r25, r1
    173e:	96 95       	lsr	r25
    1740:	87 95       	ror	r24
    1742:	97 f9       	bld	r25, 7
    1744:	08 95       	ret

00001746 <pow>:
    1746:	fa 01       	movw	r30, r20
    1748:	ee 0f       	add	r30, r30
    174a:	ff 1f       	adc	r31, r31
    174c:	30 96       	adiw	r30, 0x00	; 0
    174e:	21 05       	cpc	r18, r1
    1750:	31 05       	cpc	r19, r1
    1752:	a1 f1       	breq	.+104    	; 0x17bc <pow+0x76>
    1754:	61 15       	cp	r22, r1
    1756:	71 05       	cpc	r23, r1
    1758:	61 f4       	brne	.+24     	; 0x1772 <pow+0x2c>
    175a:	80 38       	cpi	r24, 0x80	; 128
    175c:	bf e3       	ldi	r27, 0x3F	; 63
    175e:	9b 07       	cpc	r25, r27
    1760:	49 f1       	breq	.+82     	; 0x17b4 <pow+0x6e>
    1762:	68 94       	set
    1764:	90 38       	cpi	r25, 0x80	; 128
    1766:	81 05       	cpc	r24, r1
    1768:	61 f0       	breq	.+24     	; 0x1782 <pow+0x3c>
    176a:	80 38       	cpi	r24, 0x80	; 128
    176c:	bf ef       	ldi	r27, 0xFF	; 255
    176e:	9b 07       	cpc	r25, r27
    1770:	41 f0       	breq	.+16     	; 0x1782 <pow+0x3c>
    1772:	99 23       	and	r25, r25
    1774:	4a f5       	brpl	.+82     	; 0x17c8 <pow+0x82>
    1776:	ff 3f       	cpi	r31, 0xFF	; 255
    1778:	e1 05       	cpc	r30, r1
    177a:	31 05       	cpc	r19, r1
    177c:	21 05       	cpc	r18, r1
    177e:	19 f1       	breq	.+70     	; 0x17c6 <pow+0x80>
    1780:	e8 94       	clt
    1782:	08 94       	sec
    1784:	e7 95       	ror	r30
    1786:	d9 01       	movw	r26, r18
    1788:	aa 23       	and	r26, r26
    178a:	29 f4       	brne	.+10     	; 0x1796 <pow+0x50>
    178c:	ab 2f       	mov	r26, r27
    178e:	be 2f       	mov	r27, r30
    1790:	f8 5f       	subi	r31, 0xF8	; 248
    1792:	d0 f3       	brcs	.-12     	; 0x1788 <pow+0x42>
    1794:	10 c0       	rjmp	.+32     	; 0x17b6 <pow+0x70>
    1796:	ff 5f       	subi	r31, 0xFF	; 255
    1798:	70 f4       	brcc	.+28     	; 0x17b6 <pow+0x70>
    179a:	a6 95       	lsr	r26
    179c:	e0 f7       	brcc	.-8      	; 0x1796 <pow+0x50>
    179e:	f7 39       	cpi	r31, 0x97	; 151
    17a0:	50 f0       	brcs	.+20     	; 0x17b6 <pow+0x70>
    17a2:	19 f0       	breq	.+6      	; 0x17aa <pow+0x64>
    17a4:	ff 3a       	cpi	r31, 0xAF	; 175
    17a6:	38 f4       	brcc	.+14     	; 0x17b6 <pow+0x70>
    17a8:	9f 77       	andi	r25, 0x7F	; 127
    17aa:	9f 93       	push	r25
    17ac:	0d d0       	rcall	.+26     	; 0x17c8 <pow+0x82>
    17ae:	0f 90       	pop	r0
    17b0:	07 fc       	sbrc	r0, 7
    17b2:	90 58       	subi	r25, 0x80	; 128
    17b4:	08 95       	ret
    17b6:	46 f0       	brts	.+16     	; 0x17c8 <pow+0x82>
    17b8:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__fp_nan>
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	80 e8       	ldi	r24, 0x80	; 128
    17c2:	9f e3       	ldi	r25, 0x3F	; 63
    17c4:	08 95       	ret
    17c6:	4f e7       	ldi	r20, 0x7F	; 127
    17c8:	9f 77       	andi	r25, 0x7F	; 127
    17ca:	5f 93       	push	r21
    17cc:	4f 93       	push	r20
    17ce:	3f 93       	push	r19
    17d0:	2f 93       	push	r18
    17d2:	0e 94 9e 0c 	call	0x193c	; 0x193c <log>
    17d6:	2f 91       	pop	r18
    17d8:	3f 91       	pop	r19
    17da:	4f 91       	pop	r20
    17dc:	5f 91       	pop	r21
    17de:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    17e2:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <exp>
    17e6:	29 f4       	brne	.+10     	; 0x17f2 <pow+0xac>
    17e8:	16 f0       	brts	.+4      	; 0x17ee <pow+0xa8>
    17ea:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_inf>
    17ee:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_zero>
    17f2:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__fp_nan>

000017f6 <exp>:
    17f6:	0e 94 10 0b 	call	0x1620	; 0x1620 <__fp_splitA>
    17fa:	a8 f3       	brcs	.-22     	; 0x17e6 <pow+0xa0>
    17fc:	96 38       	cpi	r25, 0x86	; 134
    17fe:	a0 f7       	brcc	.-24     	; 0x17e8 <pow+0xa2>
    1800:	07 f8       	bld	r0, 7
    1802:	0f 92       	push	r0
    1804:	e8 94       	clt
    1806:	2b e3       	ldi	r18, 0x3B	; 59
    1808:	3a ea       	ldi	r19, 0xAA	; 170
    180a:	48 eb       	ldi	r20, 0xB8	; 184
    180c:	5f e7       	ldi	r21, 0x7F	; 127
    180e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__mulsf3_pse>
    1812:	0f 92       	push	r0
    1814:	0f 92       	push	r0
    1816:	0f 92       	push	r0
    1818:	4d b7       	in	r20, 0x3d	; 61
    181a:	5e b7       	in	r21, 0x3e	; 62
    181c:	0f 92       	push	r0
    181e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <modf>
    1822:	e4 e6       	ldi	r30, 0x64	; 100
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	0e 94 2d 0c 	call	0x185a	; 0x185a <__fp_powser>
    182a:	4f 91       	pop	r20
    182c:	5f 91       	pop	r21
    182e:	ef 91       	pop	r30
    1830:	ff 91       	pop	r31
    1832:	e5 95       	asr	r30
    1834:	ee 1f       	adc	r30, r30
    1836:	ff 1f       	adc	r31, r31
    1838:	49 f0       	breq	.+18     	; 0x184c <exp+0x56>
    183a:	fe 57       	subi	r31, 0x7E	; 126
    183c:	e0 68       	ori	r30, 0x80	; 128
    183e:	44 27       	eor	r20, r20
    1840:	ee 0f       	add	r30, r30
    1842:	44 1f       	adc	r20, r20
    1844:	fa 95       	dec	r31
    1846:	e1 f7       	brne	.-8      	; 0x1840 <exp+0x4a>
    1848:	41 95       	neg	r20
    184a:	55 0b       	sbc	r21, r21
    184c:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <ldexp>
    1850:	0f 90       	pop	r0
    1852:	07 fe       	sbrs	r0, 7
    1854:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <inverse>
    1858:	08 95       	ret

0000185a <__fp_powser>:
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	1f 93       	push	r17
    1860:	0f 93       	push	r16
    1862:	ff 92       	push	r15
    1864:	ef 92       	push	r14
    1866:	df 92       	push	r13
    1868:	7b 01       	movw	r14, r22
    186a:	8c 01       	movw	r16, r24
    186c:	68 94       	set
    186e:	06 c0       	rjmp	.+12     	; 0x187c <__fp_powser+0x22>
    1870:	da 2e       	mov	r13, r26
    1872:	ef 01       	movw	r28, r30
    1874:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3x>
    1878:	fe 01       	movw	r30, r28
    187a:	e8 94       	clt
    187c:	a5 91       	lpm	r26, Z+
    187e:	25 91       	lpm	r18, Z+
    1880:	35 91       	lpm	r19, Z+
    1882:	45 91       	lpm	r20, Z+
    1884:	55 91       	lpm	r21, Z+
    1886:	a6 f3       	brts	.-24     	; 0x1870 <__fp_powser+0x16>
    1888:	ef 01       	movw	r28, r30
    188a:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__addsf3x>
    188e:	fe 01       	movw	r30, r28
    1890:	97 01       	movw	r18, r14
    1892:	a8 01       	movw	r20, r16
    1894:	da 94       	dec	r13
    1896:	69 f7       	brne	.-38     	; 0x1872 <__fp_powser+0x18>
    1898:	df 90       	pop	r13
    189a:	ef 90       	pop	r14
    189c:	ff 90       	pop	r15
    189e:	0f 91       	pop	r16
    18a0:	1f 91       	pop	r17
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <inverse>:
    18a8:	9b 01       	movw	r18, r22
    18aa:	ac 01       	movw	r20, r24
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	80 e8       	ldi	r24, 0x80	; 128
    18b2:	9f e3       	ldi	r25, 0x3F	; 63
    18b4:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__divsf3>
    18b8:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_inf>
    18bc:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__fp_mpack>

000018c0 <ldexp>:
    18c0:	0e 94 10 0b 	call	0x1620	; 0x1620 <__fp_splitA>
    18c4:	d8 f3       	brcs	.-10     	; 0x18bc <inverse+0x14>
    18c6:	99 23       	and	r25, r25
    18c8:	c9 f3       	breq	.-14     	; 0x18bc <inverse+0x14>
    18ca:	94 0f       	add	r25, r20
    18cc:	51 1d       	adc	r21, r1
    18ce:	a3 f3       	brvs	.-24     	; 0x18b8 <inverse+0x10>
    18d0:	91 50       	subi	r25, 0x01	; 1
    18d2:	50 40       	sbci	r21, 0x00	; 0
    18d4:	94 f0       	brlt	.+36     	; 0x18fa <ldexp+0x3a>
    18d6:	59 f0       	breq	.+22     	; 0x18ee <ldexp+0x2e>
    18d8:	88 23       	and	r24, r24
    18da:	32 f0       	brmi	.+12     	; 0x18e8 <ldexp+0x28>
    18dc:	66 0f       	add	r22, r22
    18de:	77 1f       	adc	r23, r23
    18e0:	88 1f       	adc	r24, r24
    18e2:	91 50       	subi	r25, 0x01	; 1
    18e4:	50 40       	sbci	r21, 0x00	; 0
    18e6:	c1 f7       	brne	.-16     	; 0x18d8 <ldexp+0x18>
    18e8:	9e 3f       	cpi	r25, 0xFE	; 254
    18ea:	51 05       	cpc	r21, r1
    18ec:	2c f7       	brge	.-54     	; 0x18b8 <inverse+0x10>
    18ee:	88 0f       	add	r24, r24
    18f0:	91 1d       	adc	r25, r1
    18f2:	96 95       	lsr	r25
    18f4:	87 95       	ror	r24
    18f6:	97 f9       	bld	r25, 7
    18f8:	08 95       	ret
    18fa:	5f 3f       	cpi	r21, 0xFF	; 255
    18fc:	ac f0       	brlt	.+42     	; 0x1928 <ldexp+0x68>
    18fe:	98 3e       	cpi	r25, 0xE8	; 232
    1900:	9c f0       	brlt	.+38     	; 0x1928 <ldexp+0x68>
    1902:	bb 27       	eor	r27, r27
    1904:	86 95       	lsr	r24
    1906:	77 95       	ror	r23
    1908:	67 95       	ror	r22
    190a:	b7 95       	ror	r27
    190c:	08 f4       	brcc	.+2      	; 0x1910 <ldexp+0x50>
    190e:	b1 60       	ori	r27, 0x01	; 1
    1910:	93 95       	inc	r25
    1912:	c1 f7       	brne	.-16     	; 0x1904 <ldexp+0x44>
    1914:	bb 0f       	add	r27, r27
    1916:	58 f7       	brcc	.-42     	; 0x18ee <ldexp+0x2e>
    1918:	11 f4       	brne	.+4      	; 0x191e <ldexp+0x5e>
    191a:	60 ff       	sbrs	r22, 0
    191c:	e8 cf       	rjmp	.-48     	; 0x18ee <ldexp+0x2e>
    191e:	6f 5f       	subi	r22, 0xFF	; 255
    1920:	7f 4f       	sbci	r23, 0xFF	; 255
    1922:	8f 4f       	sbci	r24, 0xFF	; 255
    1924:	9f 4f       	sbci	r25, 0xFF	; 255
    1926:	e3 cf       	rjmp	.-58     	; 0x18ee <ldexp+0x2e>
    1928:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_szero>
    192c:	16 f0       	brts	.+4      	; 0x1932 <ldexp+0x72>
    192e:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__fp_mpack>
    1932:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__fp_nan>
    1936:	68 94       	set
    1938:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_inf>

0000193c <log>:
    193c:	0e 94 10 0b 	call	0x1620	; 0x1620 <__fp_splitA>
    1940:	a8 f3       	brcs	.-22     	; 0x192c <ldexp+0x6c>
    1942:	99 23       	and	r25, r25
    1944:	c1 f3       	breq	.-16     	; 0x1936 <ldexp+0x76>
    1946:	ae f3       	brts	.-22     	; 0x1932 <ldexp+0x72>
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	1f 93       	push	r17
    194e:	0f 93       	push	r16
    1950:	ff 92       	push	r15
    1952:	c9 2f       	mov	r28, r25
    1954:	dd 27       	eor	r29, r29
    1956:	88 23       	and	r24, r24
    1958:	2a f0       	brmi	.+10     	; 0x1964 <log+0x28>
    195a:	21 97       	sbiw	r28, 0x01	; 1
    195c:	66 0f       	add	r22, r22
    195e:	77 1f       	adc	r23, r23
    1960:	88 1f       	adc	r24, r24
    1962:	da f7       	brpl	.-10     	; 0x195a <log+0x1e>
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e8       	ldi	r20, 0x80	; 128
    196a:	5f eb       	ldi	r21, 0xBF	; 191
    196c:	9f e3       	ldi	r25, 0x3F	; 63
    196e:	88 39       	cpi	r24, 0x98	; 152
    1970:	20 f0       	brcs	.+8      	; 0x197a <log+0x3e>
    1972:	80 3e       	cpi	r24, 0xE0	; 224
    1974:	38 f0       	brcs	.+14     	; 0x1984 <log+0x48>
    1976:	21 96       	adiw	r28, 0x01	; 1
    1978:	8f 77       	andi	r24, 0x7F	; 127
    197a:	0e 94 66 09 	call	0x12cc	; 0x12cc <__addsf3>
    197e:	ec e8       	ldi	r30, 0x8C	; 140
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	04 c0       	rjmp	.+8      	; 0x198c <log+0x50>
    1984:	0e 94 66 09 	call	0x12cc	; 0x12cc <__addsf3>
    1988:	e9 eb       	ldi	r30, 0xB9	; 185
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	0e 94 2d 0c 	call	0x185a	; 0x185a <__fp_powser>
    1990:	8b 01       	movw	r16, r22
    1992:	be 01       	movw	r22, r28
    1994:	ec 01       	movw	r28, r24
    1996:	fb 2e       	mov	r15, r27
    1998:	6f 57       	subi	r22, 0x7F	; 127
    199a:	71 09       	sbc	r23, r1
    199c:	75 95       	asr	r23
    199e:	77 1f       	adc	r23, r23
    19a0:	88 0b       	sbc	r24, r24
    19a2:	99 0b       	sbc	r25, r25
    19a4:	0e 94 81 0a 	call	0x1502	; 0x1502 <__floatsisf>
    19a8:	28 e1       	ldi	r18, 0x18	; 24
    19aa:	32 e7       	ldi	r19, 0x72	; 114
    19ac:	41 e3       	ldi	r20, 0x31	; 49
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3x>
    19b4:	af 2d       	mov	r26, r15
    19b6:	98 01       	movw	r18, r16
    19b8:	ae 01       	movw	r20, r28
    19ba:	ff 90       	pop	r15
    19bc:	0f 91       	pop	r16
    19be:	1f 91       	pop	r17
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__addsf3x>
    19c8:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_round>

000019cc <modf>:
    19cc:	fa 01       	movw	r30, r20
    19ce:	dc 01       	movw	r26, r24
    19d0:	aa 0f       	add	r26, r26
    19d2:	bb 1f       	adc	r27, r27
    19d4:	9b 01       	movw	r18, r22
    19d6:	ac 01       	movw	r20, r24
    19d8:	bf 57       	subi	r27, 0x7F	; 127
    19da:	28 f4       	brcc	.+10     	; 0x19e6 <modf+0x1a>
    19dc:	22 27       	eor	r18, r18
    19de:	33 27       	eor	r19, r19
    19e0:	44 27       	eor	r20, r20
    19e2:	50 78       	andi	r21, 0x80	; 128
    19e4:	20 c0       	rjmp	.+64     	; 0x1a26 <modf+0x5a>
    19e6:	b7 51       	subi	r27, 0x17	; 23
    19e8:	90 f4       	brcc	.+36     	; 0x1a0e <modf+0x42>
    19ea:	ab 2f       	mov	r26, r27
    19ec:	00 24       	eor	r0, r0
    19ee:	46 95       	lsr	r20
    19f0:	37 95       	ror	r19
    19f2:	27 95       	ror	r18
    19f4:	01 1c       	adc	r0, r1
    19f6:	a3 95       	inc	r26
    19f8:	d2 f3       	brmi	.-12     	; 0x19ee <modf+0x22>
    19fa:	00 20       	and	r0, r0
    19fc:	71 f0       	breq	.+28     	; 0x1a1a <modf+0x4e>
    19fe:	22 0f       	add	r18, r18
    1a00:	33 1f       	adc	r19, r19
    1a02:	44 1f       	adc	r20, r20
    1a04:	b3 95       	inc	r27
    1a06:	da f3       	brmi	.-10     	; 0x19fe <modf+0x32>
    1a08:	0e d0       	rcall	.+28     	; 0x1a26 <modf+0x5a>
    1a0a:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__subsf3>
    1a0e:	61 30       	cpi	r22, 0x01	; 1
    1a10:	71 05       	cpc	r23, r1
    1a12:	a0 e8       	ldi	r26, 0x80	; 128
    1a14:	8a 07       	cpc	r24, r26
    1a16:	b9 46       	sbci	r27, 0x69	; 105
    1a18:	30 f4       	brcc	.+12     	; 0x1a26 <modf+0x5a>
    1a1a:	9b 01       	movw	r18, r22
    1a1c:	ac 01       	movw	r20, r24
    1a1e:	66 27       	eor	r22, r22
    1a20:	77 27       	eor	r23, r23
    1a22:	88 27       	eor	r24, r24
    1a24:	90 78       	andi	r25, 0x80	; 128
    1a26:	30 96       	adiw	r30, 0x00	; 0
    1a28:	21 f0       	breq	.+8      	; 0x1a32 <modf+0x66>
    1a2a:	20 83       	st	Z, r18
    1a2c:	31 83       	std	Z+1, r19	; 0x01
    1a2e:	42 83       	std	Z+2, r20	; 0x02
    1a30:	53 83       	std	Z+3, r21	; 0x03
    1a32:	08 95       	ret

00001a34 <__fp_mpack>:
    1a34:	9f 3f       	cpi	r25, 0xFF	; 255
    1a36:	31 f0       	breq	.+12     	; 0x1a44 <__fp_mpack_finite+0xc>

00001a38 <__fp_mpack_finite>:
    1a38:	91 50       	subi	r25, 0x01	; 1
    1a3a:	20 f4       	brcc	.+8      	; 0x1a44 <__fp_mpack_finite+0xc>
    1a3c:	87 95       	ror	r24
    1a3e:	77 95       	ror	r23
    1a40:	67 95       	ror	r22
    1a42:	b7 95       	ror	r27
    1a44:	88 0f       	add	r24, r24
    1a46:	91 1d       	adc	r25, r1
    1a48:	96 95       	lsr	r25
    1a4a:	87 95       	ror	r24
    1a4c:	97 f9       	bld	r25, 7
    1a4e:	08 95       	ret

00001a50 <__divmodhi4>:
    1a50:	97 fb       	bst	r25, 7
    1a52:	07 2e       	mov	r0, r23
    1a54:	16 f4       	brtc	.+4      	; 0x1a5a <__divmodhi4+0xa>
    1a56:	00 94       	com	r0
    1a58:	07 d0       	rcall	.+14     	; 0x1a68 <__divmodhi4_neg1>
    1a5a:	77 fd       	sbrc	r23, 7
    1a5c:	09 d0       	rcall	.+18     	; 0x1a70 <__divmodhi4_neg2>
    1a5e:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__udivmodhi4>
    1a62:	07 fc       	sbrc	r0, 7
    1a64:	05 d0       	rcall	.+10     	; 0x1a70 <__divmodhi4_neg2>
    1a66:	3e f4       	brtc	.+14     	; 0x1a76 <__divmodhi4_exit>

00001a68 <__divmodhi4_neg1>:
    1a68:	90 95       	com	r25
    1a6a:	81 95       	neg	r24
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	08 95       	ret

00001a70 <__divmodhi4_neg2>:
    1a70:	70 95       	com	r23
    1a72:	61 95       	neg	r22
    1a74:	7f 4f       	sbci	r23, 0xFF	; 255

00001a76 <__divmodhi4_exit>:
    1a76:	08 95       	ret

00001a78 <__udivmodsi4>:
    1a78:	a1 e2       	ldi	r26, 0x21	; 33
    1a7a:	1a 2e       	mov	r1, r26
    1a7c:	aa 1b       	sub	r26, r26
    1a7e:	bb 1b       	sub	r27, r27
    1a80:	fd 01       	movw	r30, r26
    1a82:	0d c0       	rjmp	.+26     	; 0x1a9e <__udivmodsi4_ep>

00001a84 <__udivmodsi4_loop>:
    1a84:	aa 1f       	adc	r26, r26
    1a86:	bb 1f       	adc	r27, r27
    1a88:	ee 1f       	adc	r30, r30
    1a8a:	ff 1f       	adc	r31, r31
    1a8c:	a2 17       	cp	r26, r18
    1a8e:	b3 07       	cpc	r27, r19
    1a90:	e4 07       	cpc	r30, r20
    1a92:	f5 07       	cpc	r31, r21
    1a94:	20 f0       	brcs	.+8      	; 0x1a9e <__udivmodsi4_ep>
    1a96:	a2 1b       	sub	r26, r18
    1a98:	b3 0b       	sbc	r27, r19
    1a9a:	e4 0b       	sbc	r30, r20
    1a9c:	f5 0b       	sbc	r31, r21

00001a9e <__udivmodsi4_ep>:
    1a9e:	66 1f       	adc	r22, r22
    1aa0:	77 1f       	adc	r23, r23
    1aa2:	88 1f       	adc	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	1a 94       	dec	r1
    1aa8:	69 f7       	brne	.-38     	; 0x1a84 <__udivmodsi4_loop>
    1aaa:	60 95       	com	r22
    1aac:	70 95       	com	r23
    1aae:	80 95       	com	r24
    1ab0:	90 95       	com	r25
    1ab2:	9b 01       	movw	r18, r22
    1ab4:	ac 01       	movw	r20, r24
    1ab6:	bd 01       	movw	r22, r26
    1ab8:	cf 01       	movw	r24, r30
    1aba:	08 95       	ret

00001abc <__tablejump2__>:
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	05 90       	lpm	r0, Z+
    1ac2:	f4 91       	lpm	r31, Z
    1ac4:	e0 2d       	mov	r30, r0
    1ac6:	09 94       	ijmp

00001ac8 <__muluhisi3>:
    1ac8:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__umulhisi3>
    1acc:	a5 9f       	mul	r26, r21
    1ace:	90 0d       	add	r25, r0
    1ad0:	b4 9f       	mul	r27, r20
    1ad2:	90 0d       	add	r25, r0
    1ad4:	a4 9f       	mul	r26, r20
    1ad6:	80 0d       	add	r24, r0
    1ad8:	91 1d       	adc	r25, r1
    1ada:	11 24       	eor	r1, r1
    1adc:	08 95       	ret

00001ade <__umulsidi3>:
    1ade:	e8 94       	clt

00001ae0 <__umulsidi3_helper>:
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	db 01       	movw	r26, r22
    1ae8:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__umulhisi3>
    1aec:	7f 93       	push	r23
    1aee:	6f 93       	push	r22
    1af0:	e9 01       	movw	r28, r18
    1af2:	9a 01       	movw	r18, r20
    1af4:	ac 01       	movw	r20, r24
    1af6:	bf 93       	push	r27
    1af8:	af 93       	push	r26
    1afa:	3f 93       	push	r19
    1afc:	2f 93       	push	r18
    1afe:	df 01       	movw	r26, r30
    1b00:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__umulhisi3>
    1b04:	26 f4       	brtc	.+8      	; 0x1b0e <__umulsidi3_helper+0x2e>
    1b06:	6c 1b       	sub	r22, r28
    1b08:	7d 0b       	sbc	r23, r29
    1b0a:	82 0b       	sbc	r24, r18
    1b0c:	93 0b       	sbc	r25, r19
    1b0e:	9e 01       	movw	r18, r28
    1b10:	eb 01       	movw	r28, r22
    1b12:	fc 01       	movw	r30, r24
    1b14:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__muldi3_6>
    1b18:	af 91       	pop	r26
    1b1a:	bf 91       	pop	r27
    1b1c:	2f 91       	pop	r18
    1b1e:	3f 91       	pop	r19
    1b20:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__muldi3_6>
    1b24:	be 01       	movw	r22, r28
    1b26:	cf 01       	movw	r24, r30
    1b28:	f9 01       	movw	r30, r18
    1b2a:	2f 91       	pop	r18
    1b2c:	3f 91       	pop	r19
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <__ashrdi3>:
    1b34:	97 fb       	bst	r25, 7
    1b36:	10 f8       	bld	r1, 0

00001b38 <__lshrdi3>:
    1b38:	16 94       	lsr	r1
    1b3a:	00 08       	sbc	r0, r0
    1b3c:	0f 93       	push	r16
    1b3e:	08 30       	cpi	r16, 0x08	; 8
    1b40:	98 f0       	brcs	.+38     	; 0x1b68 <__lshrdi3+0x30>
    1b42:	08 50       	subi	r16, 0x08	; 8
    1b44:	23 2f       	mov	r18, r19
    1b46:	34 2f       	mov	r19, r20
    1b48:	45 2f       	mov	r20, r21
    1b4a:	56 2f       	mov	r21, r22
    1b4c:	67 2f       	mov	r22, r23
    1b4e:	78 2f       	mov	r23, r24
    1b50:	89 2f       	mov	r24, r25
    1b52:	90 2d       	mov	r25, r0
    1b54:	f4 cf       	rjmp	.-24     	; 0x1b3e <__lshrdi3+0x6>
    1b56:	05 94       	asr	r0
    1b58:	97 95       	ror	r25
    1b5a:	87 95       	ror	r24
    1b5c:	77 95       	ror	r23
    1b5e:	67 95       	ror	r22
    1b60:	57 95       	ror	r21
    1b62:	47 95       	ror	r20
    1b64:	37 95       	ror	r19
    1b66:	27 95       	ror	r18
    1b68:	0a 95       	dec	r16
    1b6a:	aa f7       	brpl	.-22     	; 0x1b56 <__lshrdi3+0x1e>
    1b6c:	0f 91       	pop	r16
    1b6e:	08 95       	ret

00001b70 <__udivmodhi4>:
    1b70:	aa 1b       	sub	r26, r26
    1b72:	bb 1b       	sub	r27, r27
    1b74:	51 e1       	ldi	r21, 0x11	; 17
    1b76:	07 c0       	rjmp	.+14     	; 0x1b86 <__udivmodhi4_ep>

00001b78 <__udivmodhi4_loop>:
    1b78:	aa 1f       	adc	r26, r26
    1b7a:	bb 1f       	adc	r27, r27
    1b7c:	a6 17       	cp	r26, r22
    1b7e:	b7 07       	cpc	r27, r23
    1b80:	10 f0       	brcs	.+4      	; 0x1b86 <__udivmodhi4_ep>
    1b82:	a6 1b       	sub	r26, r22
    1b84:	b7 0b       	sbc	r27, r23

00001b86 <__udivmodhi4_ep>:
    1b86:	88 1f       	adc	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	5a 95       	dec	r21
    1b8c:	a9 f7       	brne	.-22     	; 0x1b78 <__udivmodhi4_loop>
    1b8e:	80 95       	com	r24
    1b90:	90 95       	com	r25
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	08 95       	ret

00001b98 <__umulhisi3>:
    1b98:	a2 9f       	mul	r26, r18
    1b9a:	b0 01       	movw	r22, r0
    1b9c:	b3 9f       	mul	r27, r19
    1b9e:	c0 01       	movw	r24, r0
    1ba0:	a3 9f       	mul	r26, r19
    1ba2:	70 0d       	add	r23, r0
    1ba4:	81 1d       	adc	r24, r1
    1ba6:	11 24       	eor	r1, r1
    1ba8:	91 1d       	adc	r25, r1
    1baa:	b2 9f       	mul	r27, r18
    1bac:	70 0d       	add	r23, r0
    1bae:	81 1d       	adc	r24, r1
    1bb0:	11 24       	eor	r1, r1
    1bb2:	91 1d       	adc	r25, r1
    1bb4:	08 95       	ret

00001bb6 <__muldi3_6>:
    1bb6:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__umulhisi3>
    1bba:	46 0f       	add	r20, r22
    1bbc:	57 1f       	adc	r21, r23
    1bbe:	c8 1f       	adc	r28, r24
    1bc0:	d9 1f       	adc	r29, r25
    1bc2:	08 f4       	brcc	.+2      	; 0x1bc6 <__muldi3_6+0x10>
    1bc4:	31 96       	adiw	r30, 0x01	; 1
    1bc6:	08 95       	ret

00001bc8 <_exit>:
    1bc8:	f8 94       	cli

00001bca <__stop_program>:
    1bca:	ff cf       	rjmp	.-2      	; 0x1bca <__stop_program>
