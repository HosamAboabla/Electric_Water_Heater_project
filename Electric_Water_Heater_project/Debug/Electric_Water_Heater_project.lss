
Electric_Water_Heater_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000149a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000149a  0000152e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000046  00800062  00800062  00001530  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001560  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cb8  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011b8  00000000  00000000  000045ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e86  00000000  00000000  00005764  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  000075ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d3c  00000000  00000000  00007c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016c4  00000000  00000000  00008994  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000a058  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_1>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	15 04       	cpc	r1, r5
      56:	19 04       	cpc	r1, r9
      58:	1d 04       	cpc	r1, r13
      5a:	21 04       	cpc	r2, r1
      5c:	25 04       	cpc	r2, r5
      5e:	29 04       	cpc	r2, r9
      60:	2d 04       	cpc	r2, r13
      62:	31 04       	cpc	r3, r1

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e9       	ldi	r30, 0x9A	; 154
      78:	f4 e1       	ldi	r31, 0x14	; 20
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a2 36       	cpi	r26, 0x62	; 98
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	20 e0       	ldi	r18, 0x00	; 0
      88:	a2 e6       	ldi	r26, 0x62	; 98
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a8 3a       	cpi	r26, 0xA8	; 168
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
      9a:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <__vector_1>:



//===============================================================================================

ISR(INT0_vect){
      a2:	1f 92       	push	r1
      a4:	0f 92       	push	r0
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	0f 92       	push	r0
      aa:	11 24       	eor	r1, r1
      ac:	2f 93       	push	r18
      ae:	3f 93       	push	r19
      b0:	4f 93       	push	r20
      b2:	5f 93       	push	r21
      b4:	6f 93       	push	r22
      b6:	7f 93       	push	r23
      b8:	8f 93       	push	r24
      ba:	9f 93       	push	r25
      bc:	af 93       	push	r26
      be:	bf 93       	push	r27
      c0:	ef 93       	push	r30
      c2:	ff 93       	push	r31
	power_flag^=1;
      c4:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <power_flag>
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	89 27       	eor	r24, r25
      cc:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <power_flag>
	if(power_flag==0){
      d0:	81 11       	cpse	r24, r1
      d2:	13 c0       	rjmp	.+38     	; 0xfa <__vector_1+0x58>
		LED0_OFF();
      d4:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LED0_OFF>
		LED1_OFF();
      d8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LED1_OFF>
		LED2_OFF();
      dc:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LED2_OFF>
		Timer0_Stop();
      e0:	0e 94 28 06 	call	0xc50	; 0xc50 <Timer0_Stop>
		Timer2_Stop();
      e4:	0e 94 3a 07 	call	0xe74	; 0xe74 <Timer2_Stop>
		first_push_flag=0;
      e8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <first_push_flag>
		SEVSEG_Disable1();
      ec:	0e 94 67 03 	call	0x6ce	; 0x6ce <SEVSEG_Disable1>
		SEVSEG_Disable2();
      f0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <SEVSEG_Disable2>
		SEVSEG_Dot_Disable();
      f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SEVSEG_Dot_Disable>
      f8:	07 c0       	rjmp	.+14     	; 0x108 <__vector_1+0x66>
		//LCD_disable();
	}
	else {
		LED0_ON();
      fa:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED0_ON>
		SEVSEG_Initialization();
      fe:	0e 94 3d 03 	call	0x67a	; 0x67a <SEVSEG_Initialization>
		//LCD_Initialization();
		test=1;	//to reset the counter
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <test>

	}
}
     108:	ff 91       	pop	r31
     10a:	ef 91       	pop	r30
     10c:	bf 91       	pop	r27
     10e:	af 91       	pop	r26
     110:	9f 91       	pop	r25
     112:	8f 91       	pop	r24
     114:	7f 91       	pop	r23
     116:	6f 91       	pop	r22
     118:	5f 91       	pop	r21
     11a:	4f 91       	pop	r20
     11c:	3f 91       	pop	r19
     11e:	2f 91       	pop	r18
     120:	0f 90       	pop	r0
     122:	0f be       	out	0x3f, r0	; 63
     124:	0f 90       	pop	r0
     126:	1f 90       	pop	r1
     128:	18 95       	reti

0000012a <sitting_temp>:

//===============================================================================================


void sitting_temp(uint8_t btn0_read_,uint8_t btn1_read_){		//if user press the button make test = 1 to restart timer
	if(btn0_read_==PRESSED&&degree<75){
     12a:	81 30       	cpi	r24, 0x01	; 1
     12c:	01 f5       	brne	.+64     	; 0x16e <sitting_temp+0x44>
     12e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     132:	9b 34       	cpi	r25, 0x4B	; 75
     134:	e0 f4       	brcc	.+56     	; 0x16e <sitting_temp+0x44>
		degree+=5;
     136:	65 e0       	ldi	r22, 0x05	; 5
     138:	69 0f       	add	r22, r25
     13a:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <degree>
		EEPROM_Write(degree_addr , degree); // Saving desired temperature on EEPROM
     13e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 8a 05 	call	0xb14	; 0xb14 <EEPROM_Write>
		access_flag=1;
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <access_flag>
		test=1;
     14e:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <test>
		Timer0_Stop();
     152:	0e 94 28 06 	call	0xc50	; 0xc50 <Timer0_Stop>
		Timer0_Start(PreS_1024);
     156:	85 e0       	ldi	r24, 0x05	; 5
     158:	0e 94 ca 05 	call	0xb94	; 0xb94 <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     15c:	2f ef       	ldi	r18, 0xFF	; 255
     15e:	48 e8       	ldi	r20, 0x88	; 136
     160:	53 e1       	ldi	r21, 0x13	; 19
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	0e 94 70 06 	call	0xce0	; 0xce0 <Timer0_WithInterrupt_SetDelay>
     16c:	08 95       	ret
	}
	else if(btn1_read_==PRESSED&&degree>35) {
     16e:	61 30       	cpi	r22, 0x01	; 1
     170:	01 f5       	brne	.+64     	; 0x1b2 <sitting_temp+0x88>
     172:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     176:	94 32       	cpi	r25, 0x24	; 36
     178:	e0 f0       	brcs	.+56     	; 0x1b2 <sitting_temp+0x88>
		degree-=5;
     17a:	6b ef       	ldi	r22, 0xFB	; 251
     17c:	69 0f       	add	r22, r25
     17e:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <degree>
		EEPROM_Write(degree_addr , degree); // Saving desired temperature on EEPROM
     182:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 8a 05 	call	0xb14	; 0xb14 <EEPROM_Write>
		access_flag=1;
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <access_flag>
		test=1;
     192:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <test>
		Timer0_Stop();
     196:	0e 94 28 06 	call	0xc50	; 0xc50 <Timer0_Stop>
		Timer0_Start(PreS_1024);
     19a:	85 e0       	ldi	r24, 0x05	; 5
     19c:	0e 94 ca 05 	call	0xb94	; 0xb94 <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     1a0:	2f ef       	ldi	r18, 0xFF	; 255
     1a2:	48 e8       	ldi	r20, 0x88	; 136
     1a4:	53 e1       	ldi	r21, 0x13	; 19
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	0e 94 70 06 	call	0xce0	; 0xce0 <Timer0_WithInterrupt_SetDelay>
     1b0:	08 95       	ret
	}
	else if((btn1_read_==PRESSED&&degree==35)||(btn0_read_==PRESSED&&degree==75)) {
     1b2:	61 30       	cpi	r22, 0x01	; 1
     1b4:	21 f4       	brne	.+8      	; 0x1be <sitting_temp+0x94>
     1b6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <degree>
     1ba:	93 32       	cpi	r25, 0x23	; 35
     1bc:	31 f0       	breq	.+12     	; 0x1ca <sitting_temp+0xa0>
     1be:	81 30       	cpi	r24, 0x01	; 1
     1c0:	a1 f4       	brne	.+40     	; 0x1ea <sitting_temp+0xc0>
     1c2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <degree>
     1c6:	8b 34       	cpi	r24, 0x4B	; 75
     1c8:	81 f4       	brne	.+32     	; 0x1ea <sitting_temp+0xc0>
		test=1;
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <test>
		Timer0_Stop();
     1d0:	0e 94 28 06 	call	0xc50	; 0xc50 <Timer0_Stop>
		Timer0_Start(PreS_1024);
     1d4:	85 e0       	ldi	r24, 0x05	; 5
     1d6:	0e 94 ca 05 	call	0xb94	; 0xb94 <Timer0_Start>
		Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     1da:	2f ef       	ldi	r18, 0xFF	; 255
     1dc:	48 e8       	ldi	r20, 0x88	; 136
     1de:	53 e1       	ldi	r21, 0x13	; 19
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	0e 94 70 06 	call	0xce0	; 0xce0 <Timer0_WithInterrupt_SetDelay>
     1ea:	08 95       	ret

000001ec <main>:
{

	
	

	Interrupt_Initialization(INT0_Signal);
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	0e 94 9f 05 	call	0xb3e	; 0xb3e <Interrupt_Initialization>
	DIO_SetPinPullUp(DIO_PORTD,DIO_PIN2);
     1f2:	62 e0       	ldi	r22, 0x02	; 2
     1f4:	83 e0       	ldi	r24, 0x03	; 3
     1f6:	0e 94 56 05 	call	0xaac	; 0xaac <DIO_SetPinPullUp>
	Timer0_WithInterrupt_Initialization(Normal_Mode,Pin_disconnected);
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	0e 94 32 06 	call	0xc64	; 0xc64 <Timer0_WithInterrupt_Initialization>
	Timer2_WithInterrupt_Initialization(Normal_Mode_ , Pin_disconnected_);
     202:	60 e0       	ldi	r22, 0x00	; 0
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	0e 94 44 07 	call	0xe88	; 0xe88 <Timer2_WithInterrupt_Initialization>

	// Timer1_with_interrupt_initialization(TIMER1_Normal , TIMER1_PIN_Disconnected,TIMER1_Channel_A);
	// Timer1_start(TIMER1_Prescaler_1024);
	// Timer1_with_interrupt_setDelay(TIMER1_Normal , 100 , 255);
	ADC_Initialization(ADC1);
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	0e 94 0c 04 	call	0x818	; 0x818 <ADC_Initialization>
	BTN0_Initialization();
     210:	0e 94 aa 03 	call	0x754	; 0x754 <BTN0_Initialization>
	BTN1_Initialization();
     214:	0e 94 bf 03 	call	0x77e	; 0x77e <BTN1_Initialization>
	LED0_Initialization();
     218:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <LED0_Initialization>
	LED1_Initialization();
     21c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <LED1_Initialization>
	LED2_Initialization();
     220:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LED2_Initialization>
	Relay_Initialization();
     224:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Relay_Initialization>

	
	/* Replace with your application code */
	while (1)
	{
		btn1_read_ = BTN1_Read();	//get button1 read
     228:	0e 94 c5 03 	call	0x78a	; 0x78a <BTN1_Read>
     22c:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <btn1_read_>
		btn0_read_ =BTN0_Read();	//get button0 read
     230:	0e 94 b4 03 	call	0x768	; 0x768 <BTN0_Read>
     234:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <btn0_read_>
		

		//check if the device is on or off
		if (power_flag==0);	//if off do noting
     238:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <power_flag>
     23c:	88 23       	and	r24, r24
     23e:	a1 f3       	breq	.-24     	; 0x228 <main+0x3c>
		else{	//if on start operations
			if (access_flag==1)
     240:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <access_flag>
     244:	81 30       	cpi	r24, 0x01	; 1
     246:	39 f4       	brne	.+14     	; 0x256 <main+0x6a>
			{
				degree=EEPROM_Read(degree_addr);
     248:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 96 05 	call	0xb2c	; 0xb2c <EEPROM_Read>
     252:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <degree>
			}
			Timer2_Start(PreS_1024_);	//start timer2 to get the ADC read every 100 ms
     256:	85 e0       	ldi	r24, 0x05	; 5
     258:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <Timer2_Start>
			Timer2_WithInterrupt_SetDelay(Normal_Mode_ , 100 , 255);
     25c:	2f ef       	ldi	r18, 0xFF	; 255
     25e:	44 e6       	ldi	r20, 0x64	; 100
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 81 07 	call	0xf02	; 0xf02 <Timer2_WithInterrupt_SetDelay>

			if((first_push_flag==0&&btn0_read_==PRESSED)||(first_push_flag==0&&btn1_read_==PRESSED)){	//check if buttons are clicked for the first time to enter setting mode
     26c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <first_push_flag>
     270:	81 11       	cpse	r24, r1
     272:	19 c0       	rjmp	.+50     	; 0x2a6 <main+0xba>
     274:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <btn0_read_>
     278:	81 30       	cpi	r24, 0x01	; 1
     27a:	21 f0       	breq	.+8      	; 0x284 <main+0x98>
     27c:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <btn1_read_>
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	89 f4       	brne	.+34     	; 0x2a6 <main+0xba>
				first_push_flag=1;	//raise the flag
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <first_push_flag>
				blink_7_segment = 1;
     28a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <blink_7_segment>
				Timer0_Start(PreS_1024);	//start timer0 so that if 5 seconds spend without using buttons ,exit setting mode
     28e:	85 e0       	ldi	r24, 0x05	; 5
     290:	0e 94 ca 05 	call	0xb94	; 0xb94 <Timer0_Start>
				Timer0_WithInterrupt_SetDelay(Normal_Mode,5000,255);
     294:	2f ef       	ldi	r18, 0xFF	; 255
     296:	48 e8       	ldi	r20, 0x88	; 136
     298:	53 e1       	ldi	r21, 0x13	; 19
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	0e 94 70 06 	call	0xce0	; 0xce0 <Timer0_WithInterrupt_SetDelay>
     2a4:	0c c0       	rjmp	.+24     	; 0x2be <main+0xd2>
				// btn1_read_=0;
				// btn0_read_=0;
			}
			else
			{	//if this isn't the first click call the function of setting mode
				if( (btn0_read_==PRESSED) ||(btn1_read_==PRESSED) ){
     2a6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <btn0_read_>
     2aa:	81 30       	cpi	r24, 0x01	; 1
     2ac:	21 f0       	breq	.+8      	; 0x2b6 <main+0xca>
     2ae:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <btn1_read_>
     2b2:	91 30       	cpi	r25, 0x01	; 1
     2b4:	21 f4       	brne	.+8      	; 0x2be <main+0xd2>
					sitting_temp(btn0_read_,btn1_read_);
     2b6:	60 91 a7 00 	lds	r22, 0x00A7	; 0x8000a7 <btn1_read_>
     2ba:	0e 94 95 00 	call	0x12a	; 0x12a <sitting_temp>
					
				}
			}
			//compare the current temp with set_temp
			
			if (current_temp >= degree - 5 && current_temp <= degree + 5)
     2be:	c0 91 61 00 	lds	r28, 0x0061	; 0x800061 <degree>
     2c2:	d0 e0       	ldi	r29, 0x00	; 0
     2c4:	be 01       	movw	r22, r28
     2c6:	65 50       	subi	r22, 0x05	; 5
     2c8:	71 09       	sbc	r23, r1
     2ca:	07 2e       	mov	r0, r23
     2cc:	00 0c       	add	r0, r0
     2ce:	88 0b       	sbc	r24, r24
     2d0:	99 0b       	sbc	r25, r25
     2d2:	0e 94 95 08 	call	0x112a	; 0x112a <__floatsisf>
     2d6:	4b 01       	movw	r8, r22
     2d8:	5c 01       	movw	r10, r24
     2da:	c0 90 81 00 	lds	r12, 0x0081	; 0x800081 <current_temp>
     2de:	d0 90 82 00 	lds	r13, 0x0082	; 0x800082 <current_temp+0x1>
     2e2:	e0 90 83 00 	lds	r14, 0x0083	; 0x800083 <current_temp+0x2>
     2e6:	f0 90 84 00 	lds	r15, 0x0084	; 0x800084 <current_temp+0x3>
     2ea:	a7 01       	movw	r20, r14
     2ec:	96 01       	movw	r18, r12
     2ee:	0e 94 ed 07 	call	0xfda	; 0xfda <__cmpsf2>
     2f2:	18 16       	cp	r1, r24
     2f4:	4c f1       	brlt	.+82     	; 0x348 <main+0x15c>
     2f6:	be 01       	movw	r22, r28
     2f8:	6b 5f       	subi	r22, 0xFB	; 251
     2fa:	7f 4f       	sbci	r23, 0xFF	; 255
     2fc:	07 2e       	mov	r0, r23
     2fe:	00 0c       	add	r0, r0
     300:	88 0b       	sbc	r24, r24
     302:	99 0b       	sbc	r25, r25
     304:	0e 94 95 08 	call	0x112a	; 0x112a <__floatsisf>
     308:	9b 01       	movw	r18, r22
     30a:	ac 01       	movw	r20, r24
     30c:	c7 01       	movw	r24, r14
     30e:	b6 01       	movw	r22, r12
     310:	0e 94 ed 07 	call	0xfda	; 0xfda <__cmpsf2>
     314:	18 16       	cp	r1, r24
     316:	c4 f0       	brlt	.+48     	; 0x348 <main+0x15c>
			{
				LED1_OFF(); // Heating element off
     318:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LED1_OFF>
				LED2_OFF(); // Cooling element off
     31c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LED2_OFF>
				heat_flag=0;	//raise flag of heating element
     320:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <heat_flag>
				if (relay_flag==0)
     324:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <relay_flag>
     328:	81 11       	cpse	r24, r1
     32a:	37 c0       	rjmp	.+110    	; 0x39a <main+0x1ae>
				{
					Relay_ON();
     32c:	0e 94 00 04 	call	0x800	; 0x800 <Relay_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     330:	8f e3       	ldi	r24, 0x3F	; 63
     332:	9c e9       	ldi	r25, 0x9C	; 156
     334:	01 97       	sbiw	r24, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <main+0x148>
     338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x14e>
     33a:	00 00       	nop
					_delay_ms(10);
					Relay_OFF();
     33c:	0e 94 06 04 	call	0x80c	; 0x80c <Relay_OFF>
					relay_flag=1;
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <relay_flag>
     346:	29 c0       	rjmp	.+82     	; 0x39a <main+0x1ae>
				}

			}
			else if(current_temp<degree-5){
     348:	a7 01       	movw	r20, r14
     34a:	96 01       	movw	r18, r12
     34c:	c5 01       	movw	r24, r10
     34e:	b4 01       	movw	r22, r8
     350:	0e 94 45 09 	call	0x128a	; 0x128a <__gesf2>
     354:	18 16       	cp	r1, r24
     356:	44 f4       	brge	.+16     	; 0x368 <main+0x17c>
				heat_flag=1;	//raise flag of heating element
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <heat_flag>
				relay_flag=0;
     35e:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <relay_flag>
				//LED1_ON(); // Heating element on
				LED2_OFF(); // Cooling element off
     362:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LED2_OFF>
     366:	19 c0       	rjmp	.+50     	; 0x39a <main+0x1ae>
			}
			else if (current_temp>degree+5)
     368:	be 01       	movw	r22, r28
     36a:	6b 5f       	subi	r22, 0xFB	; 251
     36c:	7f 4f       	sbci	r23, 0xFF	; 255
     36e:	07 2e       	mov	r0, r23
     370:	00 0c       	add	r0, r0
     372:	88 0b       	sbc	r24, r24
     374:	99 0b       	sbc	r25, r25
     376:	0e 94 95 08 	call	0x112a	; 0x112a <__floatsisf>
     37a:	9b 01       	movw	r18, r22
     37c:	ac 01       	movw	r20, r24
     37e:	c7 01       	movw	r24, r14
     380:	b6 01       	movw	r22, r12
     382:	0e 94 45 09 	call	0x128a	; 0x128a <__gesf2>
     386:	18 16       	cp	r1, r24
     388:	44 f4       	brge	.+16     	; 0x39a <main+0x1ae>
			{
				heat_flag=0;	//raise flag of heating element
     38a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <heat_flag>
				relay_flag=0;
     38e:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <relay_flag>
				LED1_OFF(); // Heating element off
     392:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LED1_OFF>
				LED2_ON(); // Cooling element on
     396:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LED2_ON>
			}
			
			
			if (first_push_flag==0)
     39a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <first_push_flag>
     39e:	81 11       	cpse	r24, r1
     3a0:	43 cf       	rjmp	.-378    	; 0x228 <main+0x3c>
			{
				// LCD_Clear();
				// LCD_Write_Number(current_temp);
				SEVSEG_Display(current_temp);
     3a2:	60 91 81 00 	lds	r22, 0x0081	; 0x800081 <current_temp>
     3a6:	70 91 82 00 	lds	r23, 0x0082	; 0x800082 <current_temp+0x1>
     3aa:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <current_temp+0x2>
     3ae:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <current_temp+0x3>
     3b2:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fixunssfsi>
     3b6:	86 2f       	mov	r24, r22
     3b8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <SEVSEG_Display>
     3bc:	35 cf       	rjmp	.-406    	; 0x228 <main+0x3c>

000003be <calcualate_avg_temp>:

//===============================================================================================


float calcualate_avg_temp(uint16_t* arr)
{
     3be:	ac 01       	movw	r20, r24
	uint16_t sum = 0;
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     3c0:	90 e0       	ldi	r25, 0x00	; 0
//===============================================================================================


float calcualate_avg_temp(uint16_t* arr)
{
	uint16_t sum = 0;
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	70 e0       	ldi	r23, 0x00	; 0
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     3c6:	0b c0       	rjmp	.+22     	; 0x3de <calcualate_avg_temp+0x20>
	{
		sum += arr[i];
     3c8:	e9 2f       	mov	r30, r25
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	ee 0f       	add	r30, r30
     3ce:	ff 1f       	adc	r31, r31
     3d0:	e4 0f       	add	r30, r20
     3d2:	f5 1f       	adc	r31, r21
     3d4:	20 81       	ld	r18, Z
     3d6:	31 81       	ldd	r19, Z+1	; 0x01
     3d8:	62 0f       	add	r22, r18
     3da:	73 1f       	adc	r23, r19

float calcualate_avg_temp(uint16_t* arr)
{
	uint16_t sum = 0;
	
	for(uint8_t i = 0 ; i < 10 ; i++)
     3dc:	9f 5f       	subi	r25, 0xFF	; 255
     3de:	9a 30       	cpi	r25, 0x0A	; 10
     3e0:	98 f3       	brcs	.-26     	; 0x3c8 <calcualate_avg_temp+0xa>
	{
		sum += arr[i];
	}
	
	return (float ) sum / (float ) 10;
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 93 08 	call	0x1126	; 0x1126 <__floatunsisf>
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	40 e2       	ldi	r20, 0x20	; 32
     3f0:	51 e4       	ldi	r21, 0x41	; 65
     3f2:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__divsf3>
}
     3f6:	08 95       	ret

000003f8 <__vector_11>:

//===============================================================================================



ISR(TIMER0_OVF_vect){
     3f8:	1f 92       	push	r1
     3fa:	0f 92       	push	r0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	0f 92       	push	r0
     400:	11 24       	eor	r1, r1
     402:	4f 92       	push	r4
     404:	5f 92       	push	r5
     406:	6f 92       	push	r6
     408:	7f 92       	push	r7
     40a:	8f 92       	push	r8
     40c:	9f 92       	push	r9
     40e:	af 92       	push	r10
     410:	bf 92       	push	r11
     412:	cf 92       	push	r12
     414:	df 92       	push	r13
     416:	ef 92       	push	r14
     418:	ff 92       	push	r15
     41a:	0f 93       	push	r16
     41c:	2f 93       	push	r18
     41e:	3f 93       	push	r19
     420:	4f 93       	push	r20
     422:	5f 93       	push	r21
     424:	6f 93       	push	r22
     426:	7f 93       	push	r23
     428:	8f 93       	push	r24
     42a:	9f 93       	push	r25
     42c:	af 93       	push	r26
     42e:	bf 93       	push	r27
     430:	ef 93       	push	r30
     432:	ff 93       	push	r31
	
	static uint32_t cnt=0;
	if(test==1){	//restart count from 0 if user press the buttons
     434:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <test>
     438:	81 30       	cpi	r24, 0x01	; 1
     43a:	61 f4       	brne	.+24     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
		cnt=0;
     43c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.2132>
     440:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.2132+0x1>
     444:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <cnt.2132+0x2>
     448:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <cnt.2132+0x3>
		test=0;
     44c:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <test>
		blink_7_segment=1;
     450:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <blink_7_segment>
	}
	if( blink_7_segment )
     454:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <blink_7_segment>
     458:	88 23       	and	r24, r24
     45a:	39 f0       	breq	.+14     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
	{
		SEVSEG_Initialization();
     45c:	0e 94 3d 03 	call	0x67a	; 0x67a <SEVSEG_Initialization>
		SEVSEG_Display(degree);
     460:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <degree>
     464:	0e 94 7f 03 	call	0x6fe	; 0x6fe <SEVSEG_Display>
     468:	04 c0       	rjmp	.+8      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
	}
	else
	{
		SEVSEG_Disable1();
     46a:	0e 94 67 03 	call	0x6ce	; 0x6ce <SEVSEG_Disable1>
		SEVSEG_Disable2();
     46e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <SEVSEG_Disable2>
	}

	if(cnt==Number_OVF){		//if counter reach number of overflows
     472:	40 90 66 00 	lds	r4, 0x0066	; 0x800066 <cnt.2132>
     476:	50 90 67 00 	lds	r5, 0x0067	; 0x800067 <cnt.2132+0x1>
     47a:	60 90 68 00 	lds	r6, 0x0068	; 0x800068 <cnt.2132+0x2>
     47e:	70 90 69 00 	lds	r7, 0x0069	; 0x800069 <cnt.2132+0x3>
     482:	60 91 92 00 	lds	r22, 0x0092	; 0x800092 <Number_OVF>
     486:	70 91 93 00 	lds	r23, 0x0093	; 0x800093 <Number_OVF+0x1>
     48a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <Number_OVF+0x2>
     48e:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <Number_OVF+0x3>
     492:	46 16       	cp	r4, r22
     494:	57 06       	cpc	r5, r23
     496:	68 06       	cpc	r6, r24
     498:	79 06       	cpc	r7, r25
     49a:	89 f4       	brne	.+34     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		SEVSEG_Initialization();
     49c:	0e 94 3d 03 	call	0x67a	; 0x67a <SEVSEG_Initialization>
		Timer0_Stop();			//stop the timer
     4a0:	0e 94 28 06 	call	0xc50	; 0xc50 <Timer0_Stop>
		first_push_flag=0;
     4a4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <first_push_flag>
		blink_7_segment=0;
     4a8:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <blink_7_segment>
		cnt=0;					//make  counter =0
     4ac:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.2132>
     4b0:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.2132+0x1>
     4b4:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <cnt.2132+0x2>
     4b8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <cnt.2132+0x3>
     4bc:	25 c0       	rjmp	.+74     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
	}
	
	else if(cnt%(Number_OVF/5)==0){
     4be:	2d ec       	ldi	r18, 0xCD	; 205
     4c0:	3c ec       	ldi	r19, 0xCC	; 204
     4c2:	4c ec       	ldi	r20, 0xCC	; 204
     4c4:	5c ec       	ldi	r21, 0xCC	; 204
     4c6:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__umulsidi3>
     4ca:	00 e2       	ldi	r16, 0x20	; 32
     4cc:	0e 94 17 0a 	call	0x142e	; 0x142e <__lshrdi3>
     4d0:	82 2e       	mov	r8, r18
     4d2:	93 2e       	mov	r9, r19
     4d4:	a4 2e       	mov	r10, r20
     4d6:	b5 2e       	mov	r11, r21
     4d8:	a5 01       	movw	r20, r10
     4da:	94 01       	movw	r18, r8
     4dc:	56 95       	lsr	r21
     4de:	47 95       	ror	r20
     4e0:	37 95       	ror	r19
     4e2:	27 95       	ror	r18
     4e4:	56 95       	lsr	r21
     4e6:	47 95       	ror	r20
     4e8:	37 95       	ror	r19
     4ea:	27 95       	ror	r18
     4ec:	c3 01       	movw	r24, r6
     4ee:	b2 01       	movw	r22, r4
     4f0:	0e 94 b7 09 	call	0x136e	; 0x136e <__udivmodsi4>
     4f4:	67 2b       	or	r22, r23
     4f6:	68 2b       	or	r22, r24
     4f8:	69 2b       	or	r22, r25
     4fa:	31 f4       	brne	.+12     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
		//LCD_Write_Number(degree);
		//SEVSEG_Display(degree);
		blink_7_segment ^= 1;
     4fc:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <blink_7_segment>
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	89 27       	eor	r24, r25
     504:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <blink_7_segment>

	}
	
	cnt++;
     508:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cnt.2132>
     50c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cnt.2132+0x1>
     510:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <cnt.2132+0x2>
     514:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <cnt.2132+0x3>
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	a1 1d       	adc	r26, r1
     51c:	b1 1d       	adc	r27, r1
     51e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <cnt.2132>
     522:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <cnt.2132+0x1>
     526:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <cnt.2132+0x2>
     52a:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <cnt.2132+0x3>
}
     52e:	ff 91       	pop	r31
     530:	ef 91       	pop	r30
     532:	bf 91       	pop	r27
     534:	af 91       	pop	r26
     536:	9f 91       	pop	r25
     538:	8f 91       	pop	r24
     53a:	7f 91       	pop	r23
     53c:	6f 91       	pop	r22
     53e:	5f 91       	pop	r21
     540:	4f 91       	pop	r20
     542:	3f 91       	pop	r19
     544:	2f 91       	pop	r18
     546:	0f 91       	pop	r16
     548:	ff 90       	pop	r15
     54a:	ef 90       	pop	r14
     54c:	df 90       	pop	r13
     54e:	cf 90       	pop	r12
     550:	bf 90       	pop	r11
     552:	af 90       	pop	r10
     554:	9f 90       	pop	r9
     556:	8f 90       	pop	r8
     558:	7f 90       	pop	r7
     55a:	6f 90       	pop	r6
     55c:	5f 90       	pop	r5
     55e:	4f 90       	pop	r4
     560:	0f 90       	pop	r0
     562:	0f be       	out	0x3f, r0	; 63
     564:	0f 90       	pop	r0
     566:	1f 90       	pop	r1
     568:	18 95       	reti

0000056a <__vector_5>:

//===============================================================================================


ISR(TIMER2_OVF_vect)
{
     56a:	1f 92       	push	r1
     56c:	0f 92       	push	r0
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	0f 92       	push	r0
     572:	11 24       	eor	r1, r1
     574:	2f 93       	push	r18
     576:	3f 93       	push	r19
     578:	4f 93       	push	r20
     57a:	5f 93       	push	r21
     57c:	6f 93       	push	r22
     57e:	7f 93       	push	r23
     580:	8f 93       	push	r24
     582:	9f 93       	push	r25
     584:	af 93       	push	r26
     586:	bf 93       	push	r27
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	ef 93       	push	r30
     58e:	ff 93       	push	r31
	else
	{
	SEVSEG_Display(current_temp);
	}
	*/
	if(timer2_count < Timer2_OVF)
     590:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     594:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
     598:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <__data_end+0x2>
     59c:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <__data_end+0x3>
     5a0:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <Timer2_OVF>
     5a4:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <Timer2_OVF+0x1>
     5a8:	60 91 a2 00 	lds	r22, 0x00A2	; 0x8000a2 <Timer2_OVF+0x2>
     5ac:	70 91 a3 00 	lds	r23, 0x00A3	; 0x8000a3 <Timer2_OVF+0x3>
     5b0:	84 17       	cp	r24, r20
     5b2:	95 07       	cpc	r25, r21
     5b4:	a6 07       	cpc	r26, r22
     5b6:	b7 07       	cpc	r27, r23
     5b8:	60 f4       	brcc	.+24     	; 0x5d2 <__vector_5+0x68>
	{
		timer2_count++;
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	a1 1d       	adc	r26, r1
     5be:	b1 1d       	adc	r27, r1
     5c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
     5c4:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
     5c8:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <__data_end+0x2>
     5cc:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <__data_end+0x3>
     5d0:	41 c0       	rjmp	.+130    	; 0x654 <__vector_5+0xea>
	}
	else
	{
		// ADC read
		last_10_temp[temp_index] = (500.0 * ADC_Read()) / 1024.0 ; // degree
     5d2:	c0 91 6c 00 	lds	r28, 0x006C	; 0x80006c <temp_index>
     5d6:	d0 e0       	ldi	r29, 0x00	; 0
     5d8:	0e 94 38 04 	call	0x870	; 0x870 <ADC_Read>
     5dc:	bc 01       	movw	r22, r24
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 93 08 	call	0x1126	; 0x1126 <__floatunsisf>
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	4a ef       	ldi	r20, 0xFA	; 250
     5ec:	53 e4       	ldi	r21, 0x43	; 67
     5ee:	0e 94 4a 09 	call	0x1294	; 0x1294 <__mulsf3>
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	40 e8       	ldi	r20, 0x80	; 128
     5f8:	5a e3       	ldi	r21, 0x3A	; 58
     5fa:	0e 94 4a 09 	call	0x1294	; 0x1294 <__mulsf3>
     5fe:	cc 0f       	add	r28, r28
     600:	dd 1f       	adc	r29, r29
     602:	c3 59       	subi	r28, 0x93	; 147
     604:	df 4f       	sbci	r29, 0xFF	; 255
     606:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fixunssfsi>
     60a:	79 83       	std	Y+1, r23	; 0x01
     60c:	68 83       	st	Y, r22
		temp_index++;
     60e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <temp_index>
     612:	8f 5f       	subi	r24, 0xFF	; 255
     614:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <temp_index>

		if(temp_index > 9)
     618:	8a 30       	cpi	r24, 0x0A	; 10
     61a:	a0 f0       	brcs	.+40     	; 0x644 <__vector_5+0xda>
		{
			temp_index = 0;
     61c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <temp_index>
			current_temp=calcualate_avg_temp(last_10_temp);
     620:	8d e6       	ldi	r24, 0x6D	; 109
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 df 01 	call	0x3be	; 0x3be <calcualate_avg_temp>
     628:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <current_temp>
     62c:	70 93 82 00 	sts	0x0082, r23	; 0x800082 <current_temp+0x1>
     630:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <current_temp+0x2>
     634:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <current_temp+0x3>
			if (heat_flag==1)
     638:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <heat_flag>
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	11 f4       	brne	.+4      	; 0x644 <__vector_5+0xda>
			{
				LED1_TGL();
     640:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <LED1_TGL>
			}


		}
		timer2_count = 0;
     644:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
     648:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
     64c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
     650:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>

	}
}
     654:	ff 91       	pop	r31
     656:	ef 91       	pop	r30
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	bf 91       	pop	r27
     65e:	af 91       	pop	r26
     660:	9f 91       	pop	r25
     662:	8f 91       	pop	r24
     664:	7f 91       	pop	r23
     666:	6f 91       	pop	r22
     668:	5f 91       	pop	r21
     66a:	4f 91       	pop	r20
     66c:	3f 91       	pop	r19
     66e:	2f 91       	pop	r18
     670:	0f 90       	pop	r0
     672:	0f be       	out	0x3f, r0	; 63
     674:	0f 90       	pop	r0
     676:	1f 90       	pop	r1
     678:	18 95       	reti

0000067a <SEVSEG_Initialization>:
{
	DIO_SetPinValue(SEVSEG_CTRL_PORT, SEVSEG_PIN_EN2, SEVSEG_LOW);
}
void SEVSEG_Dot_Enable(void)//Enable dot
{
	DIO_SetPinValue(SEVSEG_CTRL_PORT, SEVSEG_PIN_DOT, SEVSEG_HIGH);
     67a:	41 e0       	ldi	r20, 0x01	; 1
     67c:	61 e0       	ldi	r22, 0x01	; 1
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	0e 94 40 04 	call	0x880	; 0x880 <DIO_SetPinDirection>
     684:	41 e0       	ldi	r20, 0x01	; 1
     686:	62 e0       	ldi	r22, 0x02	; 2
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	0e 94 40 04 	call	0x880	; 0x880 <DIO_SetPinDirection>
     68e:	41 e0       	ldi	r20, 0x01	; 1
     690:	64 e0       	ldi	r22, 0x04	; 4
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	0e 94 40 04 	call	0x880	; 0x880 <DIO_SetPinDirection>
     698:	41 e0       	ldi	r20, 0x01	; 1
     69a:	65 e0       	ldi	r22, 0x05	; 5
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	0e 94 40 04 	call	0x880	; 0x880 <DIO_SetPinDirection>
     6a2:	41 e0       	ldi	r20, 0x01	; 1
     6a4:	66 e0       	ldi	r22, 0x06	; 6
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 40 04 	call	0x880	; 0x880 <DIO_SetPinDirection>
     6ac:	41 e0       	ldi	r20, 0x01	; 1
     6ae:	67 e0       	ldi	r22, 0x07	; 7
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	0e 94 40 04 	call	0x880	; 0x880 <DIO_SetPinDirection>
     6b6:	41 e0       	ldi	r20, 0x01	; 1
     6b8:	63 e0       	ldi	r22, 0x03	; 3
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	0e 94 40 04 	call	0x880	; 0x880 <DIO_SetPinDirection>
     6c0:	08 95       	ret

000006c2 <SEVSEG_Enable1>:
     6c2:	41 e0       	ldi	r20, 0x01	; 1
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	0e 94 b1 04 	call	0x962	; 0x962 <DIO_SetPinValue>
     6cc:	08 95       	ret

000006ce <SEVSEG_Disable1>:
     6ce:	40 e0       	ldi	r20, 0x00	; 0
     6d0:	61 e0       	ldi	r22, 0x01	; 1
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	0e 94 b1 04 	call	0x962	; 0x962 <DIO_SetPinValue>
     6d8:	08 95       	ret

000006da <SEVSEG_Enable2>:
     6da:	41 e0       	ldi	r20, 0x01	; 1
     6dc:	62 e0       	ldi	r22, 0x02	; 2
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 b1 04 	call	0x962	; 0x962 <DIO_SetPinValue>
     6e4:	08 95       	ret

000006e6 <SEVSEG_Disable2>:
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	62 e0       	ldi	r22, 0x02	; 2
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	0e 94 b1 04 	call	0x962	; 0x962 <DIO_SetPinValue>
     6f0:	08 95       	ret

000006f2 <SEVSEG_Dot_Disable>:
}
void SEVSEG_Dot_Disable(void)//Disable dot
{
	DIO_SetPinValue(SEVSEG_CTRL_PORT, SEVSEG_PIN_DOT, SEVSEG_LOW);
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	63 e0       	ldi	r22, 0x03	; 3
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	0e 94 b1 04 	call	0x962	; 0x962 <DIO_SetPinValue>
     6fc:	08 95       	ret

000006fe <SEVSEG_Display>:
}
void SEVSEG_Display(uint8_t number)
{
     6fe:	cf 93       	push	r28
	uint8_t num1 = number%10;
     700:	9d ec       	ldi	r25, 0xCD	; 205
     702:	89 9f       	mul	r24, r25
     704:	91 2d       	mov	r25, r1
     706:	11 24       	eor	r1, r1
     708:	29 2f       	mov	r18, r25
     70a:	26 95       	lsr	r18
     70c:	26 95       	lsr	r18
     70e:	26 95       	lsr	r18
     710:	22 0f       	add	r18, r18
     712:	32 2f       	mov	r19, r18
     714:	33 0f       	add	r19, r19
     716:	33 0f       	add	r19, r19
     718:	23 0f       	add	r18, r19
     71a:	82 1b       	sub	r24, r18
     71c:	28 2f       	mov	r18, r24
	uint8_t num2 = number/10;
     71e:	c9 2f       	mov	r28, r25
     720:	c6 95       	lsr	r28
     722:	c6 95       	lsr	r28
     724:	c6 95       	lsr	r28
	PORTA = (num1 << 4);
     726:	22 95       	swap	r18
     728:	20 7f       	andi	r18, 0xF0	; 240
     72a:	2b bb       	out	0x1b, r18	; 27
	SEVSEG_Enable1();
     72c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <SEVSEG_Enable1>
	SEVSEG_Disable2();
     730:	0e 94 73 03 	call	0x6e6	; 0x6e6 <SEVSEG_Disable2>
     734:	8f e9       	ldi	r24, 0x9F	; 159
     736:	9f e0       	ldi	r25, 0x0F	; 15
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	f1 f7       	brne	.-4      	; 0x738 <SEVSEG_Display+0x3a>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <SEVSEG_Display+0x40>
     73e:	00 00       	nop
	_delay_ms(1);
	PORTA = (num2 << 4);
     740:	9c 2f       	mov	r25, r28
     742:	92 95       	swap	r25
     744:	90 7f       	andi	r25, 0xF0	; 240
     746:	9b bb       	out	0x1b, r25	; 27
	SEVSEG_Disable1();
     748:	0e 94 67 03 	call	0x6ce	; 0x6ce <SEVSEG_Disable1>
	SEVSEG_Enable2();
     74c:	0e 94 6d 03 	call	0x6da	; 0x6da <SEVSEG_Enable2>

     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <BTN0_Initialization>:
#include "PushBTN0.h"


void BTN0_Initialization(void)
{
	DIO_SetPinDirection(BTN0_PORT, BTN0_PIN, BTN0_INP);
     754:	40 e0       	ldi	r20, 0x00	; 0
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	0e 94 40 04 	call	0x880	; 0x880 <DIO_SetPinDirection>
	DIO_SetPinPullUp(BTN0_PORT , BTN0_PIN);
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	0e 94 56 05 	call	0xaac	; 0xaac <DIO_SetPinPullUp>
     766:	08 95       	ret

00000768 <BTN0_Read>:

uint8_t BTN0_Read(void)
{
	uint8_t Btn = NPRESSED;
	uint8_t val = 0;
	val = DIO_ReadPinValue(BTN0_PORT, BTN0_PIN);
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	0e 94 22 05 	call	0xa44	; 0xa44 <DIO_ReadPinValue>
     770:	ef e3       	ldi	r30, 0x3F	; 63
     772:	fc e9       	ldi	r31, 0x9C	; 156
     774:	31 97       	sbiw	r30, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <BTN0_Read+0xc>
     778:	00 c0       	rjmp	.+0      	; 0x77a <BTN0_Read+0x12>
     77a:	00 00       	nop
	{
		Btn = DIO_ReadPinValue(BTN0_PORT, BTN0_PIN);
	}
	_delay_ms(10);
	return val;
}
     77c:	08 95       	ret

0000077e <BTN1_Initialization>:
#include "PushBTN1.h"


void BTN1_Initialization(void)
{
	DIO_SetPinDirection(BTN1_PORT, BTN1_PIN, BTN1_INP);
     77e:	40 e0       	ldi	r20, 0x00	; 0
     780:	66 e0       	ldi	r22, 0x06	; 6
     782:	83 e0       	ldi	r24, 0x03	; 3
     784:	0e 94 40 04 	call	0x880	; 0x880 <DIO_SetPinDirection>
     788:	08 95       	ret

0000078a <BTN1_Read>:

uint8_t BTN1_Read(void)
{
	uint8_t Btn = NPRESSED;
	uint8_t val = 0;
	val = DIO_ReadPinValue(BTN1_PORT, BTN1_PIN);
     78a:	66 e0       	ldi	r22, 0x06	; 6
     78c:	83 e0       	ldi	r24, 0x03	; 3
     78e:	0e 94 22 05 	call	0xa44	; 0xa44 <DIO_ReadPinValue>
     792:	ef e3       	ldi	r30, 0x3F	; 63
     794:	fc e9       	ldi	r31, 0x9C	; 156
     796:	31 97       	sbiw	r30, 0x01	; 1
     798:	f1 f7       	brne	.-4      	; 0x796 <BTN1_Read+0xc>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <BTN1_Read+0x12>
     79c:	00 00       	nop
	{
		Btn = DIO_ReadPinValue(BTN1_PORT, BTN1_PIN);
	}
	_delay_ms(10);
	return val;
}
     79e:	08 95       	ret

000007a0 <LED0_Initialization>:
#include "LED0.h"

void LED0_Initialization(void)
{
	//SET_BIT(LED0_DDR, LED0);
	DIO_SetPinDirection(LED0_PORT, LED0, LED0_OUT);
     7a0:	41 e0       	ldi	r20, 0x01	; 1
     7a2:	62 e0       	ldi	r22, 0x02	; 2
     7a4:	82 e0       	ldi	r24, 0x02	; 2
     7a6:	0e 94 40 04 	call	0x880	; 0x880 <DIO_SetPinDirection>
     7aa:	08 95       	ret

000007ac <LED0_ON>:
}
void LED0_ON(void)
{
	//SET_BIT(LED0_PORT, LED0);
	DIO_SetPinValue(LED0_PORT, LED0, LED0_ONN);
     7ac:	41 e0       	ldi	r20, 0x01	; 1
     7ae:	62 e0       	ldi	r22, 0x02	; 2
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	0e 94 b1 04 	call	0x962	; 0x962 <DIO_SetPinValue>
     7b6:	08 95       	ret

000007b8 <LED0_OFF>:
}
void LED0_OFF(void)
{
	//CLR_BIT(LED0_PORT, LED0);
	DIO_SetPinValue(LED0_PORT, LED0, LED0_OFFF);
     7b8:	40 e0       	ldi	r20, 0x00	; 0
     7ba:	62 e0       	ldi	r22, 0x02	; 2
     7bc:	82 e0       	ldi	r24, 0x02	; 2
     7be:	0e 94 b1 04 	call	0x962	; 0x962 <DIO_SetPinValue>
     7c2:	08 95       	ret

000007c4 <LED1_Initialization>:
{
	SET_BIT(LED1_DDR, LED1);
}
void LED1_ON(void)
{
	SET_BIT(LED1_PORT, LED1);
     7c4:	84 b3       	in	r24, 0x14	; 20
     7c6:	80 68       	ori	r24, 0x80	; 128
     7c8:	84 bb       	out	0x14, r24	; 20
     7ca:	08 95       	ret

000007cc <LED1_OFF>:
}
void LED1_OFF(void)
{
	CLR_BIT(LED1_PORT, LED1);
     7cc:	85 b3       	in	r24, 0x15	; 21
     7ce:	8f 77       	andi	r24, 0x7F	; 127
     7d0:	85 bb       	out	0x15, r24	; 21
     7d2:	08 95       	ret

000007d4 <LED1_TGL>:
}
void LED1_TGL(void)
{
	TGL_BIT(LED1_PORT, LED1);
     7d4:	85 b3       	in	r24, 0x15	; 21
     7d6:	80 58       	subi	r24, 0x80	; 128
     7d8:	85 bb       	out	0x15, r24	; 21
     7da:	08 95       	ret

000007dc <LED2_Initialization>:
 */ 
#include "LED2.h"

void LED2_Initialization(void)
{
	SET_BIT(LED2_DDR, LED2);
     7dc:	81 b3       	in	r24, 0x11	; 17
     7de:	88 60       	ori	r24, 0x08	; 8
     7e0:	81 bb       	out	0x11, r24	; 17
     7e2:	08 95       	ret

000007e4 <LED2_ON>:
}
void LED2_ON(void)
{
	SET_BIT(LED2_PORT, LED2);
     7e4:	82 b3       	in	r24, 0x12	; 18
     7e6:	88 60       	ori	r24, 0x08	; 8
     7e8:	82 bb       	out	0x12, r24	; 18
     7ea:	08 95       	ret

000007ec <LED2_OFF>:
}
void LED2_OFF(void)
{
	CLR_BIT(LED2_PORT, LED2);
     7ec:	82 b3       	in	r24, 0x12	; 18
     7ee:	87 7f       	andi	r24, 0xF7	; 247
     7f0:	82 bb       	out	0x12, r24	; 18
     7f2:	08 95       	ret

000007f4 <Relay_Initialization>:
#include "Relay.h"


void Relay_Initialization(void)
{
	DIO_SetPinDirection(RELAY_PORT, RELAY_PIN, RELAY_OUT);
     7f4:	41 e0       	ldi	r20, 0x01	; 1
     7f6:	62 e0       	ldi	r22, 0x02	; 2
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	0e 94 40 04 	call	0x880	; 0x880 <DIO_SetPinDirection>
     7fe:	08 95       	ret

00000800 <Relay_ON>:
}
void Relay_ON(void)
{
	DIO_SetPinValue(RELAY_PORT, RELAY_PIN, RELAY_HIGH);
     800:	41 e0       	ldi	r20, 0x01	; 1
     802:	62 e0       	ldi	r22, 0x02	; 2
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	0e 94 b1 04 	call	0x962	; 0x962 <DIO_SetPinValue>
     80a:	08 95       	ret

0000080c <Relay_OFF>:
}
void Relay_OFF(void)
{
	DIO_SetPinValue(RELAY_PORT, RELAY_PIN, RELAY_LOW);
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	62 e0       	ldi	r22, 0x02	; 2
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	0e 94 b1 04 	call	0x962	; 0x962 <DIO_SetPinValue>
     816:	08 95       	ret

00000818 <ADC_Initialization>:
	/*
	1- Select voltage refernce
	2- Select left or right adjust
	3- Select chanel (1)
	*/
	switch(chanel)
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	88 30       	cpi	r24, 0x08	; 8
     81c:	91 05       	cpc	r25, r1
     81e:	20 f5       	brcc	.+72     	; 0x868 <__stack+0x9>
     820:	fc 01       	movw	r30, r24
     822:	e6 5d       	subi	r30, 0xD6	; 214
     824:	ff 4f       	sbci	r31, 0xFF	; 255
     826:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__tablejump2__>
	{
		case ADC0:
		ADMUX |= 0b01000000;//0x40
     82a:	87 b1       	in	r24, 0x07	; 7
     82c:	80 64       	ori	r24, 0x40	; 64
     82e:	87 b9       	out	0x07, r24	; 7
		break;
     830:	1b c0       	rjmp	.+54     	; 0x868 <__stack+0x9>
		case ADC1:
		ADMUX |= 0b01000001;//0x41
     832:	87 b1       	in	r24, 0x07	; 7
     834:	81 64       	ori	r24, 0x41	; 65
     836:	87 b9       	out	0x07, r24	; 7
		break;
     838:	17 c0       	rjmp	.+46     	; 0x868 <__stack+0x9>
		case ADC2:
		ADMUX |= 0b01000010;//0x42
     83a:	87 b1       	in	r24, 0x07	; 7
     83c:	82 64       	ori	r24, 0x42	; 66
     83e:	87 b9       	out	0x07, r24	; 7
		break;
     840:	13 c0       	rjmp	.+38     	; 0x868 <__stack+0x9>
		case ADC3:
		ADMUX |= 0b01000011;//0x43
     842:	87 b1       	in	r24, 0x07	; 7
     844:	83 64       	ori	r24, 0x43	; 67
     846:	87 b9       	out	0x07, r24	; 7
		break;
     848:	0f c0       	rjmp	.+30     	; 0x868 <__stack+0x9>
		case ADC4:
		ADMUX |= 0b01000100;//0x44
     84a:	87 b1       	in	r24, 0x07	; 7
     84c:	84 64       	ori	r24, 0x44	; 68
     84e:	87 b9       	out	0x07, r24	; 7
		break;
     850:	0b c0       	rjmp	.+22     	; 0x868 <__stack+0x9>
		case ADC5:
		ADMUX |= 0b01000101;//0x45
     852:	87 b1       	in	r24, 0x07	; 7
     854:	85 64       	ori	r24, 0x45	; 69
     856:	87 b9       	out	0x07, r24	; 7
		break;
     858:	07 c0       	rjmp	.+14     	; 0x868 <__stack+0x9>
		case ADC6:
		ADMUX |= 0b01000110;//0x46
     85a:	87 b1       	in	r24, 0x07	; 7
     85c:	86 64       	ori	r24, 0x46	; 70
     85e:	87 b9       	out	0x07, r24	; 7
		break;
     860:	03 c0       	rjmp	.+6      	; 0x868 <__stack+0x9>
		case ADC7:
		ADMUX |= 0b01000111;//0x47
     862:	87 b1       	in	r24, 0x07	; 7
     864:	87 64       	ori	r24, 0x47	; 71
     866:	87 b9       	out	0x07, r24	; 7
	/*
	1- Auto trigger mode
	2- Select prescaler
	3- enable ADC
	*/
	ADCSRA |= 0b10100111;//0xA7
     868:	86 b1       	in	r24, 0x06	; 6
     86a:	87 6a       	ori	r24, 0xA7	; 167
     86c:	86 b9       	out	0x06, r24	; 6
     86e:	08 95       	ret

00000870 <ADC_Read>:
}

uint16_t ADC_Read(void)
{
	uint16_t data = 0;
	SET_BIT(ADCSRA, ADSC);
     870:	86 b1       	in	r24, 0x06	; 6
     872:	80 64       	ori	r24, 0x40	; 64
     874:	86 b9       	out	0x06, r24	; 6
	while(GET_BIT(ADCSRA, ADIF) != 1);//wait until conversion finished
     876:	34 9b       	sbis	0x06, 4	; 6
     878:	fe cf       	rjmp	.-4      	; 0x876 <ADC_Read+0x6>
	data = ADC_DATA;
     87a:	84 b1       	in	r24, 0x04	; 4
     87c:	95 b1       	in	r25, 0x05	; 5
	return data;
     87e:	08 95       	ret

00000880 <DIO_SetPinDirection>:
		break;
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
		break;
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
     880:	44 23       	and	r20, r20
     882:	19 f0       	breq	.+6      	; 0x88a <DIO_SetPinDirection+0xa>
     884:	41 30       	cpi	r20, 0x01	; 1
     886:	c9 f1       	breq	.+114    	; 0x8fa <DIO_SetPinDirection+0x7a>
     888:	08 95       	ret
     88a:	81 30       	cpi	r24, 0x01	; 1
     88c:	91 f0       	breq	.+36     	; 0x8b2 <DIO_SetPinDirection+0x32>
     88e:	28 f0       	brcs	.+10     	; 0x89a <DIO_SetPinDirection+0x1a>
     890:	82 30       	cpi	r24, 0x02	; 2
     892:	d9 f0       	breq	.+54     	; 0x8ca <DIO_SetPinDirection+0x4a>
     894:	83 30       	cpi	r24, 0x03	; 3
     896:	29 f1       	breq	.+74     	; 0x8e2 <DIO_SetPinDirection+0x62>
     898:	08 95       	ret
     89a:	2a b3       	in	r18, 0x1a	; 26
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <DIO_SetPinDirection+0x26>
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	6a 95       	dec	r22
     8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <DIO_SetPinDirection+0x22>
     8aa:	80 95       	com	r24
     8ac:	82 23       	and	r24, r18
     8ae:	8a bb       	out	0x1a, r24	; 26
     8b0:	08 95       	ret
     8b2:	27 b3       	in	r18, 0x17	; 23
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <DIO_SetPinDirection+0x3e>
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	6a 95       	dec	r22
     8c0:	e2 f7       	brpl	.-8      	; 0x8ba <DIO_SetPinDirection+0x3a>
     8c2:	80 95       	com	r24
     8c4:	82 23       	and	r24, r18
     8c6:	87 bb       	out	0x17, r24	; 23
     8c8:	08 95       	ret
     8ca:	24 b3       	in	r18, 0x14	; 20
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <DIO_SetPinDirection+0x56>
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	6a 95       	dec	r22
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <DIO_SetPinDirection+0x52>
     8da:	80 95       	com	r24
     8dc:	82 23       	and	r24, r18
     8de:	84 bb       	out	0x14, r24	; 20
     8e0:	08 95       	ret
     8e2:	21 b3       	in	r18, 0x11	; 17
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <DIO_SetPinDirection+0x6e>
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	6a 95       	dec	r22
     8f0:	e2 f7       	brpl	.-8      	; 0x8ea <DIO_SetPinDirection+0x6a>
     8f2:	80 95       	com	r24
     8f4:	82 23       	and	r24, r18
     8f6:	81 bb       	out	0x11, r24	; 17
     8f8:	08 95       	ret
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	89 f0       	breq	.+34     	; 0x920 <DIO_SetPinDirection+0xa0>
     8fe:	28 f0       	brcs	.+10     	; 0x90a <DIO_SetPinDirection+0x8a>
     900:	82 30       	cpi	r24, 0x02	; 2
     902:	c9 f0       	breq	.+50     	; 0x936 <DIO_SetPinDirection+0xb6>
     904:	83 30       	cpi	r24, 0x03	; 3
     906:	11 f1       	breq	.+68     	; 0x94c <DIO_SetPinDirection+0xcc>
     908:	08 95       	ret
     90a:	2a b3       	in	r18, 0x1a	; 26
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	02 c0       	rjmp	.+4      	; 0x916 <DIO_SetPinDirection+0x96>
     912:	88 0f       	add	r24, r24
     914:	99 1f       	adc	r25, r25
     916:	6a 95       	dec	r22
     918:	e2 f7       	brpl	.-8      	; 0x912 <DIO_SetPinDirection+0x92>
     91a:	82 2b       	or	r24, r18
     91c:	8a bb       	out	0x1a, r24	; 26
     91e:	08 95       	ret
     920:	27 b3       	in	r18, 0x17	; 23
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	02 c0       	rjmp	.+4      	; 0x92c <DIO_SetPinDirection+0xac>
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	6a 95       	dec	r22
     92e:	e2 f7       	brpl	.-8      	; 0x928 <DIO_SetPinDirection+0xa8>
     930:	82 2b       	or	r24, r18
     932:	87 bb       	out	0x17, r24	; 23
     934:	08 95       	ret
     936:	24 b3       	in	r18, 0x14	; 20
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	02 c0       	rjmp	.+4      	; 0x942 <DIO_SetPinDirection+0xc2>
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	6a 95       	dec	r22
     944:	e2 f7       	brpl	.-8      	; 0x93e <DIO_SetPinDirection+0xbe>
     946:	82 2b       	or	r24, r18
     948:	84 bb       	out	0x14, r24	; 20
     94a:	08 95       	ret
     94c:	21 b3       	in	r18, 0x11	; 17
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	02 c0       	rjmp	.+4      	; 0x958 <DIO_SetPinDirection+0xd8>
     954:	88 0f       	add	r24, r24
     956:	99 1f       	adc	r25, r25
     958:	6a 95       	dec	r22
     95a:	e2 f7       	brpl	.-8      	; 0x954 <DIO_SetPinDirection+0xd4>
     95c:	82 2b       	or	r24, r18
     95e:	81 bb       	out	0x11, r24	; 17
     960:	08 95       	ret

00000962 <DIO_SetPinValue>:
     962:	44 23       	and	r20, r20
     964:	19 f0       	breq	.+6      	; 0x96c <DIO_SetPinValue+0xa>
     966:	41 30       	cpi	r20, 0x01	; 1
     968:	c9 f1       	breq	.+114    	; 0x9dc <DIO_SetPinValue+0x7a>
     96a:	08 95       	ret
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	91 f0       	breq	.+36     	; 0x994 <DIO_SetPinValue+0x32>
     970:	28 f0       	brcs	.+10     	; 0x97c <DIO_SetPinValue+0x1a>
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	d9 f0       	breq	.+54     	; 0x9ac <DIO_SetPinValue+0x4a>
     976:	83 30       	cpi	r24, 0x03	; 3
     978:	29 f1       	breq	.+74     	; 0x9c4 <DIO_SetPinValue+0x62>
     97a:	08 95       	ret
     97c:	2b b3       	in	r18, 0x1b	; 27
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	02 c0       	rjmp	.+4      	; 0x988 <DIO_SetPinValue+0x26>
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	6a 95       	dec	r22
     98a:	e2 f7       	brpl	.-8      	; 0x984 <DIO_SetPinValue+0x22>
     98c:	80 95       	com	r24
     98e:	82 23       	and	r24, r18
     990:	8b bb       	out	0x1b, r24	; 27
     992:	08 95       	ret
     994:	28 b3       	in	r18, 0x18	; 24
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <DIO_SetPinValue+0x3e>
     99c:	88 0f       	add	r24, r24
     99e:	99 1f       	adc	r25, r25
     9a0:	6a 95       	dec	r22
     9a2:	e2 f7       	brpl	.-8      	; 0x99c <DIO_SetPinValue+0x3a>
     9a4:	80 95       	com	r24
     9a6:	82 23       	and	r24, r18
     9a8:	88 bb       	out	0x18, r24	; 24
     9aa:	08 95       	ret
     9ac:	25 b3       	in	r18, 0x15	; 21
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <DIO_SetPinValue+0x56>
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	6a 95       	dec	r22
     9ba:	e2 f7       	brpl	.-8      	; 0x9b4 <DIO_SetPinValue+0x52>
     9bc:	80 95       	com	r24
     9be:	82 23       	and	r24, r18
     9c0:	85 bb       	out	0x15, r24	; 21
     9c2:	08 95       	ret
     9c4:	22 b3       	in	r18, 0x12	; 18
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <DIO_SetPinValue+0x6e>
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	6a 95       	dec	r22
     9d2:	e2 f7       	brpl	.-8      	; 0x9cc <DIO_SetPinValue+0x6a>
     9d4:	80 95       	com	r24
     9d6:	82 23       	and	r24, r18
     9d8:	82 bb       	out	0x12, r24	; 18
     9da:	08 95       	ret
     9dc:	81 30       	cpi	r24, 0x01	; 1
     9de:	89 f0       	breq	.+34     	; 0xa02 <DIO_SetPinValue+0xa0>
     9e0:	28 f0       	brcs	.+10     	; 0x9ec <DIO_SetPinValue+0x8a>
     9e2:	82 30       	cpi	r24, 0x02	; 2
     9e4:	c9 f0       	breq	.+50     	; 0xa18 <DIO_SetPinValue+0xb6>
     9e6:	83 30       	cpi	r24, 0x03	; 3
     9e8:	11 f1       	breq	.+68     	; 0xa2e <DIO_SetPinValue+0xcc>
     9ea:	08 95       	ret
     9ec:	2b b3       	in	r18, 0x1b	; 27
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <DIO_SetPinValue+0x96>
     9f4:	88 0f       	add	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	6a 95       	dec	r22
     9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <DIO_SetPinValue+0x92>
     9fc:	82 2b       	or	r24, r18
     9fe:	8b bb       	out	0x1b, r24	; 27
     a00:	08 95       	ret
     a02:	28 b3       	in	r18, 0x18	; 24
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <DIO_SetPinValue+0xac>
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	6a 95       	dec	r22
     a10:	e2 f7       	brpl	.-8      	; 0xa0a <DIO_SetPinValue+0xa8>
     a12:	82 2b       	or	r24, r18
     a14:	88 bb       	out	0x18, r24	; 24
     a16:	08 95       	ret
     a18:	25 b3       	in	r18, 0x15	; 21
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <DIO_SetPinValue+0xc2>
     a20:	88 0f       	add	r24, r24
     a22:	99 1f       	adc	r25, r25
     a24:	6a 95       	dec	r22
     a26:	e2 f7       	brpl	.-8      	; 0xa20 <DIO_SetPinValue+0xbe>
     a28:	82 2b       	or	r24, r18
     a2a:	85 bb       	out	0x15, r24	; 21
     a2c:	08 95       	ret
     a2e:	22 b3       	in	r18, 0x12	; 18
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <DIO_SetPinValue+0xd8>
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	6a 95       	dec	r22
     a3c:	e2 f7       	brpl	.-8      	; 0xa36 <DIO_SetPinValue+0xd4>
     a3e:	82 2b       	or	r24, r18
     a40:	82 bb       	out	0x12, r24	; 18
     a42:	08 95       	ret

00000a44 <DIO_ReadPinValue>:
     a44:	ef e3       	ldi	r30, 0x3F	; 63
     a46:	fc e9       	ldi	r31, 0x9C	; 156
     a48:	31 97       	sbiw	r30, 0x01	; 1
     a4a:	f1 f7       	brne	.-4      	; 0xa48 <DIO_ReadPinValue+0x4>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <DIO_ReadPinValue+0xa>
     a4e:	00 00       	nop
//If pin is defined as input
uint8_t DIO_ReadPinValue (Port port, Pin pin)
{
	uint8_t reading = 0;
	_delay_ms(10);
	switch (port)
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	79 f0       	breq	.+30     	; 0xa72 <DIO_ReadPinValue+0x2e>
     a54:	28 f0       	brcs	.+10     	; 0xa60 <DIO_ReadPinValue+0x1c>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	a9 f0       	breq	.+42     	; 0xa84 <DIO_ReadPinValue+0x40>
     a5a:	83 30       	cpi	r24, 0x03	; 3
     a5c:	e1 f0       	breq	.+56     	; 0xa96 <DIO_ReadPinValue+0x52>
     a5e:	24 c0       	rjmp	.+72     	; 0xaa8 <DIO_ReadPinValue+0x64>
	{
		case DIO_PORTA:
		reading = GET_BIT(PINA, pin);
     a60:	89 b3       	in	r24, 0x19	; 25
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <DIO_ReadPinValue+0x26>
     a66:	95 95       	asr	r25
     a68:	87 95       	ror	r24
     a6a:	6a 95       	dec	r22
     a6c:	e2 f7       	brpl	.-8      	; 0xa66 <DIO_ReadPinValue+0x22>
     a6e:	81 70       	andi	r24, 0x01	; 1
		break;
     a70:	08 95       	ret
		case DIO_PORTB:
		reading = GET_BIT(PINB, pin);
     a72:	86 b3       	in	r24, 0x16	; 22
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <DIO_ReadPinValue+0x38>
     a78:	95 95       	asr	r25
     a7a:	87 95       	ror	r24
     a7c:	6a 95       	dec	r22
     a7e:	e2 f7       	brpl	.-8      	; 0xa78 <DIO_ReadPinValue+0x34>
     a80:	81 70       	andi	r24, 0x01	; 1
		break;
     a82:	08 95       	ret
		case DIO_PORTC:
		reading = GET_BIT(PINC, pin);
     a84:	83 b3       	in	r24, 0x13	; 19
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <DIO_ReadPinValue+0x4a>
     a8a:	95 95       	asr	r25
     a8c:	87 95       	ror	r24
     a8e:	6a 95       	dec	r22
     a90:	e2 f7       	brpl	.-8      	; 0xa8a <DIO_ReadPinValue+0x46>
     a92:	81 70       	andi	r24, 0x01	; 1
		break;
     a94:	08 95       	ret
		case DIO_PORTD:
		reading = GET_BIT(PIND, pin);
     a96:	80 b3       	in	r24, 0x10	; 16
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <DIO_ReadPinValue+0x5c>
     a9c:	95 95       	asr	r25
     a9e:	87 95       	ror	r24
     aa0:	6a 95       	dec	r22
     aa2:	e2 f7       	brpl	.-8      	; 0xa9c <DIO_ReadPinValue+0x58>
     aa4:	81 70       	andi	r24, 0x01	; 1
		break;
     aa6:	08 95       	ret
	}
}
//If pin is defined as input
uint8_t DIO_ReadPinValue (Port port, Pin pin)
{
	uint8_t reading = 0;
     aa8:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTD:
		reading = GET_BIT(PIND, pin);
		break;
	}
	return reading;
}
     aaa:	08 95       	ret

00000aac <DIO_SetPinPullUp>:
void DIO_SetPinPullUp (Port port, Pin pin)
{
	switch (port)
     aac:	81 30       	cpi	r24, 0x01	; 1
     aae:	89 f0       	breq	.+34     	; 0xad2 <DIO_SetPinPullUp+0x26>
     ab0:	28 f0       	brcs	.+10     	; 0xabc <DIO_SetPinPullUp+0x10>
     ab2:	82 30       	cpi	r24, 0x02	; 2
     ab4:	c9 f0       	breq	.+50     	; 0xae8 <DIO_SetPinPullUp+0x3c>
     ab6:	83 30       	cpi	r24, 0x03	; 3
     ab8:	11 f1       	breq	.+68     	; 0xafe <DIO_SetPinPullUp+0x52>
     aba:	08 95       	ret
	{
		case DIO_PORTA:
		SET_BIT(PORTA, pin);
     abc:	2b b3       	in	r18, 0x1b	; 27
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <DIO_SetPinPullUp+0x1c>
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	6a 95       	dec	r22
     aca:	e2 f7       	brpl	.-8      	; 0xac4 <DIO_SetPinPullUp+0x18>
     acc:	82 2b       	or	r24, r18
     ace:	8b bb       	out	0x1b, r24	; 27
		break;
     ad0:	08 95       	ret
		case DIO_PORTB:
		SET_BIT(PORTB, pin);
     ad2:	28 b3       	in	r18, 0x18	; 24
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	02 c0       	rjmp	.+4      	; 0xade <DIO_SetPinPullUp+0x32>
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	6a 95       	dec	r22
     ae0:	e2 f7       	brpl	.-8      	; 0xada <DIO_SetPinPullUp+0x2e>
     ae2:	82 2b       	or	r24, r18
     ae4:	88 bb       	out	0x18, r24	; 24
		break;
     ae6:	08 95       	ret
		case DIO_PORTC:
		SET_BIT(PORTC, pin);
     ae8:	25 b3       	in	r18, 0x15	; 21
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <DIO_SetPinPullUp+0x48>
     af0:	88 0f       	add	r24, r24
     af2:	99 1f       	adc	r25, r25
     af4:	6a 95       	dec	r22
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <DIO_SetPinPullUp+0x44>
     af8:	82 2b       	or	r24, r18
     afa:	85 bb       	out	0x15, r24	; 21
		break;
     afc:	08 95       	ret
		case DIO_PORTD:
		SET_BIT(PORTD, pin);
     afe:	22 b3       	in	r18, 0x12	; 18
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <DIO_SetPinPullUp+0x5e>
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	6a 95       	dec	r22
     b0c:	e2 f7       	brpl	.-8      	; 0xb06 <DIO_SetPinPullUp+0x5a>
     b0e:	82 2b       	or	r24, r18
     b10:	82 bb       	out	0x12, r24	; 18
     b12:	08 95       	ret

00000b14 <EEPROM_Write>:
#include "EEPROM.h"

void EEPROM_Write(uint16_t address , uint8_t data)
{
	// Wait for completion of previous write 
	while(EECR & (1<<EEWE));
     b14:	e1 99       	sbic	0x1c, 1	; 28
     b16:	fe cf       	rjmp	.-4      	; 0xb14 <EEPROM_Write>
	/* Set up address and data registers */
	EEAR = address;
     b18:	9f bb       	out	0x1f, r25	; 31
     b1a:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
     b1c:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     b1e:	8c b3       	in	r24, 0x1c	; 28
     b20:	84 60       	ori	r24, 0x04	; 4
     b22:	8c bb       	out	0x1c, r24	; 28
	/* Start EEPROM write by setting EEWE */
	EECR |= (1<<EEWE);
     b24:	8c b3       	in	r24, 0x1c	; 28
     b26:	82 60       	ori	r24, 0x02	; 2
     b28:	8c bb       	out	0x1c, r24	; 28
     b2a:	08 95       	ret

00000b2c <EEPROM_Read>:
}

uint8_t EEPROM_Read(uint16_t adderss)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     b2c:	e1 99       	sbic	0x1c, 1	; 28
     b2e:	fe cf       	rjmp	.-4      	; 0xb2c <EEPROM_Read>
	/* Set up address register */
	EEAR = adderss;
     b30:	9f bb       	out	0x1f, r25	; 31
     b32:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1<<EERE);
     b34:	8c b3       	in	r24, 0x1c	; 28
     b36:	81 60       	ori	r24, 0x01	; 1
     b38:	8c bb       	out	0x1c, r24	; 28
	/* Return data from data register */
	return EEDR;
     b3a:	8d b3       	in	r24, 0x1d	; 29
     b3c:	08 95       	ret

00000b3e <Interrupt_Initialization>:
*/

void Interrupt_Initialization(Interrupt_Signal_Pin pin)
{
	//Define Direction as input
	CLR_BIT(DDRD, PD2);
     b3e:	91 b3       	in	r25, 0x11	; 17
     b40:	9b 7f       	andi	r25, 0xFB	; 251
     b42:	91 bb       	out	0x11, r25	; 17
	CLR_BIT(DDRD, PD3);
     b44:	91 b3       	in	r25, 0x11	; 17
     b46:	97 7f       	andi	r25, 0xF7	; 247
     b48:	91 bb       	out	0x11, r25	; 17
	CLR_BIT(DDRD, PB2);
     b4a:	91 b3       	in	r25, 0x11	; 17
     b4c:	9b 7f       	andi	r25, 0xFB	; 251
     b4e:	91 bb       	out	0x11, r25	; 17
	//Enable Global interrupt (Apartment Door)
	//===============================================================
	#if Global_INTERRUPT_STATUS == GLOBAL_EN
	sei();
     b50:	78 94       	sei
	//CLR_BIT(SREG, 7);
	#else
	#warning This is invalid choice
	#endif
	//==============================================================
	if(pin == INT0_Signal)
     b52:	81 11       	cpse	r24, r1
     b54:	0a c0       	rjmp	.+20     	; 0xb6a <Interrupt_Initialization+0x2c>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT0);
     b56:	8b b7       	in	r24, 0x3b	; 59
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8b bf       	out	0x3b, r24	; 59
		#elif Interrupt_SENSE == HIGH_SIGNAL
		CLR_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);
		#elif Interrupt_SENSE == Falling_SIGNAL
		SET_BIT(MCUCR, ISC01);CLR_BIT(MCUCR, ISC00);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);
     b5c:	85 b7       	in	r24, 0x35	; 53
     b5e:	82 60       	ori	r24, 0x02	; 2
     b60:	85 bf       	out	0x35, r24	; 53
     b62:	85 b7       	in	r24, 0x35	; 53
     b64:	81 60       	ori	r24, 0x01	; 1
     b66:	85 bf       	out	0x35, r24	; 53
     b68:	08 95       	ret
		#else
		#warning This is invalid
		#endif
	}
	else if(pin == INT1_Signal)
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	51 f4       	brne	.+20     	; 0xb82 <Interrupt_Initialization+0x44>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT1);
     b6e:	8b b7       	in	r24, 0x3b	; 59
     b70:	80 68       	ori	r24, 0x80	; 128
     b72:	8b bf       	out	0x3b, r24	; 59
		#elif Interrupt_SENSE == HIGH_SIGNAL
		CLR_BIT(MCUCR, ISC11);SET_BIT(MCUCR, ISC10);
		#elif Interrupt_SENSE == Falling_SIGNAL
		SET_BIT(MCUCR, ISC11);CLR_BIT(MCUCR, ISC10);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCR, ISC11);SET_BIT(MCUCR, ISC10);
     b74:	85 b7       	in	r24, 0x35	; 53
     b76:	88 60       	ori	r24, 0x08	; 8
     b78:	85 bf       	out	0x35, r24	; 53
     b7a:	85 b7       	in	r24, 0x35	; 53
     b7c:	84 60       	ori	r24, 0x04	; 4
     b7e:	85 bf       	out	0x35, r24	; 53
     b80:	08 95       	ret
		#else
		#warning This is invalid
		#endif
	}
	else if(pin == INT2_Signal)
     b82:	82 30       	cpi	r24, 0x02	; 2
     b84:	31 f4       	brne	.+12     	; 0xb92 <Interrupt_Initialization+0x54>
	{
		//Enable Peripheral interrupt (Room Door)
		SET_BIT(GICR, INT2);
     b86:	8b b7       	in	r24, 0x3b	; 59
     b88:	80 62       	ori	r24, 0x20	; 32
     b8a:	8b bf       	out	0x3b, r24	; 59
		#if Interrupt_SENSE == Falling_SIGNAL
		CLR_BIT(MCUCSR, ISC2);
		#elif Interrupt_SENSE == RISING_SIGNAL
		SET_BIT(MCUCSR, ISC2);
     b8c:	84 b7       	in	r24, 0x34	; 52
     b8e:	80 64       	ori	r24, 0x40	; 64
     b90:	84 bf       	out	0x34, r24	; 52
     b92:	08 95       	ret

00000b94 <Timer0_Start>:
			while(GET_BIT(TIFR, OCF0) != 1);//Wait until raise flag
			SET_BIT(TIFR, OCF0);//Clear flag
			counter++;//Increment counter
		}
	}
}
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	61 f1       	breq	.+88     	; 0xbf0 <Timer0_Start+0x5c>
     b98:	28 f4       	brcc	.+10     	; 0xba4 <Timer0_Start+0x10>
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	49 f0       	breq	.+18     	; 0xbb0 <Timer0_Start+0x1c>
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	b9 f0       	breq	.+46     	; 0xbd0 <Timer0_Start+0x3c>
     ba2:	08 95       	ret
     ba4:	84 30       	cpi	r24, 0x04	; 4
     ba6:	a1 f1       	breq	.+104    	; 0xc10 <Timer0_Start+0x7c>
     ba8:	85 30       	cpi	r24, 0x05	; 5
     baa:	09 f4       	brne	.+2      	; 0xbae <Timer0_Start+0x1a>
     bac:	41 c0       	rjmp	.+130    	; 0xc30 <Timer0_Start+0x9c>
     bae:	08 95       	ret
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <_Prescaler+0x1>
     bb8:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <_Prescaler>
     bbc:	83 b7       	in	r24, 0x33	; 51
     bbe:	8b 7f       	andi	r24, 0xFB	; 251
     bc0:	83 bf       	out	0x33, r24	; 51
     bc2:	83 b7       	in	r24, 0x33	; 51
     bc4:	8d 7f       	andi	r24, 0xFD	; 253
     bc6:	83 bf       	out	0x33, r24	; 51
     bc8:	83 b7       	in	r24, 0x33	; 51
     bca:	81 60       	ori	r24, 0x01	; 1
     bcc:	83 bf       	out	0x33, r24	; 51
     bce:	08 95       	ret
     bd0:	88 e0       	ldi	r24, 0x08	; 8
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <_Prescaler+0x1>
     bd8:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <_Prescaler>
     bdc:	83 b7       	in	r24, 0x33	; 51
     bde:	8b 7f       	andi	r24, 0xFB	; 251
     be0:	83 bf       	out	0x33, r24	; 51
     be2:	83 b7       	in	r24, 0x33	; 51
     be4:	82 60       	ori	r24, 0x02	; 2
     be6:	83 bf       	out	0x33, r24	; 51
     be8:	83 b7       	in	r24, 0x33	; 51
     bea:	8e 7f       	andi	r24, 0xFE	; 254
     bec:	83 bf       	out	0x33, r24	; 51
     bee:	08 95       	ret
     bf0:	80 e4       	ldi	r24, 0x40	; 64
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <_Prescaler+0x1>
     bf8:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <_Prescaler>
     bfc:	83 b7       	in	r24, 0x33	; 51
     bfe:	8b 7f       	andi	r24, 0xFB	; 251
     c00:	83 bf       	out	0x33, r24	; 51
     c02:	83 b7       	in	r24, 0x33	; 51
     c04:	82 60       	ori	r24, 0x02	; 2
     c06:	83 bf       	out	0x33, r24	; 51
     c08:	83 b7       	in	r24, 0x33	; 51
     c0a:	81 60       	ori	r24, 0x01	; 1
     c0c:	83 bf       	out	0x33, r24	; 51
     c0e:	08 95       	ret
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <_Prescaler+0x1>
     c18:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <_Prescaler>
     c1c:	83 b7       	in	r24, 0x33	; 51
     c1e:	84 60       	ori	r24, 0x04	; 4
     c20:	83 bf       	out	0x33, r24	; 51
     c22:	83 b7       	in	r24, 0x33	; 51
     c24:	8d 7f       	andi	r24, 0xFD	; 253
     c26:	83 bf       	out	0x33, r24	; 51
     c28:	83 b7       	in	r24, 0x33	; 51
     c2a:	8e 7f       	andi	r24, 0xFE	; 254
     c2c:	83 bf       	out	0x33, r24	; 51
     c2e:	08 95       	ret
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	94 e0       	ldi	r25, 0x04	; 4
     c34:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <_Prescaler+0x1>
     c38:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <_Prescaler>
     c3c:	83 b7       	in	r24, 0x33	; 51
     c3e:	84 60       	ori	r24, 0x04	; 4
     c40:	83 bf       	out	0x33, r24	; 51
     c42:	83 b7       	in	r24, 0x33	; 51
     c44:	8d 7f       	andi	r24, 0xFD	; 253
     c46:	83 bf       	out	0x33, r24	; 51
     c48:	83 b7       	in	r24, 0x33	; 51
     c4a:	81 60       	ori	r24, 0x01	; 1
     c4c:	83 bf       	out	0x33, r24	; 51
     c4e:	08 95       	ret

00000c50 <Timer0_Stop>:
     c50:	83 b7       	in	r24, 0x33	; 51
     c52:	8b 7f       	andi	r24, 0xFB	; 251
     c54:	83 bf       	out	0x33, r24	; 51
     c56:	83 b7       	in	r24, 0x33	; 51
     c58:	8d 7f       	andi	r24, 0xFD	; 253
     c5a:	83 bf       	out	0x33, r24	; 51
     c5c:	83 b7       	in	r24, 0x33	; 51
     c5e:	8e 7f       	andi	r24, 0xFE	; 254
     c60:	83 bf       	out	0x33, r24	; 51
     c62:	08 95       	ret

00000c64 <Timer0_WithInterrupt_Initialization>:
uint32_t Number_CTC = 0;
uint32_t Init_Value = 0;

void Timer0_WithInterrupt_Initialization(Timer0_Mode mode, Timer0_Pin_Mode pin)
{
	cli();//Close global interrupt
     c64:	f8 94       	cli
	switch(mode)//Chose Mode
     c66:	88 23       	and	r24, r24
     c68:	19 f0       	breq	.+6      	; 0xc70 <Timer0_WithInterrupt_Initialization+0xc>
     c6a:	82 30       	cpi	r24, 0x02	; 2
     c6c:	59 f0       	breq	.+22     	; 0xc84 <Timer0_WithInterrupt_Initialization+0x20>
     c6e:	13 c0       	rjmp	.+38     	; 0xc96 <Timer0_WithInterrupt_Initialization+0x32>
	{
		case Normal_Mode:
		CLR_BIT(TCCR0, WGM01);CLR_BIT(TCCR0, WGM00);
     c70:	83 b7       	in	r24, 0x33	; 51
     c72:	87 7f       	andi	r24, 0xF7	; 247
     c74:	83 bf       	out	0x33, r24	; 51
     c76:	83 b7       	in	r24, 0x33	; 51
     c78:	8f 7b       	andi	r24, 0xBF	; 191
     c7a:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TIMSK, TOIE0);//Open OVF interrupt
     c7c:	89 b7       	in	r24, 0x39	; 57
     c7e:	81 60       	ori	r24, 0x01	; 1
     c80:	89 bf       	out	0x39, r24	; 57
		break;
     c82:	09 c0       	rjmp	.+18     	; 0xc96 <Timer0_WithInterrupt_Initialization+0x32>
		case CTC_Mode:
		SET_BIT(TCCR0, WGM01);CLR_BIT(TCCR0, WGM00);
     c84:	83 b7       	in	r24, 0x33	; 51
     c86:	88 60       	ori	r24, 0x08	; 8
     c88:	83 bf       	out	0x33, r24	; 51
     c8a:	83 b7       	in	r24, 0x33	; 51
     c8c:	8f 7b       	andi	r24, 0xBF	; 191
     c8e:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TIMSK, OCIE0);//Open CTC Interrupt
     c90:	89 b7       	in	r24, 0x39	; 57
     c92:	82 60       	ori	r24, 0x02	; 2
     c94:	89 bf       	out	0x39, r24	; 57
		case PWM_PhaseCorrect:
		break;
		case PWM_Fast:
		break;
	}
	switch(pin)//Output pin mode
     c96:	61 30       	cpi	r22, 0x01	; 1
     c98:	69 f0       	breq	.+26     	; 0xcb4 <Timer0_WithInterrupt_Initialization+0x50>
     c9a:	28 f0       	brcs	.+10     	; 0xca6 <Timer0_WithInterrupt_Initialization+0x42>
     c9c:	62 30       	cpi	r22, 0x02	; 2
     c9e:	89 f0       	breq	.+34     	; 0xcc2 <Timer0_WithInterrupt_Initialization+0x5e>
     ca0:	63 30       	cpi	r22, 0x03	; 3
     ca2:	b1 f0       	breq	.+44     	; 0xcd0 <Timer0_WithInterrupt_Initialization+0x6c>
     ca4:	1b c0       	rjmp	.+54     	; 0xcdc <Timer0_WithInterrupt_Initialization+0x78>
	{
		case Pin_disconnected:
		CLR_BIT(TCCR0, COM01);CLR_BIT(TCCR0, COM00);
     ca6:	83 b7       	in	r24, 0x33	; 51
     ca8:	8f 7d       	andi	r24, 0xDF	; 223
     caa:	83 bf       	out	0x33, r24	; 51
     cac:	83 b7       	in	r24, 0x33	; 51
     cae:	8f 7e       	andi	r24, 0xEF	; 239
     cb0:	83 bf       	out	0x33, r24	; 51
		break;
     cb2:	14 c0       	rjmp	.+40     	; 0xcdc <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Toggle:
		CLR_BIT(TCCR0, COM01);SET_BIT(TCCR0, COM00);
     cb4:	83 b7       	in	r24, 0x33	; 51
     cb6:	8f 7d       	andi	r24, 0xDF	; 223
     cb8:	83 bf       	out	0x33, r24	; 51
     cba:	83 b7       	in	r24, 0x33	; 51
     cbc:	80 61       	ori	r24, 0x10	; 16
     cbe:	83 bf       	out	0x33, r24	; 51
		break;
     cc0:	0d c0       	rjmp	.+26     	; 0xcdc <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Clear:
		SET_BIT(TCCR0, COM01);CLR_BIT(TCCR0, COM00);
     cc2:	83 b7       	in	r24, 0x33	; 51
     cc4:	80 62       	ori	r24, 0x20	; 32
     cc6:	83 bf       	out	0x33, r24	; 51
     cc8:	83 b7       	in	r24, 0x33	; 51
     cca:	8f 7e       	andi	r24, 0xEF	; 239
     ccc:	83 bf       	out	0x33, r24	; 51
		break;
     cce:	06 c0       	rjmp	.+12     	; 0xcdc <Timer0_WithInterrupt_Initialization+0x78>
		case Pin_Set:
		SET_BIT(TCCR0, COM01);SET_BIT(TCCR0, COM00);
     cd0:	83 b7       	in	r24, 0x33	; 51
     cd2:	80 62       	ori	r24, 0x20	; 32
     cd4:	83 bf       	out	0x33, r24	; 51
     cd6:	83 b7       	in	r24, 0x33	; 51
     cd8:	80 61       	ori	r24, 0x10	; 16
     cda:	83 bf       	out	0x33, r24	; 51
		break;
	}
	sei();//Enable global interrupt
     cdc:	78 94       	sei
     cde:	08 95       	ret

00000ce0 <Timer0_WithInterrupt_SetDelay>:
}
void Timer0_WithInterrupt_SetDelay(Timer0_Mode mode, uint32_t delay, uint8_t top)
{
     ce0:	0f 93       	push	r16
	if(mode == Normal_Mode)
     ce2:	81 11       	cpse	r24, r1
     ce4:	37 c0       	rjmp	.+110    	; 0xd54 <Timer0_WithInterrupt_SetDelay+0x74>
	{
		uint8_t Tick = ( 1 * _Prescaler) / Frequency;
     ce6:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <_Prescaler>
     cea:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <_Prescaler+0x1>
     cee:	f9 01       	movw	r30, r18
     cf0:	f2 95       	swap	r31
     cf2:	e2 95       	swap	r30
     cf4:	ef 70       	andi	r30, 0x0F	; 15
     cf6:	ef 27       	eor	r30, r31
     cf8:	ff 70       	andi	r31, 0x0F	; 15
     cfa:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     cfc:	a8 ee       	ldi	r26, 0xE8	; 232
     cfe:	b3 e0       	ldi	r27, 0x03	; 3
     d00:	9a 01       	movw	r18, r20
     d02:	ab 01       	movw	r20, r22
     d04:	0e 94 df 09 	call	0x13be	; 0x13be <__muluhisi3>
     d08:	2e 2f       	mov	r18, r30
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e0       	ldi	r20, 0x00	; 0
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	0e 94 b7 09 	call	0x136e	; 0x136e <__udivmodsi4>
		Number_OVF = count / Bits;
     d14:	bb 27       	eor	r27, r27
     d16:	a5 2f       	mov	r26, r21
     d18:	94 2f       	mov	r25, r20
     d1a:	83 2f       	mov	r24, r19
		Number_OVF ++;
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	a1 1d       	adc	r26, r1
     d20:	b1 1d       	adc	r27, r1
     d22:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <Number_OVF>
     d26:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <Number_OVF+0x1>
     d2a:	a0 93 94 00 	sts	0x0094, r26	; 0x800094 <Number_OVF+0x2>
     d2e:	b0 93 95 00 	sts	0x0095, r27	; 0x800095 <Number_OVF+0x3>
		Init_Value = Bits - (count % Bits);
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	a0 e0       	ldi	r26, 0x00	; 0
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	82 1b       	sub	r24, r18
     d3c:	91 09       	sbc	r25, r1
     d3e:	a1 09       	sbc	r26, r1
     d40:	b1 09       	sbc	r27, r1
     d42:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <Init_Value>
     d46:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <Init_Value+0x1>
     d4a:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <Init_Value+0x2>
     d4e:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <Init_Value+0x3>
		return;
     d52:	30 c0       	rjmp	.+96     	; 0xdb4 <Timer0_WithInterrupt_SetDelay+0xd4>
	}
	else if(mode == CTC_Mode)
     d54:	82 30       	cpi	r24, 0x02	; 2
     d56:	71 f5       	brne	.+92     	; 0xdb4 <Timer0_WithInterrupt_SetDelay+0xd4>
	{
		OCR0 = top;
     d58:	2c bf       	out	0x3c, r18	; 60
		uint8_t Tick = ( 1 * _Prescaler) / Frequency;
     d5a:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <_Prescaler>
     d5e:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <_Prescaler+0x1>
     d62:	f9 01       	movw	r30, r18
     d64:	f2 95       	swap	r31
     d66:	e2 95       	swap	r30
     d68:	ef 70       	andi	r30, 0x0F	; 15
     d6a:	ef 27       	eor	r30, r31
     d6c:	ff 70       	andi	r31, 0x0F	; 15
     d6e:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     d70:	a8 ee       	ldi	r26, 0xE8	; 232
     d72:	b3 e0       	ldi	r27, 0x03	; 3
     d74:	9a 01       	movw	r18, r20
     d76:	ab 01       	movw	r20, r22
     d78:	0e 94 df 09 	call	0x13be	; 0x13be <__muluhisi3>
     d7c:	2e 2f       	mov	r18, r30
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	50 e0       	ldi	r21, 0x00	; 0
     d84:	0e 94 b7 09 	call	0x136e	; 0x136e <__udivmodsi4>
     d88:	ca 01       	movw	r24, r20
     d8a:	b9 01       	movw	r22, r18
		Number_CTC = count / OCR0;
     d8c:	0c b7       	in	r16, 0x3c	; 60
     d8e:	20 2f       	mov	r18, r16
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	40 e0       	ldi	r20, 0x00	; 0
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	0e 94 b7 09 	call	0x136e	; 0x136e <__udivmodsi4>
		Number_CTC ++;
     d9a:	da 01       	movw	r26, r20
     d9c:	c9 01       	movw	r24, r18
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	a1 1d       	adc	r26, r1
     da2:	b1 1d       	adc	r27, r1
     da4:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <Number_CTC>
     da8:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <Number_CTC+0x1>
     dac:	a0 93 90 00 	sts	0x0090, r26	; 0x800090 <Number_CTC+0x2>
     db0:	b0 93 91 00 	sts	0x0091, r27	; 0x800091 <Number_CTC+0x3>
		return;
	}
}
     db4:	0f 91       	pop	r16
     db6:	08 95       	ret

00000db8 <Timer2_Start>:

uint16 _Prescaler_ = 0;

void Timer2_Start(Timer2_Prescaler prescaler)
{
	switch(prescaler)
     db8:	83 30       	cpi	r24, 0x03	; 3
     dba:	61 f1       	breq	.+88     	; 0xe14 <Timer2_Start+0x5c>
     dbc:	28 f4       	brcc	.+10     	; 0xdc8 <Timer2_Start+0x10>
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	49 f0       	breq	.+18     	; 0xdd4 <Timer2_Start+0x1c>
     dc2:	82 30       	cpi	r24, 0x02	; 2
     dc4:	b9 f0       	breq	.+46     	; 0xdf4 <Timer2_Start+0x3c>
     dc6:	08 95       	ret
     dc8:	84 30       	cpi	r24, 0x04	; 4
     dca:	a1 f1       	breq	.+104    	; 0xe34 <Timer2_Start+0x7c>
     dcc:	85 30       	cpi	r24, 0x05	; 5
     dce:	09 f4       	brne	.+2      	; 0xdd2 <Timer2_Start+0x1a>
     dd0:	41 c0       	rjmp	.+130    	; 0xe54 <Timer2_Start+0x9c>
     dd2:	08 95       	ret
	{
		case PreS_0_:
		break;
		case PreS_1_:
		_Prescaler_ = 1;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <_Prescaler_+0x1>
     ddc:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <_Prescaler_>
		CLR_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);SET_BIT(TCCR2, CS20);
     de0:	85 b5       	in	r24, 0x25	; 37
     de2:	8b 7f       	andi	r24, 0xFB	; 251
     de4:	85 bd       	out	0x25, r24	; 37
     de6:	85 b5       	in	r24, 0x25	; 37
     de8:	8d 7f       	andi	r24, 0xFD	; 253
     dea:	85 bd       	out	0x25, r24	; 37
     dec:	85 b5       	in	r24, 0x25	; 37
     dee:	81 60       	ori	r24, 0x01	; 1
     df0:	85 bd       	out	0x25, r24	; 37
		break;
     df2:	08 95       	ret
		case PreS_8_:
		_Prescaler_ = 8;
     df4:	88 e0       	ldi	r24, 0x08	; 8
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <_Prescaler_+0x1>
     dfc:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <_Prescaler_>
		CLR_BIT(TCCR2, CS22);SET_BIT(TCCR2, CS21);CLR_BIT(TCCR2, CS20);
     e00:	85 b5       	in	r24, 0x25	; 37
     e02:	8b 7f       	andi	r24, 0xFB	; 251
     e04:	85 bd       	out	0x25, r24	; 37
     e06:	85 b5       	in	r24, 0x25	; 37
     e08:	82 60       	ori	r24, 0x02	; 2
     e0a:	85 bd       	out	0x25, r24	; 37
     e0c:	85 b5       	in	r24, 0x25	; 37
     e0e:	8e 7f       	andi	r24, 0xFE	; 254
     e10:	85 bd       	out	0x25, r24	; 37
		break;
     e12:	08 95       	ret
		case PreS_64_:
		_Prescaler_ = 64;
     e14:	80 e4       	ldi	r24, 0x40	; 64
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <_Prescaler_+0x1>
     e1c:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <_Prescaler_>
		CLR_BIT(TCCR2, CS22);SET_BIT(TCCR2, CS21);SET_BIT(TCCR2, CS20);
     e20:	85 b5       	in	r24, 0x25	; 37
     e22:	8b 7f       	andi	r24, 0xFB	; 251
     e24:	85 bd       	out	0x25, r24	; 37
     e26:	85 b5       	in	r24, 0x25	; 37
     e28:	82 60       	ori	r24, 0x02	; 2
     e2a:	85 bd       	out	0x25, r24	; 37
     e2c:	85 b5       	in	r24, 0x25	; 37
     e2e:	81 60       	ori	r24, 0x01	; 1
     e30:	85 bd       	out	0x25, r24	; 37
		break;
     e32:	08 95       	ret
		case PreS_256_:
		_Prescaler_ = 256;
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <_Prescaler_+0x1>
     e3c:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <_Prescaler_>
		SET_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);CLR_BIT(TCCR2, CS20);
     e40:	85 b5       	in	r24, 0x25	; 37
     e42:	84 60       	ori	r24, 0x04	; 4
     e44:	85 bd       	out	0x25, r24	; 37
     e46:	85 b5       	in	r24, 0x25	; 37
     e48:	8d 7f       	andi	r24, 0xFD	; 253
     e4a:	85 bd       	out	0x25, r24	; 37
     e4c:	85 b5       	in	r24, 0x25	; 37
     e4e:	8e 7f       	andi	r24, 0xFE	; 254
     e50:	85 bd       	out	0x25, r24	; 37
		break;
     e52:	08 95       	ret
		case PreS_1024_:
		_Prescaler_ = 1024;
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	94 e0       	ldi	r25, 0x04	; 4
     e58:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <_Prescaler_+0x1>
     e5c:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <_Prescaler_>
		SET_BIT(TCCR2, CS22);SET_BIT(TCCR2, CS21);SET_BIT(TCCR2, CS20);
     e60:	85 b5       	in	r24, 0x25	; 37
     e62:	84 60       	ori	r24, 0x04	; 4
     e64:	85 bd       	out	0x25, r24	; 37
     e66:	85 b5       	in	r24, 0x25	; 37
     e68:	82 60       	ori	r24, 0x02	; 2
     e6a:	85 bd       	out	0x25, r24	; 37
     e6c:	85 b5       	in	r24, 0x25	; 37
     e6e:	81 60       	ori	r24, 0x01	; 1
     e70:	85 bd       	out	0x25, r24	; 37
     e72:	08 95       	ret

00000e74 <Timer2_Stop>:
		
	}
}
void Timer2_Stop(void)
{
	CLR_BIT(TCCR2, CS22);CLR_BIT(TCCR2, CS21);CLR_BIT(TCCR2, CS20);
     e74:	85 b5       	in	r24, 0x25	; 37
     e76:	8b 7f       	andi	r24, 0xFB	; 251
     e78:	85 bd       	out	0x25, r24	; 37
     e7a:	85 b5       	in	r24, 0x25	; 37
     e7c:	8d 7f       	andi	r24, 0xFD	; 253
     e7e:	85 bd       	out	0x25, r24	; 37
     e80:	85 b5       	in	r24, 0x25	; 37
     e82:	8e 7f       	andi	r24, 0xFE	; 254
     e84:	85 bd       	out	0x25, r24	; 37
     e86:	08 95       	ret

00000e88 <Timer2_WithInterrupt_Initialization>:
uint32_t Timer2_Init_Value = 0;

void Timer2_WithInterrupt_Initialization(Timer2_Mode mode, Timer2_Pin_Mode pin)
{
	
	switch(mode)//Chose Mode
     e88:	88 23       	and	r24, r24
     e8a:	19 f0       	breq	.+6      	; 0xe92 <Timer2_WithInterrupt_Initialization+0xa>
     e8c:	82 30       	cpi	r24, 0x02	; 2
     e8e:	59 f0       	breq	.+22     	; 0xea6 <Timer2_WithInterrupt_Initialization+0x1e>
     e90:	13 c0       	rjmp	.+38     	; 0xeb8 <Timer2_WithInterrupt_Initialization+0x30>
	{
		case Normal_Mode_:
		CLR_BIT(TCCR2, WGM21);CLR_BIT(TCCR2, WGM20);
     e92:	85 b5       	in	r24, 0x25	; 37
     e94:	87 7f       	andi	r24, 0xF7	; 247
     e96:	85 bd       	out	0x25, r24	; 37
     e98:	85 b5       	in	r24, 0x25	; 37
     e9a:	8f 7b       	andi	r24, 0xBF	; 191
     e9c:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TIMSK, TOIE2);//Open OVF interrupt
     e9e:	89 b7       	in	r24, 0x39	; 57
     ea0:	80 64       	ori	r24, 0x40	; 64
     ea2:	89 bf       	out	0x39, r24	; 57
		break;
     ea4:	09 c0       	rjmp	.+18     	; 0xeb8 <Timer2_WithInterrupt_Initialization+0x30>
		case CTC_Mode_:
		SET_BIT(TCCR2, WGM21);CLR_BIT(TCCR2, WGM20);
     ea6:	85 b5       	in	r24, 0x25	; 37
     ea8:	88 60       	ori	r24, 0x08	; 8
     eaa:	85 bd       	out	0x25, r24	; 37
     eac:	85 b5       	in	r24, 0x25	; 37
     eae:	8f 7b       	andi	r24, 0xBF	; 191
     eb0:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TIMSK, OCIE2);//Open CTC Interrupt
     eb2:	89 b7       	in	r24, 0x39	; 57
     eb4:	80 68       	ori	r24, 0x80	; 128
     eb6:	89 bf       	out	0x39, r24	; 57
		case PWM_PhaseCorrect_:
		break;
		case PWM_Fast_:
		break;
	}
	switch(pin)//Output pin mode
     eb8:	61 30       	cpi	r22, 0x01	; 1
     eba:	69 f0       	breq	.+26     	; 0xed6 <Timer2_WithInterrupt_Initialization+0x4e>
     ebc:	28 f0       	brcs	.+10     	; 0xec8 <Timer2_WithInterrupt_Initialization+0x40>
     ebe:	62 30       	cpi	r22, 0x02	; 2
     ec0:	89 f0       	breq	.+34     	; 0xee4 <Timer2_WithInterrupt_Initialization+0x5c>
     ec2:	63 30       	cpi	r22, 0x03	; 3
     ec4:	b1 f0       	breq	.+44     	; 0xef2 <Timer2_WithInterrupt_Initialization+0x6a>
     ec6:	1b c0       	rjmp	.+54     	; 0xefe <Timer2_WithInterrupt_Initialization+0x76>
	{
		case Pin_disconnected_:
		CLR_BIT(TCCR2, COM21);CLR_BIT(TCCR2, COM20);
     ec8:	85 b5       	in	r24, 0x25	; 37
     eca:	8f 7d       	andi	r24, 0xDF	; 223
     ecc:	85 bd       	out	0x25, r24	; 37
     ece:	85 b5       	in	r24, 0x25	; 37
     ed0:	8f 7e       	andi	r24, 0xEF	; 239
     ed2:	85 bd       	out	0x25, r24	; 37
		break;
     ed4:	14 c0       	rjmp	.+40     	; 0xefe <Timer2_WithInterrupt_Initialization+0x76>
		case Pin_Toggle_:
		CLR_BIT(TCCR2, COM21);SET_BIT(TCCR2, COM20);
     ed6:	85 b5       	in	r24, 0x25	; 37
     ed8:	8f 7d       	andi	r24, 0xDF	; 223
     eda:	85 bd       	out	0x25, r24	; 37
     edc:	85 b5       	in	r24, 0x25	; 37
     ede:	80 61       	ori	r24, 0x10	; 16
     ee0:	85 bd       	out	0x25, r24	; 37
		break;
     ee2:	0d c0       	rjmp	.+26     	; 0xefe <Timer2_WithInterrupt_Initialization+0x76>
		case Pin_Clear_:
		SET_BIT(TCCR2, COM21);CLR_BIT(TCCR2, COM20);
     ee4:	85 b5       	in	r24, 0x25	; 37
     ee6:	80 62       	ori	r24, 0x20	; 32
     ee8:	85 bd       	out	0x25, r24	; 37
     eea:	85 b5       	in	r24, 0x25	; 37
     eec:	8f 7e       	andi	r24, 0xEF	; 239
     eee:	85 bd       	out	0x25, r24	; 37
		break;
     ef0:	06 c0       	rjmp	.+12     	; 0xefe <Timer2_WithInterrupt_Initialization+0x76>
		case Pin_Set_:
		SET_BIT(TCCR2, COM21);SET_BIT(TCCR2, COM20);
     ef2:	85 b5       	in	r24, 0x25	; 37
     ef4:	80 62       	ori	r24, 0x20	; 32
     ef6:	85 bd       	out	0x25, r24	; 37
     ef8:	85 b5       	in	r24, 0x25	; 37
     efa:	80 61       	ori	r24, 0x10	; 16
     efc:	85 bd       	out	0x25, r24	; 37
		break;
	}
	sei();//Enable global interrupt
     efe:	78 94       	sei
     f00:	08 95       	ret

00000f02 <Timer2_WithInterrupt_SetDelay>:
}
void Timer2_WithInterrupt_SetDelay(Timer2_Mode mode, uint32_t delay, uint8_t top)
{
     f02:	0f 93       	push	r16
	if(mode == Normal_Mode_)
     f04:	81 11       	cpse	r24, r1
     f06:	37 c0       	rjmp	.+110    	; 0xf76 <Timer2_WithInterrupt_SetDelay+0x74>
	{
		uint8_t Tick = ( 1 * _Prescaler_) / Frequency;
     f08:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <_Prescaler_>
     f0c:	30 91 a5 00 	lds	r19, 0x00A5	; 0x8000a5 <_Prescaler_+0x1>
     f10:	f9 01       	movw	r30, r18
     f12:	f2 95       	swap	r31
     f14:	e2 95       	swap	r30
     f16:	ef 70       	andi	r30, 0x0F	; 15
     f18:	ef 27       	eor	r30, r31
     f1a:	ff 70       	andi	r31, 0x0F	; 15
     f1c:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     f1e:	a8 ee       	ldi	r26, 0xE8	; 232
     f20:	b3 e0       	ldi	r27, 0x03	; 3
     f22:	9a 01       	movw	r18, r20
     f24:	ab 01       	movw	r20, r22
     f26:	0e 94 df 09 	call	0x13be	; 0x13be <__muluhisi3>
     f2a:	2e 2f       	mov	r18, r30
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e0       	ldi	r20, 0x00	; 0
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	0e 94 b7 09 	call	0x136e	; 0x136e <__udivmodsi4>
		Timer2_OVF = count / Bits;
     f36:	bb 27       	eor	r27, r27
     f38:	a5 2f       	mov	r26, r21
     f3a:	94 2f       	mov	r25, r20
     f3c:	83 2f       	mov	r24, r19
		Timer2_OVF ++;
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	a1 1d       	adc	r26, r1
     f42:	b1 1d       	adc	r27, r1
     f44:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <Timer2_OVF>
     f48:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <Timer2_OVF+0x1>
     f4c:	a0 93 a2 00 	sts	0x00A2, r26	; 0x8000a2 <Timer2_OVF+0x2>
     f50:	b0 93 a3 00 	sts	0x00A3, r27	; 0x8000a3 <Timer2_OVF+0x3>
		Timer2_Init_Value = Bits - (count % Bits);
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	a0 e0       	ldi	r26, 0x00	; 0
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	82 1b       	sub	r24, r18
     f5e:	91 09       	sbc	r25, r1
     f60:	a1 09       	sbc	r26, r1
     f62:	b1 09       	sbc	r27, r1
     f64:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <Timer2_Init_Value>
     f68:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <Timer2_Init_Value+0x1>
     f6c:	a0 93 9a 00 	sts	0x009A, r26	; 0x80009a <Timer2_Init_Value+0x2>
     f70:	b0 93 9b 00 	sts	0x009B, r27	; 0x80009b <Timer2_Init_Value+0x3>
		return;
     f74:	30 c0       	rjmp	.+96     	; 0xfd6 <Timer2_WithInterrupt_SetDelay+0xd4>
	}
	else if(mode == CTC_Mode_)
     f76:	82 30       	cpi	r24, 0x02	; 2
     f78:	71 f5       	brne	.+92     	; 0xfd6 <Timer2_WithInterrupt_SetDelay+0xd4>
	{
		OCR2 = top;
     f7a:	23 bd       	out	0x23, r18	; 35
		uint8_t Tick = ( 1 * _Prescaler_) / Frequency;
     f7c:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <_Prescaler_>
     f80:	30 91 a5 00 	lds	r19, 0x00A5	; 0x8000a5 <_Prescaler_+0x1>
     f84:	f9 01       	movw	r30, r18
     f86:	f2 95       	swap	r31
     f88:	e2 95       	swap	r30
     f8a:	ef 70       	andi	r30, 0x0F	; 15
     f8c:	ef 27       	eor	r30, r31
     f8e:	ff 70       	andi	r31, 0x0F	; 15
     f90:	ef 27       	eor	r30, r31
		uint32_t count = (delay * Microsecond) / Tick;
     f92:	a8 ee       	ldi	r26, 0xE8	; 232
     f94:	b3 e0       	ldi	r27, 0x03	; 3
     f96:	9a 01       	movw	r18, r20
     f98:	ab 01       	movw	r20, r22
     f9a:	0e 94 df 09 	call	0x13be	; 0x13be <__muluhisi3>
     f9e:	2e 2f       	mov	r18, r30
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	0e 94 b7 09 	call	0x136e	; 0x136e <__udivmodsi4>
     faa:	ca 01       	movw	r24, r20
     fac:	b9 01       	movw	r22, r18
		Timer2_CTC = count / OCR0;
     fae:	0c b7       	in	r16, 0x3c	; 60
     fb0:	20 2f       	mov	r18, r16
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e0       	ldi	r20, 0x00	; 0
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	0e 94 b7 09 	call	0x136e	; 0x136e <__udivmodsi4>
		Timer2_CTC ++;
     fbc:	da 01       	movw	r26, r20
     fbe:	c9 01       	movw	r24, r18
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	a1 1d       	adc	r26, r1
     fc4:	b1 1d       	adc	r27, r1
     fc6:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <Timer2_CTC>
     fca:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <Timer2_CTC+0x1>
     fce:	a0 93 9e 00 	sts	0x009E, r26	; 0x80009e <Timer2_CTC+0x2>
     fd2:	b0 93 9f 00 	sts	0x009F, r27	; 0x80009f <Timer2_CTC+0x3>
		return;
	}
}
     fd6:	0f 91       	pop	r16
     fd8:	08 95       	ret

00000fda <__cmpsf2>:
     fda:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fp_cmp>
     fde:	08 f4       	brcc	.+2      	; 0xfe2 <__cmpsf2+0x8>
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	08 95       	ret

00000fe4 <__divsf3>:
     fe4:	0e 94 06 08 	call	0x100c	; 0x100c <__divsf3x>
     fe8:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <__fp_round>
     fec:	0e 94 04 09 	call	0x1208	; 0x1208 <__fp_pscB>
     ff0:	58 f0       	brcs	.+22     	; 0x1008 <__divsf3+0x24>
     ff2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_pscA>
     ff6:	40 f0       	brcs	.+16     	; 0x1008 <__divsf3+0x24>
     ff8:	29 f4       	brne	.+10     	; 0x1004 <__divsf3+0x20>
     ffa:	5f 3f       	cpi	r21, 0xFF	; 255
     ffc:	29 f0       	breq	.+10     	; 0x1008 <__divsf3+0x24>
     ffe:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__fp_inf>
    1002:	51 11       	cpse	r21, r1
    1004:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__fp_szero>
    1008:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__fp_nan>

0000100c <__divsf3x>:
    100c:	0e 94 1c 09 	call	0x1238	; 0x1238 <__fp_split3>
    1010:	68 f3       	brcs	.-38     	; 0xfec <__divsf3+0x8>

00001012 <__divsf3_pse>:
    1012:	99 23       	and	r25, r25
    1014:	b1 f3       	breq	.-20     	; 0x1002 <__divsf3+0x1e>
    1016:	55 23       	and	r21, r21
    1018:	91 f3       	breq	.-28     	; 0xffe <__divsf3+0x1a>
    101a:	95 1b       	sub	r25, r21
    101c:	55 0b       	sbc	r21, r21
    101e:	bb 27       	eor	r27, r27
    1020:	aa 27       	eor	r26, r26
    1022:	62 17       	cp	r22, r18
    1024:	73 07       	cpc	r23, r19
    1026:	84 07       	cpc	r24, r20
    1028:	38 f0       	brcs	.+14     	; 0x1038 <__divsf3_pse+0x26>
    102a:	9f 5f       	subi	r25, 0xFF	; 255
    102c:	5f 4f       	sbci	r21, 0xFF	; 255
    102e:	22 0f       	add	r18, r18
    1030:	33 1f       	adc	r19, r19
    1032:	44 1f       	adc	r20, r20
    1034:	aa 1f       	adc	r26, r26
    1036:	a9 f3       	breq	.-22     	; 0x1022 <__divsf3_pse+0x10>
    1038:	35 d0       	rcall	.+106    	; 0x10a4 <__divsf3_pse+0x92>
    103a:	0e 2e       	mov	r0, r30
    103c:	3a f0       	brmi	.+14     	; 0x104c <__divsf3_pse+0x3a>
    103e:	e0 e8       	ldi	r30, 0x80	; 128
    1040:	32 d0       	rcall	.+100    	; 0x10a6 <__divsf3_pse+0x94>
    1042:	91 50       	subi	r25, 0x01	; 1
    1044:	50 40       	sbci	r21, 0x00	; 0
    1046:	e6 95       	lsr	r30
    1048:	00 1c       	adc	r0, r0
    104a:	ca f7       	brpl	.-14     	; 0x103e <__divsf3_pse+0x2c>
    104c:	2b d0       	rcall	.+86     	; 0x10a4 <__divsf3_pse+0x92>
    104e:	fe 2f       	mov	r31, r30
    1050:	29 d0       	rcall	.+82     	; 0x10a4 <__divsf3_pse+0x92>
    1052:	66 0f       	add	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	88 1f       	adc	r24, r24
    1058:	bb 1f       	adc	r27, r27
    105a:	26 17       	cp	r18, r22
    105c:	37 07       	cpc	r19, r23
    105e:	48 07       	cpc	r20, r24
    1060:	ab 07       	cpc	r26, r27
    1062:	b0 e8       	ldi	r27, 0x80	; 128
    1064:	09 f0       	breq	.+2      	; 0x1068 <__divsf3_pse+0x56>
    1066:	bb 0b       	sbc	r27, r27
    1068:	80 2d       	mov	r24, r0
    106a:	bf 01       	movw	r22, r30
    106c:	ff 27       	eor	r31, r31
    106e:	93 58       	subi	r25, 0x83	; 131
    1070:	5f 4f       	sbci	r21, 0xFF	; 255
    1072:	3a f0       	brmi	.+14     	; 0x1082 <__divsf3_pse+0x70>
    1074:	9e 3f       	cpi	r25, 0xFE	; 254
    1076:	51 05       	cpc	r21, r1
    1078:	78 f0       	brcs	.+30     	; 0x1098 <__divsf3_pse+0x86>
    107a:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__fp_inf>
    107e:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__fp_szero>
    1082:	5f 3f       	cpi	r21, 0xFF	; 255
    1084:	e4 f3       	brlt	.-8      	; 0x107e <__divsf3_pse+0x6c>
    1086:	98 3e       	cpi	r25, 0xE8	; 232
    1088:	d4 f3       	brlt	.-12     	; 0x107e <__divsf3_pse+0x6c>
    108a:	86 95       	lsr	r24
    108c:	77 95       	ror	r23
    108e:	67 95       	ror	r22
    1090:	b7 95       	ror	r27
    1092:	f7 95       	ror	r31
    1094:	9f 5f       	subi	r25, 0xFF	; 255
    1096:	c9 f7       	brne	.-14     	; 0x108a <__divsf3_pse+0x78>
    1098:	88 0f       	add	r24, r24
    109a:	91 1d       	adc	r25, r1
    109c:	96 95       	lsr	r25
    109e:	87 95       	ror	r24
    10a0:	97 f9       	bld	r25, 7
    10a2:	08 95       	ret
    10a4:	e1 e0       	ldi	r30, 0x01	; 1
    10a6:	66 0f       	add	r22, r22
    10a8:	77 1f       	adc	r23, r23
    10aa:	88 1f       	adc	r24, r24
    10ac:	bb 1f       	adc	r27, r27
    10ae:	62 17       	cp	r22, r18
    10b0:	73 07       	cpc	r23, r19
    10b2:	84 07       	cpc	r24, r20
    10b4:	ba 07       	cpc	r27, r26
    10b6:	20 f0       	brcs	.+8      	; 0x10c0 <__divsf3_pse+0xae>
    10b8:	62 1b       	sub	r22, r18
    10ba:	73 0b       	sbc	r23, r19
    10bc:	84 0b       	sbc	r24, r20
    10be:	ba 0b       	sbc	r27, r26
    10c0:	ee 1f       	adc	r30, r30
    10c2:	88 f7       	brcc	.-30     	; 0x10a6 <__divsf3_pse+0x94>
    10c4:	e0 95       	com	r30
    10c6:	08 95       	ret

000010c8 <__fixunssfsi>:
    10c8:	0e 94 24 09 	call	0x1248	; 0x1248 <__fp_splitA>
    10cc:	88 f0       	brcs	.+34     	; 0x10f0 <__fixunssfsi+0x28>
    10ce:	9f 57       	subi	r25, 0x7F	; 127
    10d0:	98 f0       	brcs	.+38     	; 0x10f8 <__fixunssfsi+0x30>
    10d2:	b9 2f       	mov	r27, r25
    10d4:	99 27       	eor	r25, r25
    10d6:	b7 51       	subi	r27, 0x17	; 23
    10d8:	b0 f0       	brcs	.+44     	; 0x1106 <__fixunssfsi+0x3e>
    10da:	e1 f0       	breq	.+56     	; 0x1114 <__fixunssfsi+0x4c>
    10dc:	66 0f       	add	r22, r22
    10de:	77 1f       	adc	r23, r23
    10e0:	88 1f       	adc	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	1a f0       	brmi	.+6      	; 0x10ec <__fixunssfsi+0x24>
    10e6:	ba 95       	dec	r27
    10e8:	c9 f7       	brne	.-14     	; 0x10dc <__fixunssfsi+0x14>
    10ea:	14 c0       	rjmp	.+40     	; 0x1114 <__fixunssfsi+0x4c>
    10ec:	b1 30       	cpi	r27, 0x01	; 1
    10ee:	91 f0       	breq	.+36     	; 0x1114 <__fixunssfsi+0x4c>
    10f0:	0e 94 3e 09 	call	0x127c	; 0x127c <__fp_zero>
    10f4:	b1 e0       	ldi	r27, 0x01	; 1
    10f6:	08 95       	ret
    10f8:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__fp_zero>
    10fc:	67 2f       	mov	r22, r23
    10fe:	78 2f       	mov	r23, r24
    1100:	88 27       	eor	r24, r24
    1102:	b8 5f       	subi	r27, 0xF8	; 248
    1104:	39 f0       	breq	.+14     	; 0x1114 <__fixunssfsi+0x4c>
    1106:	b9 3f       	cpi	r27, 0xF9	; 249
    1108:	cc f3       	brlt	.-14     	; 0x10fc <__fixunssfsi+0x34>
    110a:	86 95       	lsr	r24
    110c:	77 95       	ror	r23
    110e:	67 95       	ror	r22
    1110:	b3 95       	inc	r27
    1112:	d9 f7       	brne	.-10     	; 0x110a <__fixunssfsi+0x42>
    1114:	3e f4       	brtc	.+14     	; 0x1124 <__fixunssfsi+0x5c>
    1116:	90 95       	com	r25
    1118:	80 95       	com	r24
    111a:	70 95       	com	r23
    111c:	61 95       	neg	r22
    111e:	7f 4f       	sbci	r23, 0xFF	; 255
    1120:	8f 4f       	sbci	r24, 0xFF	; 255
    1122:	9f 4f       	sbci	r25, 0xFF	; 255
    1124:	08 95       	ret

00001126 <__floatunsisf>:
    1126:	e8 94       	clt
    1128:	09 c0       	rjmp	.+18     	; 0x113c <__floatsisf+0x12>

0000112a <__floatsisf>:
    112a:	97 fb       	bst	r25, 7
    112c:	3e f4       	brtc	.+14     	; 0x113c <__floatsisf+0x12>
    112e:	90 95       	com	r25
    1130:	80 95       	com	r24
    1132:	70 95       	com	r23
    1134:	61 95       	neg	r22
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	8f 4f       	sbci	r24, 0xFF	; 255
    113a:	9f 4f       	sbci	r25, 0xFF	; 255
    113c:	99 23       	and	r25, r25
    113e:	a9 f0       	breq	.+42     	; 0x116a <__floatsisf+0x40>
    1140:	f9 2f       	mov	r31, r25
    1142:	96 e9       	ldi	r25, 0x96	; 150
    1144:	bb 27       	eor	r27, r27
    1146:	93 95       	inc	r25
    1148:	f6 95       	lsr	r31
    114a:	87 95       	ror	r24
    114c:	77 95       	ror	r23
    114e:	67 95       	ror	r22
    1150:	b7 95       	ror	r27
    1152:	f1 11       	cpse	r31, r1
    1154:	f8 cf       	rjmp	.-16     	; 0x1146 <__floatsisf+0x1c>
    1156:	fa f4       	brpl	.+62     	; 0x1196 <__floatsisf+0x6c>
    1158:	bb 0f       	add	r27, r27
    115a:	11 f4       	brne	.+4      	; 0x1160 <__floatsisf+0x36>
    115c:	60 ff       	sbrs	r22, 0
    115e:	1b c0       	rjmp	.+54     	; 0x1196 <__floatsisf+0x6c>
    1160:	6f 5f       	subi	r22, 0xFF	; 255
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	8f 4f       	sbci	r24, 0xFF	; 255
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	16 c0       	rjmp	.+44     	; 0x1196 <__floatsisf+0x6c>
    116a:	88 23       	and	r24, r24
    116c:	11 f0       	breq	.+4      	; 0x1172 <__floatsisf+0x48>
    116e:	96 e9       	ldi	r25, 0x96	; 150
    1170:	11 c0       	rjmp	.+34     	; 0x1194 <__floatsisf+0x6a>
    1172:	77 23       	and	r23, r23
    1174:	21 f0       	breq	.+8      	; 0x117e <__floatsisf+0x54>
    1176:	9e e8       	ldi	r25, 0x8E	; 142
    1178:	87 2f       	mov	r24, r23
    117a:	76 2f       	mov	r23, r22
    117c:	05 c0       	rjmp	.+10     	; 0x1188 <__floatsisf+0x5e>
    117e:	66 23       	and	r22, r22
    1180:	71 f0       	breq	.+28     	; 0x119e <__floatsisf+0x74>
    1182:	96 e8       	ldi	r25, 0x86	; 134
    1184:	86 2f       	mov	r24, r22
    1186:	70 e0       	ldi	r23, 0x00	; 0
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	2a f0       	brmi	.+10     	; 0x1196 <__floatsisf+0x6c>
    118c:	9a 95       	dec	r25
    118e:	66 0f       	add	r22, r22
    1190:	77 1f       	adc	r23, r23
    1192:	88 1f       	adc	r24, r24
    1194:	da f7       	brpl	.-10     	; 0x118c <__floatsisf+0x62>
    1196:	88 0f       	add	r24, r24
    1198:	96 95       	lsr	r25
    119a:	87 95       	ror	r24
    119c:	97 f9       	bld	r25, 7
    119e:	08 95       	ret

000011a0 <__fp_cmp>:
    11a0:	99 0f       	add	r25, r25
    11a2:	00 08       	sbc	r0, r0
    11a4:	55 0f       	add	r21, r21
    11a6:	aa 0b       	sbc	r26, r26
    11a8:	e0 e8       	ldi	r30, 0x80	; 128
    11aa:	fe ef       	ldi	r31, 0xFE	; 254
    11ac:	16 16       	cp	r1, r22
    11ae:	17 06       	cpc	r1, r23
    11b0:	e8 07       	cpc	r30, r24
    11b2:	f9 07       	cpc	r31, r25
    11b4:	c0 f0       	brcs	.+48     	; 0x11e6 <__fp_cmp+0x46>
    11b6:	12 16       	cp	r1, r18
    11b8:	13 06       	cpc	r1, r19
    11ba:	e4 07       	cpc	r30, r20
    11bc:	f5 07       	cpc	r31, r21
    11be:	98 f0       	brcs	.+38     	; 0x11e6 <__fp_cmp+0x46>
    11c0:	62 1b       	sub	r22, r18
    11c2:	73 0b       	sbc	r23, r19
    11c4:	84 0b       	sbc	r24, r20
    11c6:	95 0b       	sbc	r25, r21
    11c8:	39 f4       	brne	.+14     	; 0x11d8 <__fp_cmp+0x38>
    11ca:	0a 26       	eor	r0, r26
    11cc:	61 f0       	breq	.+24     	; 0x11e6 <__fp_cmp+0x46>
    11ce:	23 2b       	or	r18, r19
    11d0:	24 2b       	or	r18, r20
    11d2:	25 2b       	or	r18, r21
    11d4:	21 f4       	brne	.+8      	; 0x11de <__fp_cmp+0x3e>
    11d6:	08 95       	ret
    11d8:	0a 26       	eor	r0, r26
    11da:	09 f4       	brne	.+2      	; 0x11de <__fp_cmp+0x3e>
    11dc:	a1 40       	sbci	r26, 0x01	; 1
    11de:	a6 95       	lsr	r26
    11e0:	8f ef       	ldi	r24, 0xFF	; 255
    11e2:	81 1d       	adc	r24, r1
    11e4:	81 1d       	adc	r24, r1
    11e6:	08 95       	ret

000011e8 <__fp_inf>:
    11e8:	97 f9       	bld	r25, 7
    11ea:	9f 67       	ori	r25, 0x7F	; 127
    11ec:	80 e8       	ldi	r24, 0x80	; 128
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	08 95       	ret

000011f4 <__fp_nan>:
    11f4:	9f ef       	ldi	r25, 0xFF	; 255
    11f6:	80 ec       	ldi	r24, 0xC0	; 192
    11f8:	08 95       	ret

000011fa <__fp_pscA>:
    11fa:	00 24       	eor	r0, r0
    11fc:	0a 94       	dec	r0
    11fe:	16 16       	cp	r1, r22
    1200:	17 06       	cpc	r1, r23
    1202:	18 06       	cpc	r1, r24
    1204:	09 06       	cpc	r0, r25
    1206:	08 95       	ret

00001208 <__fp_pscB>:
    1208:	00 24       	eor	r0, r0
    120a:	0a 94       	dec	r0
    120c:	12 16       	cp	r1, r18
    120e:	13 06       	cpc	r1, r19
    1210:	14 06       	cpc	r1, r20
    1212:	05 06       	cpc	r0, r21
    1214:	08 95       	ret

00001216 <__fp_round>:
    1216:	09 2e       	mov	r0, r25
    1218:	03 94       	inc	r0
    121a:	00 0c       	add	r0, r0
    121c:	11 f4       	brne	.+4      	; 0x1222 <__fp_round+0xc>
    121e:	88 23       	and	r24, r24
    1220:	52 f0       	brmi	.+20     	; 0x1236 <__fp_round+0x20>
    1222:	bb 0f       	add	r27, r27
    1224:	40 f4       	brcc	.+16     	; 0x1236 <__fp_round+0x20>
    1226:	bf 2b       	or	r27, r31
    1228:	11 f4       	brne	.+4      	; 0x122e <__fp_round+0x18>
    122a:	60 ff       	sbrs	r22, 0
    122c:	04 c0       	rjmp	.+8      	; 0x1236 <__fp_round+0x20>
    122e:	6f 5f       	subi	r22, 0xFF	; 255
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	8f 4f       	sbci	r24, 0xFF	; 255
    1234:	9f 4f       	sbci	r25, 0xFF	; 255
    1236:	08 95       	ret

00001238 <__fp_split3>:
    1238:	57 fd       	sbrc	r21, 7
    123a:	90 58       	subi	r25, 0x80	; 128
    123c:	44 0f       	add	r20, r20
    123e:	55 1f       	adc	r21, r21
    1240:	59 f0       	breq	.+22     	; 0x1258 <__fp_splitA+0x10>
    1242:	5f 3f       	cpi	r21, 0xFF	; 255
    1244:	71 f0       	breq	.+28     	; 0x1262 <__fp_splitA+0x1a>
    1246:	47 95       	ror	r20

00001248 <__fp_splitA>:
    1248:	88 0f       	add	r24, r24
    124a:	97 fb       	bst	r25, 7
    124c:	99 1f       	adc	r25, r25
    124e:	61 f0       	breq	.+24     	; 0x1268 <__fp_splitA+0x20>
    1250:	9f 3f       	cpi	r25, 0xFF	; 255
    1252:	79 f0       	breq	.+30     	; 0x1272 <__fp_splitA+0x2a>
    1254:	87 95       	ror	r24
    1256:	08 95       	ret
    1258:	12 16       	cp	r1, r18
    125a:	13 06       	cpc	r1, r19
    125c:	14 06       	cpc	r1, r20
    125e:	55 1f       	adc	r21, r21
    1260:	f2 cf       	rjmp	.-28     	; 0x1246 <__fp_split3+0xe>
    1262:	46 95       	lsr	r20
    1264:	f1 df       	rcall	.-30     	; 0x1248 <__fp_splitA>
    1266:	08 c0       	rjmp	.+16     	; 0x1278 <__fp_splitA+0x30>
    1268:	16 16       	cp	r1, r22
    126a:	17 06       	cpc	r1, r23
    126c:	18 06       	cpc	r1, r24
    126e:	99 1f       	adc	r25, r25
    1270:	f1 cf       	rjmp	.-30     	; 0x1254 <__fp_splitA+0xc>
    1272:	86 95       	lsr	r24
    1274:	71 05       	cpc	r23, r1
    1276:	61 05       	cpc	r22, r1
    1278:	08 94       	sec
    127a:	08 95       	ret

0000127c <__fp_zero>:
    127c:	e8 94       	clt

0000127e <__fp_szero>:
    127e:	bb 27       	eor	r27, r27
    1280:	66 27       	eor	r22, r22
    1282:	77 27       	eor	r23, r23
    1284:	cb 01       	movw	r24, r22
    1286:	97 f9       	bld	r25, 7
    1288:	08 95       	ret

0000128a <__gesf2>:
    128a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fp_cmp>
    128e:	08 f4       	brcc	.+2      	; 0x1292 <__gesf2+0x8>
    1290:	8f ef       	ldi	r24, 0xFF	; 255
    1292:	08 95       	ret

00001294 <__mulsf3>:
    1294:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__mulsf3x>
    1298:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <__fp_round>
    129c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_pscA>
    12a0:	38 f0       	brcs	.+14     	; 0x12b0 <__mulsf3+0x1c>
    12a2:	0e 94 04 09 	call	0x1208	; 0x1208 <__fp_pscB>
    12a6:	20 f0       	brcs	.+8      	; 0x12b0 <__mulsf3+0x1c>
    12a8:	95 23       	and	r25, r21
    12aa:	11 f0       	breq	.+4      	; 0x12b0 <__mulsf3+0x1c>
    12ac:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__fp_inf>
    12b0:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__fp_nan>
    12b4:	11 24       	eor	r1, r1
    12b6:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__fp_szero>

000012ba <__mulsf3x>:
    12ba:	0e 94 1c 09 	call	0x1238	; 0x1238 <__fp_split3>
    12be:	70 f3       	brcs	.-36     	; 0x129c <__mulsf3+0x8>

000012c0 <__mulsf3_pse>:
    12c0:	95 9f       	mul	r25, r21
    12c2:	c1 f3       	breq	.-16     	; 0x12b4 <__mulsf3+0x20>
    12c4:	95 0f       	add	r25, r21
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	55 1f       	adc	r21, r21
    12ca:	62 9f       	mul	r22, r18
    12cc:	f0 01       	movw	r30, r0
    12ce:	72 9f       	mul	r23, r18
    12d0:	bb 27       	eor	r27, r27
    12d2:	f0 0d       	add	r31, r0
    12d4:	b1 1d       	adc	r27, r1
    12d6:	63 9f       	mul	r22, r19
    12d8:	aa 27       	eor	r26, r26
    12da:	f0 0d       	add	r31, r0
    12dc:	b1 1d       	adc	r27, r1
    12de:	aa 1f       	adc	r26, r26
    12e0:	64 9f       	mul	r22, r20
    12e2:	66 27       	eor	r22, r22
    12e4:	b0 0d       	add	r27, r0
    12e6:	a1 1d       	adc	r26, r1
    12e8:	66 1f       	adc	r22, r22
    12ea:	82 9f       	mul	r24, r18
    12ec:	22 27       	eor	r18, r18
    12ee:	b0 0d       	add	r27, r0
    12f0:	a1 1d       	adc	r26, r1
    12f2:	62 1f       	adc	r22, r18
    12f4:	73 9f       	mul	r23, r19
    12f6:	b0 0d       	add	r27, r0
    12f8:	a1 1d       	adc	r26, r1
    12fa:	62 1f       	adc	r22, r18
    12fc:	83 9f       	mul	r24, r19
    12fe:	a0 0d       	add	r26, r0
    1300:	61 1d       	adc	r22, r1
    1302:	22 1f       	adc	r18, r18
    1304:	74 9f       	mul	r23, r20
    1306:	33 27       	eor	r19, r19
    1308:	a0 0d       	add	r26, r0
    130a:	61 1d       	adc	r22, r1
    130c:	23 1f       	adc	r18, r19
    130e:	84 9f       	mul	r24, r20
    1310:	60 0d       	add	r22, r0
    1312:	21 1d       	adc	r18, r1
    1314:	82 2f       	mov	r24, r18
    1316:	76 2f       	mov	r23, r22
    1318:	6a 2f       	mov	r22, r26
    131a:	11 24       	eor	r1, r1
    131c:	9f 57       	subi	r25, 0x7F	; 127
    131e:	50 40       	sbci	r21, 0x00	; 0
    1320:	9a f0       	brmi	.+38     	; 0x1348 <__mulsf3_pse+0x88>
    1322:	f1 f0       	breq	.+60     	; 0x1360 <__mulsf3_pse+0xa0>
    1324:	88 23       	and	r24, r24
    1326:	4a f0       	brmi	.+18     	; 0x133a <__mulsf3_pse+0x7a>
    1328:	ee 0f       	add	r30, r30
    132a:	ff 1f       	adc	r31, r31
    132c:	bb 1f       	adc	r27, r27
    132e:	66 1f       	adc	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	88 1f       	adc	r24, r24
    1334:	91 50       	subi	r25, 0x01	; 1
    1336:	50 40       	sbci	r21, 0x00	; 0
    1338:	a9 f7       	brne	.-22     	; 0x1324 <__mulsf3_pse+0x64>
    133a:	9e 3f       	cpi	r25, 0xFE	; 254
    133c:	51 05       	cpc	r21, r1
    133e:	80 f0       	brcs	.+32     	; 0x1360 <__mulsf3_pse+0xa0>
    1340:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__fp_inf>
    1344:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__fp_szero>
    1348:	5f 3f       	cpi	r21, 0xFF	; 255
    134a:	e4 f3       	brlt	.-8      	; 0x1344 <__mulsf3_pse+0x84>
    134c:	98 3e       	cpi	r25, 0xE8	; 232
    134e:	d4 f3       	brlt	.-12     	; 0x1344 <__mulsf3_pse+0x84>
    1350:	86 95       	lsr	r24
    1352:	77 95       	ror	r23
    1354:	67 95       	ror	r22
    1356:	b7 95       	ror	r27
    1358:	f7 95       	ror	r31
    135a:	e7 95       	ror	r30
    135c:	9f 5f       	subi	r25, 0xFF	; 255
    135e:	c1 f7       	brne	.-16     	; 0x1350 <__mulsf3_pse+0x90>
    1360:	fe 2b       	or	r31, r30
    1362:	88 0f       	add	r24, r24
    1364:	91 1d       	adc	r25, r1
    1366:	96 95       	lsr	r25
    1368:	87 95       	ror	r24
    136a:	97 f9       	bld	r25, 7
    136c:	08 95       	ret

0000136e <__udivmodsi4>:
    136e:	a1 e2       	ldi	r26, 0x21	; 33
    1370:	1a 2e       	mov	r1, r26
    1372:	aa 1b       	sub	r26, r26
    1374:	bb 1b       	sub	r27, r27
    1376:	fd 01       	movw	r30, r26
    1378:	0d c0       	rjmp	.+26     	; 0x1394 <__udivmodsi4_ep>

0000137a <__udivmodsi4_loop>:
    137a:	aa 1f       	adc	r26, r26
    137c:	bb 1f       	adc	r27, r27
    137e:	ee 1f       	adc	r30, r30
    1380:	ff 1f       	adc	r31, r31
    1382:	a2 17       	cp	r26, r18
    1384:	b3 07       	cpc	r27, r19
    1386:	e4 07       	cpc	r30, r20
    1388:	f5 07       	cpc	r31, r21
    138a:	20 f0       	brcs	.+8      	; 0x1394 <__udivmodsi4_ep>
    138c:	a2 1b       	sub	r26, r18
    138e:	b3 0b       	sbc	r27, r19
    1390:	e4 0b       	sbc	r30, r20
    1392:	f5 0b       	sbc	r31, r21

00001394 <__udivmodsi4_ep>:
    1394:	66 1f       	adc	r22, r22
    1396:	77 1f       	adc	r23, r23
    1398:	88 1f       	adc	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	1a 94       	dec	r1
    139e:	69 f7       	brne	.-38     	; 0x137a <__udivmodsi4_loop>
    13a0:	60 95       	com	r22
    13a2:	70 95       	com	r23
    13a4:	80 95       	com	r24
    13a6:	90 95       	com	r25
    13a8:	9b 01       	movw	r18, r22
    13aa:	ac 01       	movw	r20, r24
    13ac:	bd 01       	movw	r22, r26
    13ae:	cf 01       	movw	r24, r30
    13b0:	08 95       	ret

000013b2 <__tablejump2__>:
    13b2:	ee 0f       	add	r30, r30
    13b4:	ff 1f       	adc	r31, r31
    13b6:	05 90       	lpm	r0, Z+
    13b8:	f4 91       	lpm	r31, Z
    13ba:	e0 2d       	mov	r30, r0
    13bc:	09 94       	ijmp

000013be <__muluhisi3>:
    13be:	0e 94 33 0a 	call	0x1466	; 0x1466 <__umulhisi3>
    13c2:	a5 9f       	mul	r26, r21
    13c4:	90 0d       	add	r25, r0
    13c6:	b4 9f       	mul	r27, r20
    13c8:	90 0d       	add	r25, r0
    13ca:	a4 9f       	mul	r26, r20
    13cc:	80 0d       	add	r24, r0
    13ce:	91 1d       	adc	r25, r1
    13d0:	11 24       	eor	r1, r1
    13d2:	08 95       	ret

000013d4 <__umulsidi3>:
    13d4:	e8 94       	clt

000013d6 <__umulsidi3_helper>:
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	fc 01       	movw	r30, r24
    13dc:	db 01       	movw	r26, r22
    13de:	0e 94 33 0a 	call	0x1466	; 0x1466 <__umulhisi3>
    13e2:	7f 93       	push	r23
    13e4:	6f 93       	push	r22
    13e6:	e9 01       	movw	r28, r18
    13e8:	9a 01       	movw	r18, r20
    13ea:	ac 01       	movw	r20, r24
    13ec:	bf 93       	push	r27
    13ee:	af 93       	push	r26
    13f0:	3f 93       	push	r19
    13f2:	2f 93       	push	r18
    13f4:	df 01       	movw	r26, r30
    13f6:	0e 94 33 0a 	call	0x1466	; 0x1466 <__umulhisi3>
    13fa:	26 f4       	brtc	.+8      	; 0x1404 <__umulsidi3_helper+0x2e>
    13fc:	6c 1b       	sub	r22, r28
    13fe:	7d 0b       	sbc	r23, r29
    1400:	82 0b       	sbc	r24, r18
    1402:	93 0b       	sbc	r25, r19
    1404:	9e 01       	movw	r18, r28
    1406:	eb 01       	movw	r28, r22
    1408:	fc 01       	movw	r30, r24
    140a:	0e 94 42 0a 	call	0x1484	; 0x1484 <__muldi3_6>
    140e:	af 91       	pop	r26
    1410:	bf 91       	pop	r27
    1412:	2f 91       	pop	r18
    1414:	3f 91       	pop	r19
    1416:	0e 94 42 0a 	call	0x1484	; 0x1484 <__muldi3_6>
    141a:	be 01       	movw	r22, r28
    141c:	cf 01       	movw	r24, r30
    141e:	f9 01       	movw	r30, r18
    1420:	2f 91       	pop	r18
    1422:	3f 91       	pop	r19
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <__ashrdi3>:
    142a:	97 fb       	bst	r25, 7
    142c:	10 f8       	bld	r1, 0

0000142e <__lshrdi3>:
    142e:	16 94       	lsr	r1
    1430:	00 08       	sbc	r0, r0
    1432:	0f 93       	push	r16
    1434:	08 30       	cpi	r16, 0x08	; 8
    1436:	98 f0       	brcs	.+38     	; 0x145e <__lshrdi3+0x30>
    1438:	08 50       	subi	r16, 0x08	; 8
    143a:	23 2f       	mov	r18, r19
    143c:	34 2f       	mov	r19, r20
    143e:	45 2f       	mov	r20, r21
    1440:	56 2f       	mov	r21, r22
    1442:	67 2f       	mov	r22, r23
    1444:	78 2f       	mov	r23, r24
    1446:	89 2f       	mov	r24, r25
    1448:	90 2d       	mov	r25, r0
    144a:	f4 cf       	rjmp	.-24     	; 0x1434 <__lshrdi3+0x6>
    144c:	05 94       	asr	r0
    144e:	97 95       	ror	r25
    1450:	87 95       	ror	r24
    1452:	77 95       	ror	r23
    1454:	67 95       	ror	r22
    1456:	57 95       	ror	r21
    1458:	47 95       	ror	r20
    145a:	37 95       	ror	r19
    145c:	27 95       	ror	r18
    145e:	0a 95       	dec	r16
    1460:	aa f7       	brpl	.-22     	; 0x144c <__lshrdi3+0x1e>
    1462:	0f 91       	pop	r16
    1464:	08 95       	ret

00001466 <__umulhisi3>:
    1466:	a2 9f       	mul	r26, r18
    1468:	b0 01       	movw	r22, r0
    146a:	b3 9f       	mul	r27, r19
    146c:	c0 01       	movw	r24, r0
    146e:	a3 9f       	mul	r26, r19
    1470:	70 0d       	add	r23, r0
    1472:	81 1d       	adc	r24, r1
    1474:	11 24       	eor	r1, r1
    1476:	91 1d       	adc	r25, r1
    1478:	b2 9f       	mul	r27, r18
    147a:	70 0d       	add	r23, r0
    147c:	81 1d       	adc	r24, r1
    147e:	11 24       	eor	r1, r1
    1480:	91 1d       	adc	r25, r1
    1482:	08 95       	ret

00001484 <__muldi3_6>:
    1484:	0e 94 33 0a 	call	0x1466	; 0x1466 <__umulhisi3>
    1488:	46 0f       	add	r20, r22
    148a:	57 1f       	adc	r21, r23
    148c:	c8 1f       	adc	r28, r24
    148e:	d9 1f       	adc	r29, r25
    1490:	08 f4       	brcc	.+2      	; 0x1494 <__muldi3_6+0x10>
    1492:	31 96       	adiw	r30, 0x01	; 1
    1494:	08 95       	ret

00001496 <_exit>:
    1496:	f8 94       	cli

00001498 <__stop_program>:
    1498:	ff cf       	rjmp	.-2      	; 0x1498 <__stop_program>
